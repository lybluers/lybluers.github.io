<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2023/03/28/RabbitMQ/"/>
      <url>/2023/03/28/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<p>为什么要使用RabbitMQ</p><ol><li>解耦</li><li>异步</li><li>流量削峰填谷</li></ol><p>缺点</p><ol><li>可用性降低（系统多容易崩）</li><li>复杂度提高</li><li>一致性问题（可能会发生丢失，重复）</li></ol><p><strong>四种重要概念</strong></p><ol><li>Exchange（交换机）：是RabbitMQ中的消息交换机，用于接收生产者发送的消息，并根据特定的规则将消息路由到对应的队列中。Exchange有四种类型：direct、fanout、topic和headers。</li><li>Queue（队列）：是RabbitMQ中的消息队列，用于存储从Exchange中接收到的消息。队列通常与消费者相关联，消费者可以从队列中接收消息并进行处理。</li><li>Binding（绑定）：是Exchange和Queue之间的绑定关系。通过Binding，可以将Exchange中的消息路由到对应的队列中。Binding可以通过Routing Key和Binding参数进行定义。</li><li>Routing Key（路由键）：是用于将消息路由到特定队列的标识符。Routing Key通常与Exchange和Binding相关联，生产者可以将消息发送到Exchange并使用特定的Routing Key来指定消息要发送到哪个队列。</li></ol><p>综上所述，Exchange、Queue、Binding和Routing Key是RabbitMQ中非常重要的四个概念，它们共同构成了RabbitMQ的消息路由机制，为RabbitMQ提供了高度的灵活性和可扩展性。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol><li>首先，需要在项目中添加RabbitMQ的Java客户端库依赖，可以通过Maven或Gradle等构建工具来实现。例如，在Maven中添加以下依赖：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.13.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol><li>然后，在项目中创建一个连接到RabbitMQ的Connection对象。可以使用ConnectionFactory类来创建连接，如下所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory factory = new ConnectionFactory();</span><br><span class="line">factory.setHost(&quot;localhost&quot;);</span><br><span class="line">factory.setUsername(&quot;guest&quot;);</span><br><span class="line">factory.setPassword(&quot;guest&quot;);</span><br><span class="line">Connection connection = factory.newConnection();</span><br></pre></td></tr></table></figure><p>上面的代码将创建一个连接到本地运行的RabbitMQ服务器，并使用默认的guest用户进行身份验证。</p><ol><li>创建一个Channel对象，用于发送和接收消息。可以通过Connection对象来创建Channel对象，如下所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Channel channel = connection.createChannel();</span><br></pre></td></tr></table></figure><ol><li>在创建Channel对象后，可以使用它来创建队列或交换机等实体，并发送或接收消息。例如，创建一个名为“hello”的队列，可以使用以下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(&quot;hello&quot;, false, false, false, null);</span><br></pre></td></tr></table></figure><ol><li>发送消息到队列中，可以使用以下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String message = &quot;Hello, World!&quot;;</span><br><span class="line">channel.basicPublish(&quot;&quot;, &quot;hello&quot;, null, message.getBytes());</span><br></pre></td></tr></table></figure><p>这将把一个包含“Hello, World!”消息的字节数组发送到名为“hello”的队列中。</p><ol><li>接收消息可以使用BasicConsumer类和Channel对象的basicConsume方法来实现。例如，以下代码可以接收名为“hello”的队列中的消息：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;</span><br><span class="line">    String message = new String(body, &quot;UTF-8&quot;);</span><br><span class="line">    System.out.println(&quot;Received message: &quot; + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">channel.basicConsume(&quot;hello&quot;, true, consumer);</span><br></pre></td></tr></table></figure><p>上面的代码将创建一个DefaultConsumer对象，并将其传递给basicConsume方法，以开始从名为“hello”的队列中接收消息。handleDelivery方法将在每次接收到消息时被调用，并在控制台上打印接收到的消息。</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign</title>
      <link href="/2023/03/21/Feign/"/>
      <url>/2023/03/21/Feign/</url>
      
        <content type="html"><![CDATA[<h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><blockquote><p>Feign是Spring Cloud提供的声明式、模板化的HTTP客户端， 它使得调用远程服务就像调用本地服务一样简单，只需要创建一个接口并添加一个注解即可。</p></blockquote><p>Spring Cloud集成Feign并对其进行了增强，使Feign支持了Spring MVC注解；Feign默认集成了Ribbon，所以Fegin默认就实现了负载均衡的效果。</p><p>具体来说，Feign 可以通过定义接口的方式，自动生成实现了该接口的 HTTP 客户端代码，开发者可以直接调用这些方法，而不需要自己编写 HTTP 客户端的代码。同时，Feign 还提供了负载均衡和服务发现的支持，可以方便地在多个服务提供者之间进行负载均衡，实现高可用和容错。</p><p>如果不使用feign，则调用其他服务接口的方法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://service-provider/user/1&quot;</span>, String.class);</span><br></pre></td></tr></table></figure><p>如果使用feign调用其他接口的方法是</p><p>UserFeignClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;service-provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doSomething.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserFeignClient userFeignClient; <span class="comment">// 直接注入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userFeignClient.getUser(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/21/Feign/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyYXp5bWFrZXJjaXJjbGU=,size_16,color_FFFFFF,t_70.png" alt="img"></p><p><img src="/2023/03/21/Feign/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NzExOA==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>导入坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Cloud OpenFeign Starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建feign接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span> 一般采用服务名进行命名</span></span><br><span class="line"><span class="comment"> * name：指定FeignClient的名称，如果项目使用了Ribbon，name属性会作为微服务的名称，用于服务发现</span></span><br><span class="line"><span class="comment"> * url: url一般用于调试，可以手动指定<span class="doctag">@FeignClient</span>调用的地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestMapping</span> 主要用于feign框架拼接传递url，弥补了Ribbon的url需要手动拼接的缺陷</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PathVariable</span>(&quot;id&quot;) 当路径为restful风格时路径传参方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span>(&quot;id&quot;) 当路径为？id=250 时传参方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestBody</span> User user 当路径为对象时采用的传参方式，（集合、数组等都属于对象）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;feign-provider&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeign</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUserById&quot;)</span></span><br><span class="line">    User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>;<span class="comment">//？形式拼接参数，?id=250</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    User <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>;<span class="comment">//pojo---&gt;json</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h3><p>@FeignClient标签的常用属性如下：</p><ul><li><p><code>name</code>：指定FeignClient的名称，如果项目使用了Ribbon，name属性会作为微服务的名称，用于服务发现</p></li><li><p><code>url</code>: url一般用于调试，可以手动指定@FeignClient调用的地址 </p></li><li><p><code>decode404</code>:当发生http 404错误时，如果该字段位true，会调用decoder进行解码，否则抛出FeignException</p></li><li><p><code>configuration</code>: Feign配置类，可以自定义Feign的Encoder、Decoder、LogLevel、Contract</p></li><li><p><code>fallback</code>: 定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，fallback指定的类必须实现@FeignClient标记的接口</p></li><li><p><code>fallbackFactory</code>: 工厂类，用于生成fallback类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码</p></li><li><p><code>path</code>: 定义当前FeignClient的统一前缀，当我们项目中配置了server.context-path,server.servlet-path时使用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串行接口</title>
      <link href="/2023/03/20/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/"/>
      <url>/2023/03/20/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="RS-232"><a href="#RS-232" class="headerlink" title="RS-232"></a>RS-232</h2><p><img src="/2023/03/20/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70-16792785500309.png" alt="img"></p><p><img src="/2023/03/20/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/20190806144225349.png" alt="img"></p><h3 id="电气特性"><a href="#电气特性" class="headerlink" title="电气特性"></a>电气特性</h3><p>EIA-RS-232C对电器特性、逻辑电平和各种信号线功能都作了规定。 </p><p>在TxD和RxD上：逻辑1(MARK)&#x3D;-3V～-15V ，逻辑0(SPACE)&#x3D;+3～＋15V  在RTS、CTS、DSR、DTR和DCD等控制线上： </p><p>信号有效（接通，ON状态，正电压）＝+3V～+15V </p><p>信号无效（断开，OFF状态，负电压)&#x3D;-3V～-15V </p><p>根据设备供电电源的不同，+-5、+-10、+-12和+-15这样的电平都是可能的。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>（1） 接口的信号电平值较高，易损坏接口电路的芯片，又因为与TTL 电平不兼容故需使用电平转换电路方能与TTL 电路连接。</p><p>（2） 传输速率较低，在异步传输时，波特率为20Kbps。现在由于采用新的UART 芯片16C550 等，波特率达到115.2Kbps。</p><p>（3） 接口使用一根信号线和一根信号返回线而构成共地的传输形式， 这种共地传输容易产生共模干扰，所以抗噪声干扰性弱。</p><p>（4） 传输距离有限，最大传输距离标准值为50 米，实际上也只能用在15米左右。 </p><h2 id="RS-485"><a href="#RS-485" class="headerlink" title="RS-485"></a>RS-485</h2><h3 id="电气特性-1"><a href="#电气特性-1" class="headerlink" title="电气特性"></a>电气特性</h3><p>驱动器能输出±7V的共模电压 </p><p>接收器的输入电阻RIN≥12kΩ </p><p>输入端的电容≤50pF </p><p>在节点数为32个，配置了120Ω的终端电阻的情况下，驱动器至少还能输出电压1.5V（终端电阻的大小与所用双绞线的参数有关） </p><p>发送端：逻辑”1”以两线间的电压差为+（2 至6） V 表示；逻辑”0”以两线间的电压差为-（2 至6）V 表示。</p><p>接收器的输入灵敏度为200mV（即（V+）-（V-）≥0.2V，表示信号”0”；（V+）-（V-）≤-0.2V，表示信号”1”）  </p><p>​</p><h3 id="传输速率和传输距离"><a href="#传输速率和传输距离" class="headerlink" title="传输速率和传输距离"></a>传输速率和传输距离</h3><p>RS-485 的数据最高传输速率为10Mbps，最大的通信距离约为1219M，传输速率与传输距离成反比，在10Kb&#x2F;S的传输速率下，才可以达到最大的通信距离。</p><p>但是由于RS-485 常常要与PC 机的RS-232口通信，所以实际上一般最高115.2Kbps。又由于太高的速率会使RS-485 传输距离减小，所以往往为9600bps 左右或以下。 </p><p><img src="/2023/03/20/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70-16792785134006.png" alt="img"></p><h3 id="RS-232-和-RS-485对比"><a href="#RS-232-和-RS-485对比" class="headerlink" title="RS-232 和 RS-485对比"></a>RS-232 和 RS-485对比</h3><p>1、抗干扰性：RS485 接口是采用平衡驱动器和差分接收器的组合，抗噪声干扰性好。RS232 接口使用一根信号线和一根信号返回线而构成共地的传输形式，这种共地传输容易产生共模干扰。</p><p>2、传输距离：RS485 接口的最大传输距离标准值为 1200 米（9600bps 时），实际上可达 3000 米。RS232 传输距离有限，最大传输距离标准值为 50 米，实际上也只能用在 15 米左右。</p><p>3、通信能力：RS-485 接口在总线上是允许连接多达128个收发器，用户可以利用单一的 RS-485 接口方便地建立起设备网络。RS-232只允许一对一通信。</p><p>4、传输速率：RS-232传输速率较低，在异步传输时，波特率为 20Kbps。RS-485 的数据最高传输速率为 10Mbps 。</p><p>5、信号线：RS485 接口组成的半双工网络，一般只需二根信号线。RS-232 口一般只使用 RXD、TXD、GND 三条线 。</p><p>6、电气电平值：RS-485的逻辑”1”以两线间的电压差为+（2<del>6） V 表示；逻辑”0”以两线间的电压差为-（2</del>6）V 表 示 。在 RS-232-C 中任何一条信号线的电压均为负逻辑关系。即：逻辑”1”，-5<del>-15V；逻辑”0 “ +5</del>+15V 。</p><h2 id="RS-422"><a href="#RS-422" class="headerlink" title="RS-422"></a>RS-422</h2><p>RS-422 的电气性能与RS-485近似一样。主要的区别在于：</p><p>（1）RS-485 有2 根信号线：发送和接收都是A 和B。由于RS-485 的收与发是共用两根线，所以不能够同时收和发（半双工）。</p><p>（2）RS-422 有4 根信号线：两根发送（Y、Z）、两根接收（A、B）。由于RS-422 的收与发是分开的，所以可以同时收和发（全双工）。</p><p>（3）支持多机通信的RS-422将Y-A 短接作为RS-485 的A、将RS-422 的Z-B 短接作为RS-485 的B可以这样简单转换为RS-485。 </p><p><img src="/2023/03/20/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70.jpeg" alt="img"></p><h2 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h2><blockquote><p>UART是通用异步收发传输器（Universal Asynchronous Receiver&#x2F;Transmitter)，通常称作UART，是一种异步收发传输器，是设备间进行异步通信的关键模块。UART负责处理数据总线和串行口之间的串&#x2F;并、并&#x2F;串转换，并规定了帧格式；通信双方只要采用相同的帧格式和波特率，就能在未共享时钟信号的情况下，仅用两根信号线（Rx 和Tx）就可以完成通信过程，因此也称为异步串行通信。</p></blockquote><p>​<img src="/2023/03/20/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOT </tag>
            
            <tag> 串行接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_IO</title>
      <link href="/2023/03/19/Java-IO/"/>
      <url>/2023/03/19/Java-IO/</url>
      
        <content type="html"><![CDATA[<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><ul><li><p>使用 <code>newBufferedWriter</code> 创建文件并写入内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;d</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\data\\newFile.txt&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(fileName);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 使用 newBufferedWriter创建文件并写入文件</span></span><br><span class="line">    <span class="comment">// 这里使用 try-with-resources 方法来关闭流，不用手动关闭</span></span><br><span class="line">    <span class="keyword">try</span>(<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> Files.newBufferedWriter(path, StandardCharsets.UTF_8))&#123;</span><br><span class="line">        writer.write(<span class="string">&quot;hello world!!&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 追加写入</span></span><br><span class="line">    <span class="keyword">try</span>(<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> Files.newBufferedWriter(path,StandardCharsets.UTF_8, StandardOpenOption.APPEND))&#123;</span><br><span class="line">        writer.write(<span class="string">&quot;hello IO!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>Files</code> 直接写入文件（推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\data\\newFile.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Files.write(Paths.get(fileName),<span class="string">&quot;hello world&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    Files.write(Paths.get(fileName),<span class="string">&quot;\n&quot;</span>.getBytes(StandardCharsets.UTF_8),StandardOpenOption.APPEND);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 追加写入</span></span><br><span class="line">    Files.write(Paths.get(fileName),<span class="string">&quot;hello world&quot;</span>.getBytes(StandardCharsets.UTF_8),StandardOpenOption.APPEND);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>PrintWrite</code>写入(按行写入)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\data\\newFile.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// StandardCharsets.UTF_8 为jdk10及以上版本</span></span><br><span class="line">    <span class="keyword">try</span>(<span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fileName,<span class="string">&quot;UTF-8&quot;</span>))&#123;</span><br><span class="line">        writer.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        writer.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>file</code>创建文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\data\\newFile.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建文件</span></span><br><span class="line">        <span class="keyword">if</span>(file.createNewFile())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建文件成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file))&#123;</span><br><span class="line">            writer.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用流写入文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\data\\newFile.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileName);</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">        )&#123;</span><br><span class="line">            bw.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><ul><li><p>使用<code>Scanner</code>读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\data\\newFile.txt&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(fileName)))&#123;</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextLine())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(fileName)))&#123;</span><br><span class="line">        scanner.useDelimiter(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用流方式读取(推荐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\data\\newFile.txt&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 读取文件内容到Stream流当中，进行读取</span></span><br><span class="line">    Stream&lt;String&gt; lines = Files.lines(Paths.get(fileName));</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 使用封装集合读取数据</span></span><br><span class="line">    List&lt;String&gt; collect = lines.collect(Collectors.toList());</span><br><span class="line">  </span><br><span class="line">    System.out.println(collect.get(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(String k:collect)&#123;</span><br><span class="line">        System.out.println(k);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 使用java8中的foreach方法读取数据</span></span><br><span class="line">    lines.forEach(ele -&gt;&#123;</span><br><span class="line">        System.out.println(ele);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 随机行顺序进行处理</span></span><br><span class="line">    lines.forEach(System.out::println);</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// 按文件行顺序进行处理</span></span><br><span class="line">     lines.parallel().forEachOrdered(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果文件较小，可以直接使用 Files.readAllLines() 读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\data\\newFile.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strings = Files.readAllLines(Paths.get(fileName), StandardCharsets.UTF_8);</span><br><span class="line">    strings.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ModBus</title>
      <link href="/2023/03/15/ModBus/"/>
      <url>/2023/03/15/ModBus/</url>
      
        <content type="html"><![CDATA[<h1 id="ModBus"><a href="#ModBus" class="headerlink" title="ModBus"></a>ModBus</h1><p>参考文档</p><blockquote><p><a href="https://huaweicloud.csdn.net/63a5687bb878a54545946a6a.html?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~ESLANDING~activity-4-123197782-blog-105285231.pc_relevant_landingrelevant&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~ESLANDING~activity-4-123197782-blog-105285231.pc_relevant_landingrelevant&amp;utm_relevant_index=9">https://huaweicloud.csdn.net/63a5687bb878a54545946a6a.html?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EESLANDING%7Eactivity-4-123197782-blog-105285231.pc_relevant_landingrelevant&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EESLANDING%7Eactivity-4-123197782-blog-105285231.pc_relevant_landingrelevant&amp;utm_relevant_index=9</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>MODBUS&#x2F;TCP是简单的、中立厂商的用于管理和控制自动化设备的MODBUS系列通讯协议的派生产品。显而易见，它覆盖了使用TCP&#x2F;IP协议的“Intranet”和“Internet”环境中MODBUS 报文的用途。协议的最通用用途是为诸如PLC’s，I&#x2F;O模块，以及连接其它简单域总线或I&#x2F;O模块的网关服务的。</p></blockquote><p><img src="/2023/03/15/ModBus/f3d3572c11dfa9ec9684f3ef6e2c8608938fc1a3.jpeg" alt="img"></p><h2 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h2><p>注意Modbus是<strong>一主多从</strong>的通信协议</p><p>Modbus通信中只有一个设备可以发送请求。其他从设备接收主机发送的数据来进行响应，从机是任何外围设备，如I&#x2F;O传感器，阀门，网络驱动器，或其他测量类型的设备。从站处理信息和使用Modbus将其数据发送给主站。</p><p><strong>也就是说,不能Modbus同步进行通信,主机在同一时间内只能向一个从机发送请求，总线上每次只有一个数据进行传输,即主机发送,从机应答,主机不发送,总线上就没有数据通信。</strong></p><p>从机不会自己发送消息给主站，只能回复从主机发送的消息请求。</p><p><img src="/2023/03/15/ModBus/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWuWwj-aXiw==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>串行端口存在多个版本的Modbus协议，而最常见的是下面四种：</p><ul><li>Modbus-Rtu</li><li>Modbus-Ascii</li><li>Modbus-Tcp</li><li>ModbusPlus</li></ul><p>Modbus RTU是一种紧凑的，<strong>十六进制表示数据的方式</strong>，Modbus ASCII是一种采用<strong>Ascii码表示数据</strong>，并且每个8Bit 字节都作为两个ASCII字符发送的表示方式。<br>RTU格式后续的命令&#x2F;数据带有循环冗余校验的校验和，而ASCII格式采用纵向冗余校验的校验和。</p><p><strong>Modbus协议使用串口传输时可以选择RTU或ASCII模式，并规定了消息、数据结构、命令和应答方式并需要对数据进行校验。ASCII 模式采用LRC校验，RTU模式采用16 位CRC校验。通过以太网传输时使用TCP，这种模式不使用校验，因为TCP协议是一个面向连接的可靠协议。</strong></p><h2 id="Modbus-TCP"><a href="#Modbus-TCP" class="headerlink" title="Modbus TCP"></a>Modbus TCP</h2><h3 id="Modbus-TCP数据帧"><a href="#Modbus-TCP数据帧" class="headerlink" title="Modbus TCP数据帧"></a>Modbus TCP数据帧</h3><p>Modbus TCP协议是在RTU协议前面添加MBAP报文头，由于TCP是基于可靠连接的服务，RTU协议中的CRC校验码就不再需要，所以在Modbus TCP协议中是没有CRC校验码。(使用上的主要区别)。</p><p>MBAP报文头：事务处理标识 ( 2字节 ) 协议标识( 2字节 ) 长度( 2字节 ) 单元标识符(1字节 )</p><p><img src="/2023/03/15/ModBus/f3308dc113bd471c8648634295f1db2a.png" alt="MODBUS-TCP数据帧"></p><h3 id="Modbus-TCP使用的功能代码"><a href="#Modbus-TCP使用的功能代码" class="headerlink" title="Modbus TCP使用的功能代码"></a>Modbus TCP使用的功能代码</h3><p>按照使用的通途区分，共有3种类型分别为：</p><ul><li><p>公共功能代码：已定义好功能码，保证其唯一性，由Modbus.org认可；</p></li><li><p>用户自定义功能代码有两组，分别为65～72和100～110，无需认可，但不保证代码使用唯一性,如变为公共代码，需交RFC认可；</p></li><li><p>保留功能代码，由某些公司使用某些传统设备代码，不可作为公共用途。</p></li></ul><p>modbus的操作对象有四种：线圈、离散输入、输入寄存器、保持寄存器</p><blockquote><p>线圈：PLC的输出位，开关量，在MODBUS中可读可写<br>离散量：PLC的输入位，开关量，在MODBUS中只读<br>输入寄存器：PLC中只能从模拟量输入端改变的寄存器，在MODBUS中只读<br>保持寄存器：PLC中用于输出模拟量信号的寄存器，在MODBUS中可读可写</p></blockquote><p>根据对象的不同，modbus的功能码有：</p><blockquote><p>0x01：读线圈<br>0x02：读离散量输入<br>0x03：读保持寄存器<br>0x04：读输入寄存器<br>0x05：写单个线圈<br>0x06：写单个保持寄存器<br>0x10：写多个保持寄存器<br>0x0F：写多个线圈</p></blockquote><p>按照应用深浅，可分为3个类别：</p><ul><li><p>类别0，客户机&#x2F;服务器最小可用子集：读多个保持寄存器(fc.3)；写多个保持寄存器(fc.16)。</p></li><li><p>类别1，可实现基本互易操作常用代码：读线圈(fc.1)；读开关量输入(fc.2)；读输入寄存器(fc.4)；写线圈(fc.5)；写单一寄存器(fc.6)。</p></li><li><p>类别2，用于人机界面、监控系统例行操作和数据传送功能：强制多个线圈(fc.15)；读通用寄存器(fc.20)；写通用寄存器(fc.21)；屏蔽写寄存器(fc.22)；读写寄存器(fc.23)。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOT </tag>
            
            <tag> ModBus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OPC</title>
      <link href="/2023/03/15/OPC/"/>
      <url>/2023/03/15/OPC/</url>
      
        <content type="html"><![CDATA[<h1 id="OPC"><a href="#OPC" class="headerlink" title="OPC"></a>OPC</h1><blockquote><p>OPC是OLE for ProcessControl的缩写，即应用于过程控制，<strong>OPC就是基于COM&#x2F;DCOM的数据访问的标准</strong>；</p></blockquote><h2 id="OPC的本质"><a href="#OPC的本质" class="headerlink" title="OPC的本质"></a>OPC的本质</h2><blockquote><p> <strong>OPC规范包括OPC服务器和OPC客户端两个部分</strong>。<strong>其本质是在硬件供应商和软件开发商之间建立一套完整的“规则</strong>”。</p></blockquote><h2 id="OPC-DA"><a href="#OPC-DA" class="headerlink" title="OPC DA"></a>OPC DA</h2><ul><li><p>OPC数据采集端，通过串口，以太网，板卡，采集到的数据，作为OPC服务端**，以便OPC客户端来进行访问；</p></li><li><p>OPCDA不是协议。虽说<strong>OPC是一个标准</strong>，但是这个标准并不是指某个通信协议标准，而<strong>是指某种技术的使用标准和规范</strong>。</p></li></ul><h2 id="OPC-UA"><a href="#OPC-UA" class="headerlink" title="OPC UA"></a>OPC UA</h2><blockquote><p>OPC UA（OPC Unified Architecture）是<strong>指OPC统一体系架构，是一种基于服务的、跨越平台的解决方案</strong>。</p></blockquote><p><strong>本质</strong></p><ul><li><p>OPC UA除了约定了数据等定义规范，同时还支持了TCP&#x2F;IP协议**。使得远程访问不再局限于使用RPC技术。</p></li><li><p>OPC UA支持跨平台，跨系统，可以在各平台，各系统进行数据通信访问**。</p></li><li><p><strong>OPC UA的数据结构，存储，映射等，不再使用COM&#x2F;DCOM技术，就意味着不再限制于Windows了</strong>。</p></li><li><p>信息加密，互访认证以及安全监听功能。</p></li><li><p>丰富的信息建模：可定义复杂的信息，而不再是单一的数据。</p></li></ul><p><strong>特点</strong></p><ul><li>扩展了OPC的应用平台**。传统的基于COM&#x2F;DCOM 的OPC技术只能基于Windows操作系统，OPC UA支持拓展到Linux和Unix平台。这使得基于OPC UA的标准产品可以更好地实现工厂级的数据采集和管理；</li><li>不再基于DCOM通讯，不需要进行DCOM安全设置；</li><li><strong>OPC UA比OPC DA更安全</strong>。OPC UA传递的数据是可以加密的，并对通信连接和数据本身都可以实现安全控制。新的安全模型保证了数据从原始设备到MES,ERP系统,从本地到远程的各级自动化和信息化系统的可靠传递；</li><li><strong>OPC UA可以穿越防火墙，实现Internet 通讯</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOT </tag>
            
            <tag> OPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT</title>
      <link href="/2023/03/15/MQTT/"/>
      <url>/2023/03/15/MQTT/</url>
      
        <content type="html"><![CDATA[<h1 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h1><blockquote><p>参考文档 <a href="https://mcxiaoke.gitbooks.io/mqtt-cn/content/">https://mcxiaoke.gitbooks.io/mqtt-cn/content/</a></p></blockquote><p>MQTT是一个基于<strong>客户端-服务器</strong>的消息发布&#x2F;订阅传输协议。</p><p>MQTT 与 HTTP 一样，MQTT 运行在传输控制协议&#x2F;互联网协议 (TCP&#x2F;IP) 堆栈之上。</p><h2 id="Qos"><a href="#Qos" class="headerlink" title="Qos"></a>Qos</h2><blockquote><p><code>服务质量</code>是 MQTT 的一个重要特性。当我们使用 TCP&#x2F;IP 时，连接已经在一定程度上受到保护。但是在无线网络中，中断和干扰很频繁，MQTT 在这里帮助避免信息丢失及其服务质量水平。这些级别在发布时使用。如果客户端发布到 MQTT 服务器，则客户端将是发送者，MQTT 服务器将是接收者。当MQTT服务器向客户端发布消息时，服务器是发送者，客户端是接收者。</p></blockquote><p><strong>QoS  0</strong></p><p>这一级别会发生消息丢失或重复，消息发布依赖于底层TCP&#x2F;IP网络。即：&lt;&#x3D;1</p><p><img src="/2023/03/15/MQTT/2adfda1f415a73ee5ad4c18fcce3f129.png" alt="img"></p><p><strong>QoS  1</strong></p><p>QoS 1 承诺消息将至少传送一次给订阅者。</p><p><img src="/2023/03/15/MQTT/93542136b9523c414b6b91588e4ee2e4.png" alt="img"></p><p><strong>QoS  2</strong></p><p>使用 QoS 2，我们保证消息仅传送到目的地一次。为此，带有唯一消息 ID 的消息会存储两次，首先来自发送者，然后是接收者。QoS 级别 2 在网络中具有最高的开销，因为在发送方和接收方之间需要两个流。</p><p><img src="/2023/03/15/MQTT/bfe330004cad319e7808479fad5fbaec.png" alt="img"></p><h2 id="MQTT-数据包结构"><a href="#MQTT-数据包结构" class="headerlink" title="MQTT 数据包结构"></a>MQTT 数据包结构</h2><p>固定头（Fixed header），存在于所有MQTT数据包中，表示数据包类型及数据包的分组类标识；</p><p>可变头（Variable header），存在于部分MQTT数据包中，数据包类型决定了可变头是否存在及其具体内容；</p><p>消息体（Payload），存在于部分MQTT数据包中，表示客户端收到的具体内容；</p><p><img src="/2023/03/15/MQTT/bead03d52096eca7366e94c5dc43ca29.png" alt="img"></p><h3 id="MQTT固定头-x2F-Fixed-header"><a href="#MQTT固定头-x2F-Fixed-header" class="headerlink" title="MQTT固定头 &#x2F; Fixed header"></a>MQTT固定头 &#x2F; Fixed header</h3><p>消息类型（4位的无符号值）：</p><p>类型：</p><p><img src="/2023/03/15/MQTT/image-20230315163402653.png" alt="image-20230315163402653"></p><p>标识位</p><p><img src="/2023/03/15/MQTT/image-20230315163726878.png" alt="image-20230315163726878"></p><p>DUP：发布消息的副本。用来在保证消息的可靠传输，如果设置为 1，则在下面的变长中增加MessageId，并且需要回复确认，以保证消息传输完成，但不能用于检测消息重复发送。</p><p>QoS发布消息的服务质量（前面已经做过介绍），即：保证消息传递的次数</p><p>00：最多一次，即：&lt;&#x3D;1</p><p>01：至少一次，即：&gt;&#x3D;1</p><p>10：一次，即：&#x3D;1</p><p>11：预留</p><p>RETAIN：发布保留标识，表示服务器要保留这次推送的信息，如果有新的订阅者出现，就把这消息推送给它，如果设有那么推送至当前订阅者后释放。</p><p>剩余长度（Remaining Length）</p><p>位置：byte 1。</p><p>固定头的第二字节用来保存变长头部和消息体的总大小的，但不是直接保存的。这一字节是可以扩展，其保存机制，前7位用于保存长度，后一部用做标识。当最后一位为 1时，表示长度不足，需要使用二个字节继续保存。例如：计算出后面的大小为0</p><h3 id="MQTT可变头-x2F-Variable-header"><a href="#MQTT可变头-x2F-Variable-header" class="headerlink" title="MQTT可变头 &#x2F; Variable header"></a><code>MQTT</code>可变头 &#x2F; Variable header</h3><p><code>MQTT</code>数据包中包含一个可变头，它驻位于固定的头和负载之间。可变头的内容因数据包类型而不同，较常的应用是做为包的标识：</p><table><thead><tr><th align="left">Bit</th><th align="left">7  — 0</th></tr></thead><tbody><tr><td align="left">byte 1</td><td align="left">包标签符（MSB）</td></tr><tr><td align="left">byte 2…</td><td align="left">包标签符（LSB）</td></tr></tbody></table><h4 id="连接返回码-Connect-Return-code"><a href="#连接返回码-Connect-Return-code" class="headerlink" title="连接返回码 Connect Return code"></a>连接返回码 Connect Return code</h4><p><strong>位置：</strong>可变报头的第2个字节。</p><p>连接返回码字段使用一个字节的无符号值，在 <a href="https://mcxiaoke.gitbooks.io/mqtt-cn/content/mqtt/0302-CONNACK.html#_%E8%A1%A8%E6%A0%BC_3.1_%E2%80%93%E8%BF%9E%E6%8E%A5%E8%BF%94%E5%9B%9E%E7%A0%81%E7%9A%84%E5%80%BC">表格 3.1 –连接返回码的值</a> 中列出。如果服务端收到一个合法的CONNECT报文，但出于某些原因无法处理它，服务端应该尝试发送一个包含非零返回码（表格中的某一个）的CONNACK报文。如果服务端发送了一个包含非零返回码的CONNACK报文，那么它<strong>必须</strong>关闭网络连接 [MQTT-3.2.2-5].。</p><h5 id="表格-3-1-–连接返回码的值"><a href="#表格-3-1-–连接返回码的值" class="headerlink" title="表格 3.1 –连接返回码的值"></a>表格 3.1 –连接返回码的值</h5><table><thead><tr><th><strong>值</strong></th><th><strong>返回码响应</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>0</td><td>0x00连接已接受</td><td>连接已被服务端接受</td></tr><tr><td>1</td><td>0x01连接已拒绝，不支持的协议版本</td><td>服务端不支持客户端请求的MQTT协议级别</td></tr><tr><td>2</td><td>0x02连接已拒绝，不合格的客户端标识符</td><td>客户端标识符是正确的UTF-8编码，但服务端不允许使用</td></tr><tr><td>3</td><td>0x03连接已拒绝，服务端不可用</td><td>网络连接已建立，但MQTT服务不可用</td></tr><tr><td>4</td><td>0x04连接已拒绝，无效的用户名或密码</td><td>用户名或密码的数据格式无效</td></tr><tr><td>5</td><td>0x05连接已拒绝，未授权</td><td>客户端未被授权连接到此服务器</td></tr><tr><td>6-255</td><td></td><td>保留</td></tr></tbody></table><p>如果认为上表中的所有连接返回码都不太合适，那么服务端<strong>必须</strong>关闭网络连接，不需要发送CONNACK报文 [MQTT-3.2.2-6]。</p><h4 id="连接标志-Connect-Flags"><a href="#连接标志-Connect-Flags" class="headerlink" title="连接标志 Connect Flags"></a>连接标志 Connect Flags</h4><p>连接标志字节包含一些用于指定MQTT连接行为的参数。它还指出有效载荷中的字段是否存在。</p><h4 id="遗嘱标志-Will-Flag"><a href="#遗嘱标志-Will-Flag" class="headerlink" title="遗嘱标志 Will Flag"></a>遗嘱标志 Will Flag</h4><p><strong>位置：</strong>连接标志的第2位。</p><p>遗嘱标志（Will Flag）被设置为1，表示如果连接请求被接受了，遗嘱（Will Message）消息<strong>必须</strong>被存储在服务端并且与这个网络连接关联。之后网络连接关闭时，服务端<strong>必须</strong>发布这个遗嘱消息，除非服务端收到DISCONNECT报文时删除了这个遗嘱消息 [MQTT-3.1.2-8] 。</p><p>遗嘱消息发布的条件，包括但不限于：</p><ul><li>服务端检测到了一个I&#x2F;O错误或者网络故障。</li><li>客户端在保持连接（Keep Alive）的时间内未能通讯。</li><li>客户端没有先发送DISCONNECT报文直接关闭了网络连接。</li><li>由于协议错误服务端关闭了网络连接。</li></ul><p>如果遗嘱标志被设置为1，连接标志中的Will QoS和Will Retain字段会被服务端用到，同时有效载荷中<strong>必须</strong>包含Will Topic和Will Message字段 [MQTT-3.1.2-9]。</p><p>一旦被发布或者服务端收到了客户端发送的DISCONNECT报文，遗嘱消息就<strong>必须</strong>从存储的会话状态中移除 [MQTT-3.1.2-10]。</p><p>如果遗嘱标志被设置为0，连接标志中的Will QoS和Will Retain字段<strong>必须</strong>设置为0，并且有效载荷中<strong>不能</strong>包含Will Topic和Will Message字段 [MQTT-3.1.2-11]。</p><p>如果遗嘱标志被设置为0，网络连接断开时，<strong>不能</strong>发送遗嘱消息 [MQTT-3.1.2-12]。</p><p>服务端应该迅速发布遗嘱消息。在关机或故障的情况下，服务端可以推迟遗嘱消息的发布直到之后的重启。如果发生了这种情况，在服务器故障和遗嘱消息被发布之间可能会有一个延迟。</p><h3 id="MQTT消息体-x2F-Payload"><a href="#MQTT消息体-x2F-Payload" class="headerlink" title="MQTT消息体 &#x2F; Payload"></a>MQTT消息体 &#x2F; Payload</h3><p>Payload消息体是MQTT数据包的第三部分，CONNECT、SUBSCRIBE、SUBACK、UNSUBSCRIBE四种类型的消息 有消息体：</p><ul><li><p>CONNECT，消息体内容主要是：客户端的ClientID、订阅的Topic、Message以及用户名和密码</p></li><li><p>SUBSCRIBE，消息体内容是一系列的要订阅的主题以及QoS。</p></li><li><p>SUBACK，消息体内容是服务器对于SUBSCRIBE所申请的主题及QoS进行确认和回复。</p></li><li><p>UNSUBSCRIBE，消息体内容是要订阅的主题。</p></li></ul><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><blockquote><p>Topic是消息发布（Pub）者和订阅（Sub）者之间的传输中介。设备可通过Topic实现消息的发送和接收，从而实现服务端与设备端的通信。为方便海量设备基于Topic进行通信，简化授权操作，物联网平台定义了产品Topic类和设备Topic。本文介绍产品和设备Topic的定义、使用和分类。</p></blockquote><p>Topic是设备与物联网平台之间通信的管道，设备可通过Topic实现消息的发送和接收。</p><h2 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h2><p><code>MQTT</code>使用的发布&#x2F;订阅消息模式，它提供了一对多的消息分发机制，从而实现与应用程序的解耦。</p><p>这是一种消息传递模式，<strong>消息不是直接从发送器发送到接收器</strong>（即点对点），而是由<code>MQTT server</code>（或称为 MQTT Broker）分发的。</p><p><img src="/2023/03/15/MQTT/v2-8c518394020ae1ae8a14a8caf85d56fb_720w.webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOT </tag>
            
            <tag> MQTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/03/13/Docker/"/>
      <url>/2023/03/13/Docker/</url>
      
        <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><blockquote><p><a href="https://docker.easydoc.net/">https://docker.easydoc.net/</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yupi-用户中心</title>
      <link href="/2023/03/12/yupi-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
      <url>/2023/03/12/yupi-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="用户中心"><a href="#用户中心" class="headerlink" title="用户中心"></a>用户中心</h1><h2 id="企业做项目流程"><a href="#企业做项目流程" class="headerlink" title="企业做项目流程"></a>企业做项目流程</h2><p>需求分析 &#x3D;&gt; 设计（概要设计、详细设计） &#x3D;&gt; 技术选型&#x3D;&gt;初始化、引入需要的技术 &#x3D;&gt; 写Demo &#x3D;&gt; 写代码（实现业务逻辑）&#x3D;&gt; 测试（单元测试）&#x3D;&gt; 代码提交&#x2F;代码评审 &#x3D;&gt; 部署 &#x3D;&gt; 发布</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>登录&#x2F;注册</li><li>用户管理（仅限管理员可见）对用户的查询或者修改</li><li>用户校验</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>前端：三件套 + React + 组件库 Ant Design + Umi + AntDesign Pro(现成的管理系统)</p><p>后端：java + spring + springmvc + mybatis + mybatis-plus + springboot + mysql</p><p>部署：服务器&#x2F;容器（平台）</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ol><li><p>初始化项目</p><ol><li><p>前端初始化</p><ol><li>初始化项目</li><li>引入一些组件</li><li>项目瘦身</li></ol></li><li><p>后端初始化</p><ol><li><p>准备环境</p></li><li><p>引入框架（整合框架）</p></li></ol></li></ol></li><li><p>登录&#x2F;注册</p><pre><code>1. 前端1. 后端</code></pre></li><li><p>用户管理（仅管理员可见）</p><pre><code>1. 前端1. 后端</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发</title>
      <link href="/2023/03/07/Java%E5%B9%B6%E5%8F%91/"/>
      <url>/2023/03/07/Java%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程基本内容"><a href="#线程基本内容" class="headerlink" title="线程基本内容"></a>线程基本内容</h3><h4 id="线程和进程的关系"><a href="#线程和进程的关系" class="headerlink" title="线程和进程的关系"></a>线程和进程的关系</h4><p><strong>进程</strong></p><ul><li>一个应用程序（1个进程是一个软件，JVM就是一个进程）。</li><li>进程之间的内存独立不共享。</li></ul><p><strong>线程</strong></p><ul><li>一个进程中的执行场景&#x2F;执行单元。</li><li>线程之间<code>堆内存</code>和<code>方法区</code>内存共享，但是<code>栈内存</code>独立，一个线程一个栈。</li></ul><h4 id="线程构造方法"><a href="#线程构造方法" class="headerlink" title="线程构造方法"></a>线程构造方法</h4><ul><li>Thread()</li><li>Thread(String name)  – name 为线程名字</li><li>Thread(Runnable target)</li><li>Thread(Runnable target, String name)</li></ul><h4 id="实现线程的方式"><a href="#实现线程的方式" class="headerlink" title="实现线程的方式"></a>实现线程的方式</h4><ol><li><p>继承<code>java.lang.Thread</code>,重写<code>run</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义线程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="type">MyThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"><span class="comment">// 启动线程。</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure></li><li><p>实现<code>java.lang.Runnable</code>接口,实现<code>run</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个可运行的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure></li></ol><h4 id="线程基本操作"><a href="#线程基本操作" class="headerlink" title="线程基本操作"></a>线程基本操作</h4><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">static Thread currentThread()</td><td align="center">获取当前线程对象</td></tr><tr><td align="center">String getName()</td><td align="center">获取线程对象名字</td></tr><tr><td align="center">void setName(String name)</td><td align="center">修改线程对象名字</td></tr></tbody></table><blockquote><p>当线程没有设置名字的时候，默认的名字为 Thread-0,Thread-1 ···</p></blockquote><h4 id="线程Sleep方法"><a href="#线程Sleep方法" class="headerlink" title="线程Sleep方法"></a>线程Sleep方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">static void sleep(long millis)</td><td align="center">让当前线程休眠millis秒(参数是毫秒)</td></tr></tbody></table><blockquote><p><strong>作用：</strong> 让当前线程进入休眠，进入“**<code>阻塞状态</code><strong>”，</strong>放弃占有CPU时间片**，让给其它线程使用。<br>这行代码出现在A线程中，A线程就会进入休眠。<br>这行代码出现在B线程中，B线程就会进入休眠。</p></blockquote><h4 id="线程中断sleep-的方法"><a href="#线程中断sleep-的方法" class="headerlink" title="线程中断sleep()的方法"></a>线程中断sleep()的方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">void interrupt</td><td align="center">终止线程的睡眠</td></tr></tbody></table><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><p><strong>为什么run()方法只能try{}catch{}不能用throws?</strong></p><blockquote><p>因为run()方法在<strong>父类中没有抛出任何异常</strong>，<strong>子类不能比父类抛出更多的异常</strong>。</p></blockquote><h3 id="线程的六种状态"><a href="#线程的六种状态" class="headerlink" title="线程的六种状态"></a>线程的六种状态</h3><p><img src="/2023/03/07/Java%E5%B9%B6%E5%8F%91/image-20230307213226257.png" alt="image-20230307213226257"></p><h3 id="线程死锁问题"><a href="#线程死锁问题" class="headerlink" title="线程死锁问题"></a>线程死锁问题</h3><p>Java线程死锁是指在多线程程序中，两个或更多线程被互相等待对方释放资源而陷入无限等待的状态。当发生死锁时，程序会停止响应，不能正常运行。</p><p>下面是几个<strong>可能导致死锁</strong>的情况：</p><ol><li>互斥锁：两个线程试图同时访问同一个资源，但是这些资源只能由一个线程使用。当一个线程持有资源，另一个线程无法使用该资源，就可能导致死锁。</li><li>循环等待：线程A等待线程B释放资源，线程B又等待线程C释放资源，线程C又等待线程A释放资源，这样就形成了一个循环等待的情况。</li><li>资源不足：如果系统资源不足，比如内存、CPU等，就可能导致死锁。如果所有线程都在等待某个资源，但是该资源无法满足所有线程的需要，那么这些线程就可能陷入无限等待。</li><li>等待和保持：一个线程持有了某个资源，但是又想获取其他资源，所以它会一直等待其他资源的释放，这可能导致其他线程等待该线程持有的资源。</li></ol><p>为了<strong>避免死锁</strong>，可以采取以下几个措施：</p><ol><li>避免循环等待：对资源的申请，应该按照固定的顺序进行，以避免循环等待。</li><li>避免资源不足：应该及时释放资源，避免出现资源不足的情况。</li><li>设置超时时间：如果等待某个资源的时间超过了一定的时间，就应该释放资源并重新申请，以避免死锁。</li><li>避免等待和保持：尽可能减少线程持有资源的时间，避免出现等待和保持的情况。</li><li>使用死锁检测工具：可以使用一些死锁检测工具，来检测程序中是否存在死锁问题。</li></ol><h3 id="java锁知识概述"><a href="#java锁知识概述" class="headerlink" title="java锁知识概述"></a>java锁知识概述</h3><p>在 Java 中，锁是一种并发编程的机制，它可以帮助我们控制多个线程之间的访问共享资源的方式。下面是 Java 中有关锁的一些基本知识：</p><ol><li>Synchronized关键字：可以用synchronized关键字将一个方法或代码块标记为同步块，使得同一时间只有一个线程可以访问该方法或代码块。</li><li>ReentrantLock类：ReentrantLock是一个可重入的互斥锁，它提供了与 synchronized 关键字类似的功能，但更加灵活。它可以手动获取和释放锁，并且支持公平和非公平两种锁获取方式。</li><li>ReadWriteLock接口：ReadWriteLock接口提供了一种比标准的互斥锁更加高效的读写锁，使得多个线程可以同时读取共享资源，但是只有一个线程可以写入共享资源。</li><li>volatile关键字：volatile关键字可以保证可见性，即在一个线程中对变量的修改能够被其他线程立即看到。</li><li>Atomic类：Atomic类提供了一组原子操作，这些操作可以保证在多线程环境下的原子性和可见性，从而避免竞态条件的问题。</li><li>synchronized块：synchronized块与synchronized方法类似，但是它只同步其中的代码块而不是整个方法。</li></ol><p>这些是 Java 中有关锁的一些基本知识，了解它们可以帮助你更好地编写多线程程序，并避免常见的并发编程问题。</p><h3 id="线程变量"><a href="#线程变量" class="headerlink" title="线程变量"></a>线程变量</h3><ul><li>AtomicLong</li></ul><p>在Java中，AtomicLong是一个原子类型的长整型变量。它提供了一种线程安全的方式来对长整型值进行原子操作，可以保证多线程环境下的数据安全性。</p><ul><li>ReentrantReadWriteLock</li></ul><p>在Java中，ReentrantReadWriteLock是一种读写锁，它可以控制多个线程同时读取共享资源，但只允许一个线程写入共享资源。这种锁的实现方式称为”重入读写锁”，它允许同一个线程重复获得读锁或写锁，从而避免了死锁和饥饿等问题。 </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断言Assert</title>
      <link href="/2023/03/04/%E6%96%AD%E8%A8%80Assert/"/>
      <url>/2023/03/04/%E6%96%AD%E8%A8%80Assert/</url>
      
        <content type="html"><![CDATA[<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java 是从 JDK1.4 开始支持断言的，主要用于程序代码的调试或测试阶段，千万不能用在正式环境上。JVM是默认关闭断言的，想要开启断言还得向 JVM 输入一个参数<code>-enableassertions</code>(简写-ea)才可以启用断言.</p><p>基本的使用就是assert condition，当 condition 为 true，就继续往下运行；当 condition 为 false，就抛出一个错误，程序停止。</p><p><img src="/2023/03/04/%E6%96%AD%E8%A8%80Assert/941c8d7f4fd7ed062463a5bc0d4d4f3f.png" alt="image.png"></p><p><img src="/2023/03/04/%E6%96%AD%E8%A8%80Assert/image-20230304203756187.png" alt="image-20230304203756187"></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>我们需要在assert关键字后放置一个<code>布尔值</code>（也可以是一个表达式，这个表达式也会变成一个布尔值），当这个布尔值为 true 时，会通过整个断言；当这个布尔值为 false 时，这个断言就会抛出一个错误，这会让整个程序停止。</p><p>注意断言抛出的是错误，我们是无法使用 try{}catch(){}捕捉的。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/2023/03/04/JWT/"/>
      <url>/2023/03/04/JWT/</url>
      
        <content type="html"><![CDATA[<h2 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h2><p>1.什么是JWT<br><strong>在介绍JWT之前，我们先来回顾一下利用token进行用户身份验证的流程：</strong></p><ol><li><p>客户端使用用户名和密码请求登录</p></li><li><p>服务端收到请求，验证用户名和密码</p></li><li><p>验证成功后，服务端会签发一个token，再把这个token返回给客户端</p></li><li><p>客户端收到token后可以把它存储起来，比如放到cookie中</p></li><li><p>客户端每次向服务端请求资源时需要携带服务端签发的token，可以在cookie或者header中携带</p></li><li><p>服务端收到请求，然后去验证客户端请求里面带着的token，如果验证成功，就向客户端返回请求数据</p></li></ol><p><strong>这种基于token的认证方式相比传统的session认证方式更节约服务器资源，并且对移动端和分布式更加友好。其优点如下：</strong></p><ul><li><p><code>支持跨域访问</code>：cookie是无法跨域的，而token由于没有用到cookie(前提是将token放到请求头中)，所以跨域后不会存在信息丢失问题</p></li><li><p><code>无状态</code>：token机制在服务端不需要存储session信息，因为token自身包含了所有登录用户的信息，所以可以减轻服务端压力</p></li><li><p><code>更适用CDN</code>：可以通过内容分发网络请求服务端的所有资料</p></li><li><p><code>更适用于移动端</code>：当客户端是非浏览器平台时，cookie是不被支持的，此时采用token认证方式会简单很多</p></li><li><p><code>无需考虑CSRF</code>：由于不再依赖cookie，所以采用token认证方式不会发生CSRF，所以也就无需考虑CSRF的防御</p></li></ul><p>而JWT就是上述流程当中token的一种具体实现方式，其全称是<code>JSON Web Token</code>，官网地址：<a href="https://jwt.io/">https://jwt.io/</a></p><p><strong>通俗地说，JWT的本质就是一个<code>字符串</code>，它是将用户信息保存到一个Json字符串中，然后进行编码后得到一个JWT token，并且这个JWT token带有签名信息，接收后可以校验是否被篡改，所以可以用于在各方之间安全地将信息作为Json对象传输。JWT的认证流程如下：</strong></p><ol><li><p>首先，前端通过Web表单将自己的用户名和密码发送到后端的接口，这个过程一般是一个POST请求。建议的方式是通过SSL加密的传输(HTTPS)，从而避免敏感信息被嗅探</p></li><li><p>后端核对用户名和密码成功后，将包含用户信息的数据作为JWT的Payload，将其与JWT Header分别进行Base64编码拼接后签名，形成一个JWT Token，形成的JWT Token就是一个如同lll.zzz.xxx的字符串</p></li><li><p>后端将JWT Token字符串作为登录成功的结果返回给前端。前端可以将返回的结果保存在浏览器中，退出登录时删除保存的JWT Token即可</p></li><li><p>前端在每次请求时将JWT Token放入HTTP请求头中的Authorization属性中(解决XSS和XSRF问题)</p></li><li><p>后端检查前端传过来的JWT Token，验证其有效性，比如检查签名是否正确、是否过期、token的接收方是否是自己等等</p></li><li><p>验证通过后，后端解析出JWT Token中包含的用户信息，进行其他逻辑操作(一般是根据用户信息得到权限等)，返回结果</p></li></ol><p><img src="/2023/03/04/JWT/900b3e81f832b2f08c2e8aabb540536a.png" alt="img"></p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JWT工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jwt工具类</span></span><br><span class="line"><span class="comment"> * 注意点:</span></span><br><span class="line"><span class="comment"> * 1、生成的token, 是可以通过base64进行解密出明文信息</span></span><br><span class="line"><span class="comment"> * 2、base64进行解密出明文信息，修改再进行编码，则会解密失败</span></span><br><span class="line"><span class="comment"> * 3、无法作废已颁布的token，除非改秘钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间，一周</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE</span> <span class="operator">=</span> <span class="number">60000</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;xdclass.net168&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 令牌前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;xdclass&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * subject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECT</span> <span class="operator">=</span> <span class="string">&quot;xdclass&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户信息，生成令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">geneJsonWebToken</span><span class="params">(User user)</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 封装cookie</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder().setSubject(SUBJECT)</span><br><span class="line">                .claim(<span class="string">&quot;head_img&quot;</span>,user.getHeadImg())</span><br><span class="line">                .claim(<span class="string">&quot;id&quot;</span>,user.getId())</span><br><span class="line">                .claim(<span class="string">&quot;name&quot;</span>,user.getName())</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,SECRET).compact();</span><br><span class="line"></span><br><span class="line">        token = TOKEN_PREFIX + token;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">checkJWT</span><span class="params">(String token)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span>  <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser().setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(token.replace(TOKEN_PREFIX,<span class="string">&quot;&quot;</span>)).getBody();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p><strong>JWT头</strong>是一个描述JWT元数据的JSON对象，alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT。最后，使用Base64 URL算法将上述JSON对象转换为字符串保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p><strong>有效载荷</strong>部分，是JWT的主体内容部分，也是一个<strong>JSON对象</strong>，包含需要传递的数据。 JWT指定七个默认字段供选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss：发行人</span><br><span class="line">exp：到期时间</span><br><span class="line">sub：主题</span><br><span class="line">aud：用户</span><br><span class="line">nbf：在此之前不可用</span><br><span class="line">iat：发布时间</span><br><span class="line">jti：JWT ID用于标识该JWT</span><br></pre></td></tr></table></figure><p>这些预定义的字段并不要求强制使用。除以上默认字段外，我们还可以自定义私有字段，<strong>一般会把包含用户信息的数据放到payload中</strong>，如下例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;Helen&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请注意，<strong>默认情况下JWT是未加密的，因为只是采用base64算法，拿到JWT字符串后可以转换回原本的JSON数据，任何人都可以解读其内容，因此不要构建隐私信息字段，比如用户的密码一定不能保存到JWT中</strong>，以防止信息泄露。<strong>JWT只是适合在网络中传输一些非敏感的信息</strong></p></blockquote><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p><code>签名哈希</code>部分是对上面两部分数据签名，需要使用base64编码后的header和payload数据，通过指定的算法生成哈希，以<code>确保数据不会被篡改</code>。首先，需要指定一个密钥（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用header中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名</p><blockquote><p>HMACSHA256(base64UrlEncode(header) + “.” + base64UrlEncode(payload), secret)</p></blockquote><blockquote><p>注意JWT每部分的作用，在服务端接收到客户端发送过来的JWT token之后：</p><ul><li><p>header和payload可以直接利用base64解码出原文，从header中获取哈希签名的算法，从payload中获取有效数据</p></li><li><p>signature由于使用了不可逆的加密算法，无法解码出原文，它的作用是校验token有没有被篡改。服务端获取header中的加密算法之后，利用该算法加上secretKey对header、payload进行加密，比对加密后的数据和客户端发送过来的是否一致。注意secretKey只能保存在服务端，而且对于不同的加密算法其含义有所不同，一般对于MD5类型的摘要加密算法，secretKey实际上代表的是盐值</p></li></ul></blockquote><h2 id="JWT的种类"><a href="#JWT的种类" class="headerlink" title="JWT的种类"></a>JWT的种类</h2><p>其实JWT(JSON Web Token)指的是一种规范，这种规范允许我们使用JWT在两个组织之间传递安全可靠的信息，JWT的具体实现可以分为以下几种：</p><ul><li><p>nonsecure JWT：未经过签名，不安全的JWT</p></li><li><p>JWS：经过签名的JWT</p></li><li><p>JWE：payload部分经过加密的JWT</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><p>微服务是由 </p><ol><li><p>微服务是由 </p><ol><li><p>服务注册与发现中心（Eureka、Consul、nacos，zookeeper）</p><blockquote><p>使用@EnableEurekaServer注释来启用Eureka服务器</p><p>使用@EnableDiscoveryClient或@EnableEurekaClient注释来启用Eureka客户端</p><p>@FeignClient注释，这是一个REST客户端库，用于向Eureka服务器注册服务。</p><p><strong>各服务之间有相应的接口需要注册到注册中心当中，微服务从注册中心拿到对应的接口地址才能发起具体的微服务调用。</strong></p><p>nacos:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官网：nacos.io</span><br></pre></td></tr></table></figure></blockquote></li><li><p>API网关(Zuul，Spring Cloud Gataway)</p><blockquote><p>API 网关是一种基于微服务架构的应用程序设计模式，它充当了所有客户端和服务端之间的入口点，负责路由请求到相应的服务实例、进行认证、限流、缓存等操作。</p><p>这两类网关还带有过滤器和负载均衡的组件。</p><p><strong>app 发送唯一的入口地址给微服务网关，然后到注册中心去寻址，找到具体的调用地址后，再去调用下面的微服务</strong></p></blockquote></li><li><p>配置中心(Spring Cloud Config)</p><blockquote><p>在启动类上添加注解@EnableConfigServer</p></blockquote></li><li><p>消息总线(Spring Cloud Bus)</p><blockquote><p>RabbitMQ,</p></blockquote><blockquote><p>消息总线是一种分布式系统中的消息传递机制，可以实现应用程序之间的事件通知和消息广播。</p><p>配置更新通知、服务状态监控、分布式锁的实现</p><p>定义&#96;MessageListener类，并使用@StreamListener注解指定要监听的消息通道。当有消息到达该通道时，Spring会自动调用handleMessage方法来处理消息。</p></blockquote></li><li><p>分布式追踪(Spring Cloud Sleuth,Zipkin)</p><blockquote><p>Spring Cloud的分布式跟踪组件基于Zipkin实现，可以通过配置@EnableZipkinServer注解开启。</p><p>跟踪请求链路，并展示请求的调用时间、调用关系、耗时等信息。</p><p>@EnableZipkinTracingmq</p></blockquote></li><li><p>负载均衡组件(Ribbon,LoadBalancer，Zuul，Gataway)</p><blockquote><p>轮询策略是指将请求轮流分配给不同的服务实例，确保每个实例都能够平均地分担请求负载。</p><p>随机策略是指将请求随机地分配给不同的服务实例，没有任何规律和顺序，可以实现对每个实例请求负载的均衡。</p><p><strong>Ribbon饥饿加载</strong></p><p>为提高性能和响应速度，预先加载所有可用的服务实例</p><p>通常情况下，Ribbon会使用懒加载，在第一次使用服务时才会加载服务实例。但是，如果服务实例数量很多，或者服务启动时间较长，这种懒加载策略可能会导致延迟和性能问题。</p><p>为了解决这个问题，Ribbon提供了饥饿加载策略，可以在客户端启动时立即加载所有可用的服务实例，从而避免了第一次使用服务时的延迟和性能问题。不过，这种策略会占用更多的内存空间，因此需要根据具体情况进行权衡和调整。</p></blockquote></li><li><p>断路器组件（Hystrix）</p><blockquote><p> Hystrix通过实现断路器模式来实现服务的容错和延迟处理。断路器是一种开关装置，当服务调用失败率达到一定阈值时，会自动打开断路器，将请求直接返回，避免等待超时和占用资源。同时，断路器还提供了服务降级、熔断和限流等功能，可以根据不同的业务需求进行配置。</p><p>熔断降级：fallback</p><p>熔断：快速失败</p></blockquote></li><li><p>微服务实例</p><blockquote><p>微服务实例是微服务架构的基本单元，每个微服务都拥有自己的独立进程和数据存储，通过轻量级的通信机制实现与其他微服务之间的协作，从而构建一个分布式的应用系统。</p></blockquote></li><li><p>OpenFeign</p><blockquote><p>openFeign是要声明式的web服务客户端，或叫做声明式REST客户端</p><p>支持springmvc的注解，默认集成了Ribbon</p></blockquote></li><li><p>springAMQP</p><blockquote><p>是一个基于Spring框架的AMQP（高级消息队列协议）用于应用程序之间通信的协议，支持消息的异步传输和处理，以及消息的路由和排队等功能。</p><p>可以用来连接RabbitMq消息代理,可以看做RabbitMQ协议之上的客户端库，简化了使用RabbitMQ的过程，同时还提供了对其他AMQP代理的支持 </p><p>消息监听器，消息转换器，RabbitTamplate</p><ol><li>添加依赖项</li><li>配置连接工厂</li><li>创建RabbitTamplate</li><li>创建队列</li><li>将消息发送到队列中</li><li>从队列中接收消息</li><li>关闭连接</li></ol></blockquote></li></ol><p>RabbitMQ</p><p>Exchange、Queue、Binding 和 Routing Key</p><p>BootStrap.yml</p><blockquote><p>Bootstrap.yml的作用是在应用程序启动之前，提供一些必要的信息和配置，以确保应用程序能够正确地启动和运行。在Spring Boot中，Bootstrap.yml的配置优先级比application.yml更高，因此可以用于覆盖application.yml中的一些配置。</p></blockquote></li></ol><p><img src="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230227083723855.png" alt="image-20230227083723855"></p><p><img src="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230227081924186.png" alt="image-20230227081924186"></p><p><img src="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230227084236588.png" alt="image-20230227084236588"></p><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><h3 id="版本兼容"><a href="#版本兼容" class="headerlink" title="版本兼容"></a>版本兼容</h3><p><img src="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230227084628056.png" alt="image-20230227084628056"></p><p><img src="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230227092509640.png" alt="image-20230227092509640"></p><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><blockquote><p>注册发现中心，是一个服务注册与发现的组件，默认端口8761 </p></blockquote><h4 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h4><blockquote><p>对于Eureka, 会涉及到两个端, 一个客户端, 一个服务端. 客户端就相当于我们的微服务: 订单服务, 商品服务等. 而服务端就是指Eureka注册中心的这个服务, 而保持续约就是客户端在相隔一段时间内向服务端发送一次心跳, 告诉Eureka一个自己的状态是存活的</p></blockquote><p>客户端进行初始化时, 会调度一些定时任务, Eureka初始化了发送了心跳请求的线程池heartbeatExecutor, 用来创建发送心跳的线程HeartbeatThread</p><p><img src="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230315134505948.png" alt="image-20230315134505948"></p><p>线程池有核心参数 :</p><ul><li><p>maximumPoolSize：最大线程数, 线程池允许创建的最大线程数</p></li><li><p>corePoolSize：核心线程数。当提交一个任务到线程池时，线程池会创建一个线程来执行任务, 即使其他空闲的核心线程能够执行新任务也会创建线程, 等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的 prestartAllCoreThreads() 方法, 则线程池会提前创建并启动所有基本线程</p></li><li><p>keepAliveTime：线程活动保持时间, 线程池的工作线程空闲后, 保持存活的时间</p></li><li><p>runnableTaskQueue：任务队列, 用于保存等待执行的任务的阻塞队列。有四种：ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue、PriorityBlockingQueue</p></li></ul><p><strong>利用此线程池来执行定时调度任务, 在定时任务开始后, 延迟30s开始执行发送心跳请求, 然后每隔30s发送一次心跳请求</strong></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>eureka 一共有4部分 配置</p><ol><li><code>server </code>: eureka 的服务端配置</li><li><code>client </code>: eureka 的客户端配置</li><li><code>instance</code> : eureka 的实例配置</li><li><code>dashboard </code>: eureka 的 web 控制台配置</li></ol><h4 id="instance"><a href="#instance" class="headerlink" title="instance"></a>instance</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="comment"># 是否将自己的ip注册到eureka中，默认false 注册 主机名</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="comment"># 设置当前实例ip</span></span><br><span class="line">    <span class="attr">instance-id:</span>  <span class="comment"># 修改instance-id显示</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span> <span class="comment"># 每一次eureka client 向 eureka server发送心跳的时间间隔</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span> <span class="comment"># 如果90秒内eureka server没有收到eureka client的心跳包，则剔除该服务</span></span><br></pre></td></tr></table></figure><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment">#是否开启自我保护机制，默认true</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span></span><br><span class="line">    <span class="comment">#清理间隔（单位毫秒，默认是60*1000）</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span></span><br></pre></td></tr></table></figure><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">         <span class="comment"># eureka服务端地址，将来客户端使用该地址和eureka进行通信</span></span><br><span class="line">         <span class="attr">defaultZone:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="comment"># 是否将自己的路径 注册到eureka上。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="comment"># 是否需要从eureka中抓取数据。</span></span><br></pre></td></tr></table></figure><h4 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用eureka web控制台</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/</span> <span class="comment"># 设置eureka web控制台默认访问路径 </span></span><br></pre></td></tr></table></figure><h4 id="搭建注册中心"><a href="#搭建注册中心" class="headerlink" title="搭建注册中心"></a>搭建注册中心</h4><p><img src="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230228215252687.png" alt="image-20230228215252687"></p><h4 id="Spring-Cloud-Eureka-和-Zookeeper-的区别"><a href="#Spring-Cloud-Eureka-和-Zookeeper-的区别" class="headerlink" title="Spring Cloud Eureka 和 Zookeeper 的区别"></a>Spring Cloud Eureka 和 Zookeeper 的区别</h4><h5 id="什么是CAP原则（面试）"><a href="#什么是CAP原则（面试）" class="headerlink" title="什么是CAP原则（面试）"></a>什么是CAP原则（面试）</h5><blockquote><p> cap原则又称cap定理，指的是在一个分布式系统中，一致性、可用性、分区容错性（必选，不可避免），这三个要素只能同时实现两点，不可能三者兼顾。</p><ul><li>一致性(C)：多个机器中的数据是一致的</li><li>可用性(A)：当有一个节点挂掉了，整个集群可以继续对外提供服务</li><li>分区容错性(P)：由于机房或者分区等原因导致各个机器中的数据短暂的不一致.</li></ul><p>AP：数据可能是不一致的<br>CP：数据时一致的但是如果有个节点挂了，整个服务在几分钟之内不能提供服务</p><p>Zookeeper遵循CP原则，eureka注重AP高可用</p></blockquote><p>为什么zookeeper不适合做注册中心</p><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><p>在Spring Cloud中，Feign是一个HTTP客户端库，它使得编写Web服务客户端变得更加简单。Feign是基于Netflix的Feign库构建的，它提供了一种声明式的方法来编写HTTP客户端。</p><p>使用Feign，您可以通过编写一个接口来描述您想要访问的远程服务的API，并使用Feign来自动化地生成一个实现该接口的HTTP客户端。这样可以极大地减少编写Web服务客户端的代码量，同时提高代码的可读性和可维护性。</p><p>Feign还提供了负载均衡和服务发现的支持，这使得在分布式环境中使用Feign更加容易。当您的应用程序需要调用另一个应用程序的API时，Feign可以自动使用服务发现来查找可用的服务，并将请求路由到可用的服务实例。</p><p>因此，Feign在Spring Cloud中扮演了一个非常重要的角色，它使得编写Web服务客户端变得更加简单、高效和可维护。</p><p><strong>OpenFeign</strong></p><blockquote><p>openFeign是要声明式的web服务客户端，或叫做声明式REST客户端</p></blockquote><p>K8S</p><blockquote><p>K8s是指Kubernetes，是一种开源的容器编排平台，用于管理和部署容器化应用程序。它最初由Google设计，并于2014年发布为开源项目。Kubernetes通过提供容器编排、自动化部署、自动扩展和自动修复等功能，简化了应用程序的部署和管理</p></blockquote><h3 id="Hystrix-熔断器"><a href="#Hystrix-熔断器" class="headerlink" title="Hystrix(熔断器)"></a>Hystrix(熔断器)</h3><h4 id="雪崩"><a href="#雪崩" class="headerlink" title="雪崩"></a>雪崩</h4><blockquote><p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 <code>RPC或http</code> 相互调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，<code>Servlet</code> 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 <strong>“雪崩”</strong> 效应。</p></blockquote><h4 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h4><p>较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值（Hystrix 是 <strong>5 秒 20 次</strong>） 熔断器将会被打开。</p><p>分布式容错框架</p><ul><li>阻止故障的连锁反应</li><li>快速失败</li><li>提供实时的监控和告警</li></ul><p>资源隔离</p><p><img src="/2023/02/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1/v2-d16c31ff261bfd604c87112b469484aa_720w.png" alt="img"></p><ul><li>Hystrix的设计原理</li></ul><p>(1) 防止任何单个依赖项耗尽所有容器用户线程</p><p>(2) 减少负载，快速失败，而不是排队</p><p>(3) 在失败的情况下提供回退保护用户可用性</p><p>(4) 使用隔离技术来限制依赖之间的影响</p><p>(5) 通过近乎实时的度量、监视和警报来优化发现时间</p><p>(6) 在大多数方面hystrix支持低延迟传播配置和动态属性修改来优化恢复时间，这允许您使用低延迟反馈循环进行实时操作修改</p><p>(7) 防止整个依赖客户端执行中的失败，而不仅仅是网络流量中的失败</p><h3 id="监视器"><a href="#监视器" class="headerlink" title="监视器"></a>监视器</h3><p>在Java中，每个对象都与一个监视器（monitor）相关联，这个监视器实际上是一个内部的锁，用于控制多线程访问该对象时的并发问题。Java中的monitor主要有以下作用：</p><ol><li>保证线程安全：在多线程环境下，同一时间只有一个线程能够获得对象的监视器，进而访问该对象，其他线程需要等待，这样就可以保证对象的状态不会被多个线程同时修改，从而确保了线程安全。</li><li>实现同步：Java中的monitor可以实现线程之间的同步，即一些线程需要等待另一些线程的某些操作完成后才能执行。可以使用wait()和notify()等方法来实现线程之间的同步。</li><li>确保可见性：Java中的monitor可以保证线程之间的可见性，即一个线程对共享变量的修改可以被其他线程及时地看到。</li><li>提高性能：由于在同一时间只有一个线程能够获得对象的监视器，从而保证了对象状态的一致性，避免了竞态条件和死锁等问题，可以提高程序的性能。</li></ol><p>总之，Java中的monitor是一种非常重要的同步机制，可以保证多线程访问共享资源的正确性和效率。</p><h3 id="负载均衡器"><a href="#负载均衡器" class="headerlink" title="负载均衡器"></a>负载均衡器</h3><p>rabbon负载均衡器</p><p>使用Ribbon负载均衡器，可以将请求分发给多个服务实例，以实现高可用和负载均衡。Ribbon通过调用服务发现组件（如Eureka或Consul）获取可用的服务列表，并使用一定的负载均衡策略来选择一个服务实例进行请求转发。</p><p>在Spring Cloud中，我们可以使用@EnableDiscoveryClient注解来启用服务发现功能，通过使用@LoadBalanced注解标注RestTemplate对象，以在调用服务时使用负载均衡功能。</p><p>下面是一个使用Ribbon进行负载均衡的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://my-service/hello&quot;</span>, String.class);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result: &quot;</span> + result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>轮询算法</li></ol><p>轮询算法是一种简单的负载均衡算法，它将请求依次分发给每一个服务实例，每个服务实例都会接收到相同数量的请求。当有新的请求到来时，轮询算法会将请求分配给下一个服务实例。如果某个服务实例故障，那么它将被从负载均衡器中剔除，直到恢复正常。</p><ol start="2"><li>随机算法</li></ol><p>随机算法是一种比较简单的负载均衡算法，它将请求随机分发给所有可用的服务实例，没有任何顺序。因为随机算法的选择是随机的，所以每个服务实例接收到的请求数量也是随机的。如果有新的服务实例加入或者某个服务实例故障，随机算法会重新计算可用的服务实例并重新分配请求。</p><p>在Spring Cloud中，可以使用Spring Cloud LoadBalancer或Ribbon负载均衡器来实现轮询和随机算法。Spring Cloud LoadBalancer支持多种负载均衡算法，包括轮询、随机、最小连接数等。Ribbon默认使用轮询算法，可以通过配置来切换到随机算法。</p><h3 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h3><p>Zuul 是 Spring Cloud 生态系统中的一个 API 网关，它提供了一系列的功能，例如路由、过滤、负载均衡、安全等。在微服务架构中，API 网关是服务端点的唯一入口，所有的外部请求都需要经过 API 网关进行处理，因此 Zuul 在微服务架构中扮演着非常重要的角色。</p><p>以下是 Zuul 的一些主要特性：</p><ol><li>路由：可以将请求转发到不同的微服务实例中，实现微服务的访问控制和负载均衡。</li><li>过滤：可以通过预定义的过滤器对请求进行预处理，例如身份验证、日志记录、请求重试等。</li><li>监控和统计：可以通过集成 Micrometer，对 Zuul 进行监控和统计，包括请求数、响应时间、错误率等指标。</li><li>动态路由：可以根据特定条件动态地更新路由信息，例如根据请求头或请求参数等信息。</li><li>安全性：可以通过 OAuth2 和 JWT 等机制实现对请求的身份认证和授权。</li></ol><p>总的来说，Zuul 是 Spring Cloud 生态系统中一个非常强大的工具，可以帮助开发者轻松地实现微服务架构中的 API 网关，提高了应用的可扩展性、可靠性和安全性。</p><ol><li>添加依赖</li></ol><p>在pom.xml文件中添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>配置Zuul</li></ol><p>在应用程序的配置文件中，添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">users-service:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/users/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">users-service</span></span><br></pre></td></tr></table></figure><p>这将创建一个名为”zuul-server”的应用程序，并将所有以”&#x2F;users”开头的请求路由到名为”users-service”的微服务。</p><ol><li>启用Zuul</li></ol><p>在应用程序的启动类中添加@EnableZuulProxy注解来启用Zuul：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZuulServerApplication</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(ZuulServerApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将启用Zuul代理，并使应用程序成为API网关。</p><ol><li>运行应用程序</li></ol><p>现在可以运行应用程序并访问Zuul网关来访问微服务。例如，如果要访问名为”users-service”的微服务的”&#x2F;users&#x2F;1”端点，可以使用以下URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/users-service/users/1</span><br></pre></td></tr></table></figure><p>Zuul将会将请求路由到”users-service”微服务的”&#x2F;users&#x2F;1”端点，并将响应返回给客户端。</p><h3 id="分布式跟踪"><a href="#分布式跟踪" class="headerlink" title="分布式跟踪"></a>分布式跟踪</h3><p>在分布式系统中，由于各个服务之间的相互调用，如果某个服务出现了问题，可能会对其他服务产生影响，因此分布式跟踪是非常重要的。在Spring Cloud中，分布式跟踪主要有以下两个组件：</p><ol><li>Spring Cloud Sleuth：Sleuth是一个分布式跟踪解决方案，可以将每个请求的关键信息进行收集和记录，包括请求ID、Span ID、Trace ID等。当某个请求在多个服务之间传递时，Sleuth会自动将这些信息进行传递，方便开发人员进行跟踪和调试。</li><li>Zipkin：Zipkin是一个分布式跟踪系统，可以将多个服务的请求进行聚合和展示。当某个请求跨越多个服务时，Zipkin可以将每个服务的请求信息进行聚合，并将聚合后的信息展示在一个页面上，方便开发人员进行跟踪和调试。Zipkin还可以对请求进行统计和分析，从而提高系统的可用性和性能。</li></ol><p>通过Spring Cloud Sleuth和Zipkin的结合使用，可以方便地进行分布式系统的跟踪和调试，从而提高系统的可用性和稳定性。</p><h3 id="策略工厂"><a href="#策略工厂" class="headerlink" title="策略工厂"></a>策略工厂</h3><p>Spring Cloud中的策略工厂（Strategy Factory）是一种设计模式，它提供了一种灵活的方式来创建不同的策略实例，而无需显式地在代码中实例化它们。它可以帮助我们实现可扩展和可配置的代码，让我们能够根据不同的业务需求选择不同的策略。</p><p>在Spring Cloud中，策略工厂通常用于在运行时动态创建负载均衡策略实例，以便在服务调用时选择不同的负载均衡算法。Spring Cloud通过<code>LoadBalancerClientFactory</code>接口来定义策略工厂的规范，并提供了一些默认实现，例如<code>DefaultLoadBalancerClientFactory</code>和<code>ZonePreferenceServerListFilter</code>等。</p><p>要使用策略工厂，我们需要实现<code>LoadBalancerClientFactory</code>接口并提供适当的配置来注册我们的策略。例如，我们可以使用<code>@Configuration</code>注解创建一个配置类来注册我们的自定义策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLoadBalancerConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> LoadBalancerClientFactory <span class="title function_">loadBalancerClientFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyLoadBalancerClientFactory</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MyLoadBalancerClientFactory</code>是我们自己实现的策略工厂类，它会被Spring容器自动识别并用于创建负载均衡实例。然后，我们可以在需要使用负载均衡功能的代码中注入<code>LoadBalancerClient</code>实例，Spring会自动根据配置创建适当的实现类。</p><h3 id="Job实例"><a href="#Job实例" class="headerlink" title="Job实例"></a>Job实例</h3><p>​在Spring Cloud中，Job是Spring Batch中的一个重要概念，它代表了一个批处理任务。一个Job通常包含多个Step，每个Step执行一个特定的任务。</p><p>​Job实例是Job定义的具体实现，它包含了Job的名称、Job参数、Job状态等信息。通过JobLauncher启动Job实例，可以触发Job的执行。</p><p>​在Job执行期间，Spring Batch会依次执行Job中定义的每个Step，每个Step执行完毕后，将根据Step的执行结果决定是否继续执行后续Step或结束整个Job的执行。Job执行完毕后，Spring Batch会根据Job的执行状态记录Job的执行历史，并将执行结果存储在JobRepository中。</p><p>​Job实例在Spring Cloud中的作用非常重要，它是整个批处理任务的核心实现。通过Job实例，我们可以方便地定义和管理批处理任务，包括任务的执行参数、执行顺序等。同时，Spring Batch还提供了一些方便的工具和API，帮助我们监控和管理Job的执行状态，以及处理Job执行中的异常情况等。</p><p>​总之，Job实例是Spring Cloud中非常重要的概念，它代表了一个批处理任务的具体实现，通过Job实例，我们可以方便地定义和管理批处理任务，以及监控和管理任务的执行状态。</p><h4 id="JobDetail"><a href="#JobDetail" class="headerlink" title="JobDetail"></a>JobDetail</h4><p>在Spring Cloud中，<code>JobDetail</code>是Quartz调度框架中的一个重要概念，用于定义一个可被调度的任务。</p><p>JobDetail中定义了要执行的任务类、任务名称、任务组等相关信息，它是实际可被调度的任务的定义。通常情况下，一个JobDetail对应一个Job实例。</p><p>下面是一个JobDetail的定义示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javaCopy <span class="type">codeJobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(MyJob.class)</span><br><span class="line">    .withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;myGroup&quot;</span>)</span><br><span class="line">    .usingJobData(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>上面的代码中，我们使用JobBuilder创建了一个新的JobDetail，并指定了要执行的任务类MyJob，任务的名称为”myJob”，所属的任务组为”myGroup”。同时，我们还使用usingJobData()方法设置了一些任务数据。</p><p>JobDetail通常由Scheduler来管理和调度，它通过调用JobExecutionContext来执行任务。在任务执行期间，可以从JobExecutionContext中获取任务数据以及调度信息等。可以通过Scheduler将JobDetail与Trigger关联起来，以实现任务的定时调度。</p><p>总之，JobDetail是Quartz调度框架中非常重要的概念，它定义了一个可被调度的任务，通过与Trigger关联，可以实现任务的定时调度。</p><h4 id="JobBuild"><a href="#JobBuild" class="headerlink" title="JobBuild"></a>JobBuild</h4><p>在Spring Cloud中，JobBuilder是Spring Batch中的一个实用类，用于构建Job实例。</p><p>JobBuilder提供了一种流畅的构建Job实例的方式。通过JobBuilder，您可以指定Job名称、Job执行方式、Job参数等。您还可以通过JobBuilder创建Step实例并将它们添加到Job中。</p><p>以下是JobBuilder的一些常用方法：</p><ul><li>name(String name)：指定Job的名称。</li><li>repository(JobRepository repository)：指定JobRepository，用于存储Job的元数据。</li><li>incrementer(JobParametersIncrementer incrementer)：指定JobParametersIncrementer，用于自动为Job生成唯一的JobParameters。</li><li>start(Step step)：指定Job的第一个Step。</li><li>flow(Flow flow)：指定Job的Flow，Flow是一个Step集合。</li><li>listener(JobExecutionListener listener)：指定Job的JobExecutionListener，用于监听Job执行状态。</li><li>validator(JobParametersValidator validator)：指定Job的JobParametersValidator，用于验证JobParameters的合法性。</li></ul><p>总之，JobBuilder是Spring Batch中一个非常实用的工具，可以帮助您轻松构建Job实例。</p><h3 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h3><blockquote><p>Spring Cloud Gateway 是 Spring Cloud 生态系统中的一个全新项目，它是一个基于 Spring Framework 5，Spring Boot 2 和 Project Reactor 等技术栈构建的网关服务，用于处理所有进入应用程序的请求。相对于 Zuul 1.x 和 Zuul 2.x，Spring Cloud Gateway 更加灵活和强大。</p></blockquote><p>Spring Cloud Gateway 的使用可以分为以下几个步骤：</p><ol><li>添加 Spring Cloud Gateway 依赖：在项目的 pom.xml 文件中添加 Spring Cloud Gateway 的依赖。</li><li>配置路由规则：在项目的配置文件中添加 Spring Cloud Gateway 的路由规则，可以通过 GatewayProperties 类进行配置，也可以通过自定义配置类进行配置。</li><li>编写过滤器：如果需要对请求进行过滤、转换等操作，可以编写自定义过滤器，通过实现 GatewayFilter 接口或 GlobalFilter 接口来实现。</li><li>启动 Spring Cloud Gateway：启动应用程序，Spring Cloud Gateway 会自动加载路由规则和过滤器，并提供统一的访问入口。</li></ol><p>下面是一个简单的 Spring Cloud Gateway 配置示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: user-service</span><br><span class="line">          uri: lb://user-service</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/api/users/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=1</span><br><span class="line">        - id: order-service</span><br><span class="line">          uri: lb://order-service</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/api/orders/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=1</span><br></pre></td></tr></table></figure><p>这个示例配置了两个路由规则，将 &#x2F;api&#x2F;users&#x2F;** 路径下的请求转发到 user-service 服务，将 &#x2F;api&#x2F;orders&#x2F;** 路径下的请求转发到 order-service 服务，并且都进行了 StripPrefix 过滤器的处理。</p><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><p>过滤器链是一种常见的设计模式，通常用于处理数据流或事件流中的数据。其作用是将一系列过滤器连接在一起，以便逐步处理输入数据，并产生输出数据。每个过滤器都负责对数据进行一些特定的操作，例如验证、转换、过滤、修饰等。</p><p>过滤器链的主要作用包括以下几个方面：</p><ol><li>分离职责：将处理逻辑拆分成多个独立的过滤器，每个过滤器负责处理特定的任务，使得代码结构更加清晰。</li><li>灵活性：通过动态添加、移除或替换过滤器，可以轻松地调整处理流程，从而实现不同的业务需求。</li><li>可复用性：由于过滤器链将处理逻辑拆分成多个独立的过滤器，因此这些过滤器可以被复用在不同的上下文中。</li><li>易于维护：由于每个过滤器只负责特定的任务，因此对于问题的定位和修复更加容易。</li></ol><p>总的来说，过滤器链提供了一种有效的方式来处理数据流或事件流中的数据，并使得代码更加模块化、灵活、可复用和易于维护。</p><h3 id="SecurityFilterChain-安全过滤器链"><a href="#SecurityFilterChain-安全过滤器链" class="headerlink" title="SecurityFilterChain(安全过滤器链)"></a>SecurityFilterChain(安全过滤器链)</h3><p>SecurityFilterChain 是 Spring Security 框架中的接口，用于定义安全过滤器链。它是一组过滤器链的集合，用于处理来自客户端的请求并执行安全检查。 </p><p>每个过滤器链都由一组安全过滤器组成。在处理请求时，每个过滤器链将按照它们被配置的顺序依次执行。每个过滤器将根据其配置来处理请求，比如进行身份验证、授权、会话管理等。</p><p>SecurityFilterChain 接口的主要作用是：</p><ol><li>定义安全过滤器链：它允许开发人员配置多个过滤器链，每个过滤器链可以处理不同的 URL 路径、HTTP 方法、请求头等。</li><li>执行安全过滤器链：它按照配置的顺序依次执行每个过滤器链，并且确保所有的安全检查都被正确地执行。</li><li>执行安全过滤器：它执行安全过滤器链中的每个安全过滤器，并根据其配置来处理请求。例如，身份验证过滤器将检查用户的身份，而授权过滤器将检查用户是否有权限访问特定的资源。</li></ol><p>总之，SecurityFilterChain 是 Spring Security 框架中非常重要的一个接口，它允许开发人员定义和执行多个安全过滤器链，从而确保应用程序的安全性和可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH会话保持</title>
      <link href="/2023/02/23/SSH%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
      <url>/2023/02/23/SSH%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h2><p>Screen是一个全屏窗口管理器，它在多个进程（通常是交互式shell）之间多路传输物理终端。</p><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><blockquote><p>apt-get install screen</p></blockquote><h3 id="列出所有的session"><a href="#列出所有的session" class="headerlink" title="列出所有的session"></a>列出所有的session</h3><blockquote><p>screen -ls</p></blockquote><h3 id="创建一个新窗口"><a href="#创建一个新窗口" class="headerlink" title="创建一个新窗口"></a>创建一个新窗口</h3><blockquote><p>screen -S test</p></blockquote><h3 id="退出当前窗口"><a href="#退出当前窗口" class="headerlink" title="退出当前窗口"></a>退出当前窗口</h3><blockquote><p>可以ctrl + a,然后输入d</p><p>结束窗口使用exit</p></blockquote><h3 id="重新连接窗口"><a href="#重新连接窗口" class="headerlink" title="重新连接窗口"></a>重新连接窗口</h3><blockquote><p>screen -r id或者名称</p></blockquote><h3 id="清除dead状态窗口"><a href="#清除dead状态窗口" class="headerlink" title="清除dead状态窗口"></a>清除dead状态窗口</h3><p>  如果会话窗口被kill，状态转为dead无法连接，可以使用screen -wipe命令清除会话窗口。</p><h3 id="会话锁定与解锁"><a href="#会话锁定与解锁" class="headerlink" title="会话锁定与解锁"></a>会话锁定与解锁</h3><p>  输入ctl+a s锁定会话，锁定之后输入任何内容屏幕都无反应，输入ctl+a q之后解锁，虽然屏幕锁定的时候无反应但是会接受输入的命令，解锁后会全部执行，切勿输入危险命令，所以建议使用ctl+a x锁定。</p><h3 id="Screen命令中用到的快捷键"><a href="#Screen命令中用到的快捷键" class="headerlink" title="Screen命令中用到的快捷键"></a>Screen命令中用到的快捷键</h3><p>Ctrl+a c ：创建窗口<br>Ctrl+a w ：窗口列表<br>Ctrl+a n ：下一个窗口<br>Ctrl+a p ：上一个窗口<br>Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换<br>Ctrl+a K(大写) ：关闭当前窗口，并且切换到下一个窗口（当退出最后一个窗口时，该终端自动终止，并且退回到原始shell状态）<br>exit ：关闭当前窗口，并且切换到下一个窗口（当退出最后一个窗口时，该终端自动终止，并且退回到原始shell状态）<br>Ctrl+a d ：退出当前终端，返回加载screen前的shell命令状态</p>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2023/02/23/Nginx/"/>
      <url>/2023/02/23/Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/2023/02/23/Nginx/image-20230223083815916.png" alt="image-20230223083815916"></p><p><img src="/2023/02/23/Nginx/image-20230223084003014.png" alt="image-20230223084003014"></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>安装</p><blockquote><p>sudo apt-get install nginx</p></blockquote><p>​安装位置</p><blockquote><p>&#x2F;etc&#x2F;Nginx</p></blockquote><p>基本命令</p><p>查看状态</p><blockquote><p>systemctl status nginx ;</p></blockquote><p>启停服务器</p><blockquote><p> nginx -s reload<br>nginx -s stop<br>nginx</p></blockquote><h3 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h3><p><img src="/2023/02/23/Nginx/image-20230223090803682.png" alt="image-20230223090803682"></p><h2 id="部署一个网页"><a href="#部署一个网页" class="headerlink" title="部署一个网页"></a>部署一个网页</h2><blockquote><p>Ubuntu20.04</p></blockquote><ol><li><p>在&#x2F;etc&#x2F;nginx中创建一个文件夹web，用于存放网页</p></li><li><p>在&#x2F;etc&#x2F;ngxin中修改nginx.conf配置文件，在http{}中加入<code>include /etc/nginx/conf.d/*.conf;</code>,用于补充服务器配置</p></li><li><p>在conf.d中创建服务器配置文件，这里命名为tama.conf</p></li><li><p>编辑配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen port; （指定端口）</span><br><span class="line">server_name 域名(或者ip);</span><br><span class="line">location /&#123;</span><br><span class="line">root folder; (web存放位置)</span><br><span class="line">index file.html; (起始页)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><img src="/2023/02/23/Nginx/image-20230223095113642.png" alt="image-20230223095113642"></p><p><img src="/2023/02/23/Nginx/image-20230223095251468.png" alt="image-20230223095251468"></p><p><img src="/2023/02/23/Nginx/image-20230223100426344.png" alt="image-20230223100426344"></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p><img src="/2023/02/23/Nginx/image-20230223100643952.png" alt="image-20230223100643952"></p><p><img src="/2023/02/23/Nginx/image-20230223101038913.png" alt="image-20230223101038913"><img src="/2023/02/23/Nginx/image-20230223101152161.png" alt="image-20230223101152161"></p>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cache</title>
      <link href="/2023/02/22/Spring-Cache/"/>
      <url>/2023/02/22/Spring-Cache/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCache"><a href="#SpringCache" class="headerlink" title="SpringCache"></a>SpringCache</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/2023/02/22/Spring-Cache/image-20230222112940131.png" alt="image-20230222112940131"></p><p><img src="/2023/02/22/Spring-Cache/image-20230222113050331.png" alt="image-20230222113050331"></p><p>导入Maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="保存缓存数据（默认以Map形式保存在内存中）"><a href="#保存缓存数据（默认以Map形式保存在内存中）" class="headerlink" title="保存缓存数据（默认以Map形式保存在内存中）"></a>保存缓存数据（默认以Map形式保存在内存中）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CachePut :将方法返回值放入缓存</span></span><br><span class="line"><span class="comment"> * value:缓存的名称，每个缓存的名称下面可以有多个key</span></span><br><span class="line"><span class="comment"> * key:缓存的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CachePut(value = &quot;userCache&quot;,key = &quot;#user.id&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除缓存数据"><a href="#删除缓存数据" class="headerlink" title="删除缓存数据"></a>删除缓存数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0&quot;)</span></span><br><span class="line"><span class="comment">// @CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0]&quot;)</span></span><br><span class="line"><span class="comment">// @CacheEvict(value = &quot;userCache&quot;,key = &quot;#id&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    userService.removeById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0.id&quot;)</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userService.updateById(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="获取缓存数据"><a href="#获取缓存数据" class="headerlink" title="获取缓存数据"></a>获取缓存数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  condition:满足条件才缓存</span></span><br><span class="line"><span class="comment">     *  unless:满足条件则不缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;,condition = &quot;#result != null)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全部数据</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#user.id + &#x27;_&#x27; + #user.name&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(user.getId() != <span class="literal">null</span>,User::getId,user.getId());</span><br><span class="line">        queryWrapper.eq(user.getName() != <span class="literal">null</span>,User::getName,user.getName());</span><br><span class="line">        List&lt;User&gt; list = userService.list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2023/02/20/Redis/"/>
      <url>/2023/02/20/Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="/2023/02/20/Redis/image-20230220155353522.png" alt="image-20230220155353522"></p><p><img src="/2023/02/20/Redis/image-20230220155422021.png" alt="image-20230220155422021"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="Ubantu安装Redis"><a href="#Ubantu安装Redis" class="headerlink" title="Ubantu安装Redis"></a>Ubantu安装Redis</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis</span><br></pre></td></tr></table></figure><h3 id="redis配置文件位置"><a href="#redis配置文件位置" class="headerlink" title="redis配置文件位置"></a>redis配置文件位置</h3><blockquote><p>&#x2F;etc&#x2F;redis</p></blockquote><h3 id="设置密码-x2F-etc-x2F-redis-x2F-redis-conf"><a href="#设置密码-x2F-etc-x2F-redis-x2F-redis-conf" class="headerlink" title="设置密码(&#x2F;etc&#x2F;redis&#x2F;redis.conf)"></a>设置密码(&#x2F;etc&#x2F;redis&#x2F;redis.conf)</h3><blockquote><p>requirepass 密码</p></blockquote><h3 id="关闭-x2F-开启服务"><a href="#关闭-x2F-开启服务" class="headerlink" title="关闭&#x2F;开启服务"></a>关闭&#x2F;开启服务</h3><blockquote><p>&#x2F;etc&#x2F;init.d&#x2F;redis-server stop<br>&#x2F;etc&#x2F;init.d&#x2F;redis-server start</p></blockquote><h3 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h3><blockquote><p>redis-cli -h localhost -p 6379 -a 密码</p></blockquote><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><blockquote><p>127.0.0.1:6379&gt; auth 密码</p></blockquote><h3 id="切换库"><a href="#切换库" class="headerlink" title="切换库"></a>切换库</h3><p>redis默认会有16个库</p><blockquote><p>select 0 （0为索引值）</p></blockquote><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><ol><li><p>将protected-mode yes 修改为no 关闭protected-mode模式，此时外部网络可以直接访问</p><p><img src="/2023/02/20/Redis/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aaZ6Laj55Sf6Iqx,size_17,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p> 注释bind 127.0.0.1 只允许本机连接设置</p><p><img src="/2023/02/20/Redis/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aaZ6Laj55Sf6Iqx,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p>启动redis服务&#x2F;etc&#x2F;init.d&#x2F;redis-server start</p></li><li><p>本地启动redis服务（在安装目录下打开redis-server.exe）</p><p><img src="/2023/02/20/Redis/image-20230221091255505.png" alt="image-20230221091255505"></p></li></ol><p>在当前目录下打开powershell，连接远程服务器redis</p><blockquote><p>.&#x2F;redis-cli -h 120.25.248.122 -p 6379 -a 密码</p></blockquote><h2 id="数据类型及操作"><a href="#数据类型及操作" class="headerlink" title="数据类型及操作"></a>数据类型及操作</h2><p><img src="/2023/02/20/Redis/image-20230221091951239.png" alt="image-20230221091951239"></p><p><img src="/2023/02/20/Redis/image-20230221092058552.png" alt="image-20230221092058552"></p><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h3><p><img src="/2023/02/20/Redis/image-20230221095530142.png" alt="image-20230221095530142"></p><h3 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 hash"></a>哈希 hash</h3><p><img src="/2023/02/20/Redis/image-20230221095424476.png" alt="image-20230221095424476"></p><h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 List"></a>列表 List</h3><blockquote><p>类似于栈的相关操作</p></blockquote><p><img src="/2023/02/20/Redis/image-20230221101958363.png" alt="image-20230221101958363"></p><h3 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合 Set"></a>集合 Set</h3><p><img src="/2023/02/20/Redis/image-20230221102945981.png" alt="image-20230221102945981"></p><p><img src="/2023/02/20/Redis/image-20230221103936306.png" alt="image-20230221103936306"></p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p><img src="/2023/02/20/Redis/image-20230221105535569.png" alt="image-20230221105535569"></p><h2 id="在Java中操作Redis"><a href="#在Java中操作Redis" class="headerlink" title="在Java中操作Redis"></a>在Java中操作Redis</h2><p><img src="/2023/02/20/Redis/image-20230221111627764.png" alt="image-20230221111627764"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyblue.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestRedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;120.25.248.122&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;密码&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.执行具体操作</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;myhash&quot;</span>,<span class="string">&quot;addr&quot;</span>,<span class="string">&quot;bj&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hget</span> <span class="operator">=</span> jedis.hget(<span class="string">&quot;myhash&quot;</span>, <span class="string">&quot;addr&quot;</span>);</span><br><span class="line">        <span class="comment">//String username = jedis.get(&quot;username&quot;);</span></span><br><span class="line">        System.out.println(hget);</span><br><span class="line">        <span class="comment">// 3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用springboot简化Redis操作"><a href="#使用springboot简化Redis操作" class="headerlink" title="使用springboot简化Redis操作"></a>使用springboot简化Redis操作</h3><p>导入坐标（pom.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件（application.yml）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># redis配置</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">120.25</span><span class="number">.248</span><span class="number">.122</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Zzp1234-</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment"># 默认操作数据库</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="comment"># redis连接池配置</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 最大连接数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1ms</span> <span class="comment"># 连接池最大阻塞等待时间</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">4</span> <span class="comment"># 连接池中最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 连接池最小空闲连接</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/20/Redis/image-20230221135246530.png" alt="image-20230221135246530"></p><blockquote><p>序列化器，在存储或读取数据时使用序列化器的方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;Object,Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认的key序列化器为JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类 Test.java</p><h4 id="String操作"><a href="#String操作" class="headerlink" title="String操作"></a>String操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 设置</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;city123&quot;</span>,<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Hash操作"><a href="#Hash操作" class="headerlink" title="Hash操作"></a>Hash操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">RedisTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建hash对象</span></span><br><span class="line">            <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">            <span class="comment">// 存值</span></span><br><span class="line">            hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">            hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">            hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;address&quot;</span>,<span class="string">&quot;shandong&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> (String)hashOperations.get(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="comment">// 获得hash结构中所有的字段</span></span><br><span class="line">            <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">                System.out.println(key);</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 获得所有hash字段中的数据</span></span><br><span class="line">          <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">                System.out.println(value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="List操作"><a href="#List操作" class="headerlink" title="List操作"></a>List操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">RedisTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存值</span></span><br><span class="line">            <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line">            listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取值</span></span><br><span class="line">            <span class="type">List</span> <span class="variable">mylist</span> <span class="operator">=</span> listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (Object o : mylist) &#123;</span><br><span class="line">                System.out.println(o);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获得列表长度</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">            <span class="comment">// 元素个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">LSize</span> <span class="operator">=</span> size.intValue();</span><br><span class="line">            System.out.println(size);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; LSize; i++) &#123;</span><br><span class="line">                <span class="comment">// 出队列</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> (String)listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">                System.out.println(element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">RedisTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">            <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line">            <span class="comment">// 存值</span></span><br><span class="line">            setOperations.add(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">            <span class="comment">// 取值</span></span><br><span class="line">            Set&lt;String&gt; myset = setOperations.members(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : myset) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除</span></span><br><span class="line">            setOperations.remove(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有序集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">RedisTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存值</span></span><br><span class="line">            zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10.0</span>);</span><br><span class="line">            zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">11.0</span>);</span><br><span class="line">            zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">12.0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取值</span></span><br><span class="line">            Set&lt;String&gt; myzset = zSetOperations.range(<span class="string">&quot;myzset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : myzset) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 修改分数</span></span><br><span class="line">            zSetOperations.incrementScore(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">20.0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除成员</span></span><br><span class="line">            zSetOperations.remove(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">RedisTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取Redis中所有的key</span></span><br><span class="line">            Set&lt;String&gt; keys = redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">                System.out.println(key);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断key是否存在</span></span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;lyblue&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除指定key</span></span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;myzset&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取指定key对应的value的数据类型</span></span><br><span class="line">            <span class="type">DataType</span> <span class="variable">dataType</span> <span class="operator">=</span> redisTemplate.type(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">            System.out.println(dataType.name());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> databases </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/02/20/Linux/"/>
      <url>/2023/02/20/Linux/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/02/20/Linux/image-20230220094338822.png" alt="image-20230220094338822"></p><p><img src="/2023/02/20/Linux/image-20230220094822586.png" alt="image-20230220094822586"></p><p><img src="/2023/02/20/Linux/image-20230220095202233.png" alt="image-20230220095202233"></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><h4 id="进入文件地址"><a href="#进入文件地址" class="headerlink" title="进入文件地址"></a>进入文件地址</h4><blockquote><p>cd &#x2F;xxx&#x2F;xxx</p></blockquote><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><blockquote><p>mkdir 文件名</p></blockquote><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h4><blockquote><p>touch 文件名</p></blockquote><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><blockquote><p>cat 文件名<br>more 文件名（分页展示）<br>tail [-f] 文件名</p></blockquote><h4 id="移动文件（更改文件名）"><a href="#移动文件（更改文件名）" class="headerlink" title="移动文件（更改文件名）"></a>移动文件（更改文件名）</h4><blockquote><p>移动：mv 文件名 路径</p></blockquote><blockquote><p>重命名：mv 旧文件名 新文件名</p></blockquote><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><blockquote><p>rm 文件名<br>rm -f 删除文件<br>rm -rf 删除文件夹及其下的所有文件</p></blockquote><p>tip: -r 就是向下递归,不管有多少目录一并删除</p><p>  -f 就是直接强行删除,不做任何提示</p><h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><blockquote><p>jar 文件</p></blockquote><blockquote><p>jar -xvf xxx.jar(将内容解压，不创建文件夹)</p></blockquote><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><p>创建新用户(未授予root权限,无法查看root文件夹,移动或删除文件)</p><blockquote><p>adduser 用户名</p></blockquote><p>修改(创建)密码</p><blockquote><p>passwd 用户名</p></blockquote><p>查看所有用户信息:</p><p>信息文件在 &#x2F;etc&#x2F;passwd 中</p><p>加密密码文件在 &#x2F;etc&#x2F;shadow 中( 加密算法一般为 sha512 )</p><h4 id="查看程序是否在运行"><a href="#查看程序是否在运行" class="headerlink" title="查看程序是否在运行"></a>查看程序是否在运行</h4><blockquote><p>ps -ef | grep nginx </p></blockquote><h3 id="vi操作"><a href="#vi操作" class="headerlink" title="vi操作"></a>vi操作</h3><h4 id="退出模式"><a href="#退出模式" class="headerlink" title="退出模式"></a>退出模式</h4><p>以指定文件名保存</p><blockquote><p>:w filename</p></blockquote><p>保存并退出</p><blockquote><p> :wq</p></blockquote><p>不保存直接退出</p><blockquote><p> :q!</p></blockquote><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除光标所在整行</p><blockquote><p>dd</p></blockquote><h4 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h4><p>复制当前行</p><blockquote><p>yy</p></blockquote><p>粘贴</p><blockquote><p>p</p></blockquote><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><h4 id="列出行号"><a href="#列出行号" class="headerlink" title="列出行号"></a>列出行号</h4><blockquote><p>:set nu</p></blockquote><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>取消高亮</p><blockquote><p>:nohl</p></blockquote><h3 id="MySQL操作"><a href="#MySQL操作" class="headerlink" title="MySQL操作"></a>MySQL操作</h3><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="查看数据库状态"><a href="#查看数据库状态" class="headerlink" title="查看数据库状态"></a>查看数据库状态</h4><blockquote><p>sudo service mysqld status</p></blockquote><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><blockquote><p>sudo service mysqld start</p></blockquote><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><blockquote><p>sudo service mysqld stop</p></blockquote><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><blockquote><p>sudo service mysqld restart</p></blockquote><h2 id="使用Navicat连接服务器数据库"><a href="#使用Navicat连接服务器数据库" class="headerlink" title="使用Navicat连接服务器数据库"></a>使用Navicat连接服务器数据库</h2><ol><li><p>使用宝塔面板或者压缩包安装mysql(这里使用宝塔面板)</p><p><img src="/2023/02/20/Linux/image-20230220135737885.png" alt="image-20230220135737885"></p></li><li><p>设置数据库访问权限</p><blockquote><p>登录mysql，在mysql数据库中添加</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 更新root用户权限，“<span class="operator">%</span>”指的是所有地址都可以访问</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> Host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">User</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>进入服务器控制台开放mysql的3306端口（宝塔的也要开启）</p></li><li><p><img src="/2023/02/20/Linux/image-20230220140319688.png" alt="image-20230220140319688"></p></li></ol><p><img src="/2023/02/20/Linux/image-20230220140357944.png" alt="image-20230220140357944"></p><h2 id="安装文件上传命令"><a href="#安装文件上传命令" class="headerlink" title="安装文件上传命令"></a>安装文件上传命令</h2><blockquote><p>lrzsz与Xftp功能相同，可以对服务器进行文件上传和下载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lrzsz</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><h2 id="通过shell脚本自动部署项目"><a href="#通过shell脚本自动部署项目" class="headerlink" title="通过shell脚本自动部署项目"></a>通过shell脚本自动部署项目</h2><p><img src="/2023/02/20/Linux/image-20230220142753891.png" alt="image-20230220142753891"></p><h2 id="异常问题"><a href="#异常问题" class="headerlink" title="异常问题"></a>异常问题</h2><h3 id="系统环境异常"><a href="#系统环境异常" class="headerlink" title="系统环境异常"></a>系统环境异常</h3><blockquote><p>Command ‘ls’ is available in the following places</p></blockquote><p><img src="/2023/02/20/Linux/image-20230221193709804.png" alt="image-20230221193709804"></p><p><strong>解决方法</strong></p><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin</span><br></pre></td></tr></table></figure><p>这样可以保证命令行命令暂时可以使用。命令执行完之后先不要关闭终端，然后修改环境变量文件。<br>当前用户的环境变量 vim ~&#x2F;.bashrc<br>设置全局变量文件在 vim &#x2F;etc&#x2F;profile</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/02/20/Git/"/>
      <url>/2023/02/20/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git代码托管服务"><a href="#Git代码托管服务" class="headerlink" title="Git代码托管服务"></a>Git代码托管服务</h2><p><img src="/2023/02/20/Git/image-20230220083749460.png" alt="image-20230220083749460"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.下载安装程序,安装,右键出现git选项即安装成功</p><p><img src="/2023/02/20/Git/1.png" alt="图片"></p><p>2.基本配置</p><p>a.设置用户名和密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置用户名和密码</span></span><br><span class="line">git config --global user.name 用户名 </span><br><span class="line">git config --global user.email 邮箱</span><br><span class="line"><span class="comment">// 查看用户名和密码</span></span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 查看配置信息</span></span><br><span class="line">  git config --list</span><br></pre></td></tr></table></figure><p>b.使用 git ~&#x2F;.bashrc 在用户目录创建一个.bashrc的文件,里面配置简化指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#用于输出git提交日志</span><br><span class="line">alias git-log=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span></span><br><span class="line">#用于输出当前目录所有文件及基本信息</span><br><span class="line">alias ll=<span class="string">&#x27;ls -al&#x27;</span></span><br></pre></td></tr></table></figure><p>随后在git bash使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>c.在 git目录&#x2F;etc下的 bash.bashrc 文件中最后加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line">export LC_ALL=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure><p>3.配置本地仓库,新建文件夹将其设为git本地仓库,在其内部打开git bash,输入git init即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><p><img src="/2023/02/20/Git/image-20230220090206554.png" alt="image-20230220090206554"><img src="/2023/02/20/Git/image-20230220090555898.png" alt="image-20230220090555898"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.brshrc <span class="comment">// 在用户文件夹创建一个名为.brshrc的文件</span></span><br><span class="line">ls/ll <span class="comment">// 查看所有文件</span></span><br><span class="line">cat <span class="comment">// 查看文件内容</span></span><br><span class="line">clear <span class="comment">// 清空控制台</span></span><br><span class="line">git reflog <span class="comment">// 查看操作历史记录</span></span><br></pre></td></tr></table></figure><h4 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="提交文件到暂存区"><a href="#提交文件到暂存区" class="headerlink" title="提交文件到暂存区"></a>提交文件到暂存区</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .  <span class="comment">// 将本地仓库的所有文件全部加入暂存区,也可以直接加文件名单独提交</span></span><br></pre></td></tr></table></figure><h4 id="提交文件到本地缓存仓库中"><a href="#提交文件到本地缓存仓库中" class="headerlink" title="提交文件到本地缓存仓库中"></a>提交文件到本地缓存仓库中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;add xxx&quot;</span>    <span class="comment">// 添加  </span></span><br><span class="line">git commit -m <span class="string">&quot;update xxx&quot;</span>  <span class="comment">// 修改</span></span><br></pre></td></tr></table></figure><h4 id="查看文件修改信息"><a href="#查看文件修改信息" class="headerlink" title="查看文件修改信息"></a>查看文件修改信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果配置了前面简化代码的文件,则直接写 log git</span></span><br><span class="line">git log --pretty=oneline --all --graph --abbrev-commit</span><br></pre></td></tr></table></figure><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -r 文件名</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;提示信息&quot;</span></span><br><span class="line">git <span class="title function_">push</span><span class="params">(删除远程仓库内容)</span></span><br></pre></td></tr></table></figure><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 操作ID</span><br></pre></td></tr></table></figure><h4 id="添加文件至排除列表"><a href="#添加文件至排除列表" class="headerlink" title="添加文件至排除列表"></a>添加文件至排除列表</h4><p>1.创建文件 .gitignore</p><p>2.在其中添加排除文件,例如 *.a ,即排除.a后缀的文件</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="查看本地所有分支"><a href="#查看本地所有分支" class="headerlink" title="查看本地所有分支"></a>查看本地所有分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="title function_">xxx</span><span class="params">(分支名)</span></span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="title function_">xxx</span><span class="params">(分支名)</span></span><br></pre></td></tr></table></figure><h4 id="创建并切换"><a href="#创建并切换" class="headerlink" title="创建并切换"></a>创建并切换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="title function_">xxx</span><span class="params">(分支名)</span></span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d xxx  <span class="comment">// 删除,但做检查</span></span><br><span class="line">git branch -D xxx  <span class="comment">// 强制删除</span></span><br></pre></td></tr></table></figure><h3 id="配置gitee-x2F-github"><a href="#配置gitee-x2F-github" class="headerlink" title="配置gitee&#x2F;github"></a>配置gitee&#x2F;github</h3><p>1.使用公私钥对(直接在git bash使用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa  <span class="comment">// 一路回车</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/20/Git/2.png" alt="图片"></p><p>2.查看密钥并复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub  <span class="comment">// 在用户目录会生成一个.ssh文件,里面包含密钥信息</span></span><br></pre></td></tr></table></figure><p>3.进入码云进行相应设置,粘贴公钥和标题,输入密码,配置完成</p><p><img src="/2023/02/20/Git/image-20230220085104656.png" alt="image-20230220085104656"></p><p>4.测试连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git<span class="meta">@gitee</span>.com</span><br><span class="line">ssh -T git<span class="meta">@github</span>.com</span><br></pre></td></tr></table></figure><p><img src="/2023/02/20/Git/3.png" alt="图片"></p><h4 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h4><p>1.在码云创建仓库</p><p>2.复制ssh地址</p><p><img src="/2023/02/20/Git/4.png" alt="图片"></p><p>3.连接本地仓库和远程仓库(连接名称默认为origin)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add 远程连接名称 SSH地址</span><br><span class="line"></span><br><span class="line"><span class="comment">// 远程连接名称可以是gitee和github以表示提交到哪个网站的仓库</span></span><br></pre></td></tr></table></figure><ul><li>远程连接名称:默认为origin,取决于远程服务器设置,可以自行设置</li><li>仓库路径:从远程仓库获取的地址(如SSH地址)</li></ul><p>查看本地仓库的远程连接名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p>4.将本地的代码推送到远程仓库上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [-f] origin master</span><br></pre></td></tr></table></figure><p>tip:-f 表示强制覆盖</p><p>将远程的仓库分支与本地仓库分支相连</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --setupstream origin master</span><br></pre></td></tr></table></figure><p>查看远程仓库与本地仓库的映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h4 id="仓库克隆"><a href="#仓库克隆" class="headerlink" title="仓库克隆"></a>仓库克隆</h4><p>作用:将远程仓库克隆到本地仓库</p><p>在想要接收克隆仓库的位置打开git bash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh地址 本地仓库文件名</span><br></pre></td></tr></table></figure><h4 id="远程拉取更新"><a href="#远程拉取更新" class="headerlink" title="远程拉取更新"></a>远程拉取更新</h4><p>在接收克隆的仓库位置打开git bash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖项目</title>
      <link href="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230214143930388.png" alt="image-20230214143930388"></p><h3 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230214144101634.png" alt="image-20230214144101634"></p><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230214144222225.png" alt="image-20230214144222225"></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230214144844619.png" alt="image-20230214144844619"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="数据库搭建"><a href="#数据库搭建" class="headerlink" title="数据库搭建"></a>数据库搭建</h3><p>创建数据库reggie，导入表</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230214151615744.png" alt="image-20230214151615744"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230214151522680.png" alt="image-20230214151522680"></p><h3 id="项目搭建与前置工作"><a href="#项目搭建与前置工作" class="headerlink" title="项目搭建与前置工作"></a>项目搭建与前置工作</h3><blockquote><p>注：当前项目使用SpringBoot 版本为 3.0.2</p></blockquote><p><strong>创建SpringBoot项目，并导入依赖项</strong></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215152442095.png" alt="image-20230215152442095"></p><p><strong>导入坐标 Pom.xml</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lyblue<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>reggie_take_out01<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>reggie_take_out01<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>配置文件 application.yml</strong> </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Zzp1234-</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">   <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215150650052.png" alt="image-20230215150650052"></p><h4 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h4><ol><li><p>创建各级包和类，其中commen为通用文件夹，R为向前端传递数据和信息的类</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215151230243.png" alt="image-20230215151230243"></p><p>实体类 Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String idNumber; <span class="comment">// 身份证</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据层类 EmployMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务层接口 EmployeeService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务层实现类 EmployeeServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建静态资源映射，将需要访问的前端页面能进行加载</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebMvcConfig.class</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始静态资源映射&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后端管理系统开发"><a href="#后端管理系统开发" class="headerlink" title="后端管理系统开发"></a>后端管理系统开发</h1><h2 id="登录功能的实现"><a href="#登录功能的实现" class="headerlink" title="登录功能的实现"></a>登录功能的实现</h2><blockquote><p>完成用户登录和退出登录功能</p></blockquote><h3 id="登录流程图"><a href="#登录流程图" class="headerlink" title="登录流程图"></a>登录流程图</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215085649583.png" alt="image-20230215085649583"></p><h3 id="项目关系图表"><a href="#项目关系图表" class="headerlink" title="项目关系图表"></a>项目关系图表</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215104119321.png" alt="image-20230215104119321"></p><h3 id="LambdaQueryWrapper-条件构造器"><a href="#LambdaQueryWrapper-条件构造器" class="headerlink" title="LambdaQueryWrapper 条件构造器"></a>LambdaQueryWrapper 条件构造器</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/bef665cdbc7c4b51813b80d418484782.png" alt="bef665cdbc7c4b51813b80d418484782"></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>EmployeeController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 将页面提交的代码password进行MD5加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 根据页面提交的数据名username查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 如果没有查询到则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span>(emp == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 密码比对</span></span><br><span class="line">        <span class="keyword">if</span>(!emp.getPassword().equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看员工状态</span></span><br><span class="line">        <span class="keyword">if</span>(emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登录成功，将员工id存入Session并返回成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>控制器类<br>EmployeeController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录功能实现</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">  <span class="comment">// 移除Session中的employee信息</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>如果用户进入非登录界面且用户未登录，拦截请求并返回到登录界面</p></blockquote><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215105347537.png" alt="image-20230215105347537"></p><p><strong>登录拦截器 LoginCheckFilter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取拦截的URI地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求:&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 可以直接放行的URI地址</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不需要处理，直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(check)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断登录状态，如果已经登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户ID为:&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果未登录则返回未登录结果</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本次请求是否需要放行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">( String[] urls, String requestURI)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">          <span class="comment">// 与可以放行的URI匹配成功，可以放行</span></span><br><span class="line">            <span class="keyword">if</span> (match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 未匹配，不放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h2><h3 id="添加员工"><a href="#添加员工" class="headerlink" title="添加员工"></a>添加员工</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215112430832.png" alt="image-20230215112430832"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215163025213.png" alt="image-20230215163025213"></p><p><strong>控制器类 EmployeeController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;新增员工,员工信息：&#123;&#125;&quot;</span>,employee.toString());</span><br><span class="line">    <span class="comment">// 设置初始用户密码，需要进行MD5加密</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">    <span class="comment">// 修改用户创建时间和修改时间</span></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得当前登录用户的ID</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="comment">// 当前创建和修改用户数据的用户ID</span></span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上传数据库</span></span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h3><p>创建全局异常处理器</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215160150355.png" alt="image-20230215160150355"></p><blockquote><p>本次处理添加用户操作时重复添加同一账户的异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对加入RestController和Controller注解的类异常进行处理</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户重复添加异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException exception)</span>&#123;</span><br><span class="line">      <span class="comment">// 如果异常信息中包含Duplicate entry信息，则为数据重复添加</span></span><br><span class="line">        <span class="keyword">if</span>(exception.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = exception.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span>  split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215163402379.png" alt="image-20230215163402379"></p><p><strong>创建MP分页插件</strong></p><p>MybatisPlusConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器类 EmployeeController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;page = &#123;&#125;,pageSize = &#123;&#125;, name = &#123;&#125;&quot;</span>,page,pageSize,name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造分页构造器</span></span><br><span class="line">    <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page,pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    <span class="comment">// 添加过滤条件</span></span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name),Employee::getName,name);</span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    employeeService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启用-x2F-禁用员工账号"><a href="#启用-x2F-禁用员工账号" class="headerlink" title="启用&#x2F;禁用员工账号"></a>启用&#x2F;禁用员工账号</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215173102938.png" alt="image-20230215173102938"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215190231817.png" alt="image-20230215190231817"></p><p>在控制器层书写修改员工信息的方法</p><p><strong>控制器类 EmployeeController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据Id修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取Session当前用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置修改时间</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    <span class="comment">// 设置修改用户</span></span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JSON数据在处理16位以上的数字时会丢失精度</p></blockquote><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215191826144.png" alt="image-20230215191826144"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215191918950.png" alt="image-20230215191918950"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215192233010.png" alt="image-20230215192233010"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215192604426.png" alt="image-20230215192604426"></p><p>对象转换器 JacksonObjectMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebMvcConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展Mvc框架的消息展示器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写父类方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 设置对象转换器，底层使用Jackson将Java对象转换成JSON</span></span><br><span class="line">    messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">// 将上面的消息转换器对象追加到MVC框架的转换器集合中</span></span><br><span class="line">    converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215194018171.png" alt="image-20230215194018171"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230215194029628.png" alt="image-20230215194029628"></p><p>控制器类 EmployeeController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span>(employee != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到对应信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230216090751966.png" alt="image-20230216090751966"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230216090905757.png" alt="image-20230216090905757"></p><ol><li>在实体类中指定字段填入自动填充标识</li></ol><p>Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建一个新类用来处理自动填充的字段</strong></li></ol><p>MyMateObjectHandle.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandle</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Update...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>获取修改员工信息的用户名</strong><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230216093037104.png" alt="image-20230216093037104"></li></ol><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230216093702087.png" alt="image-20230216093702087"></p><ol><li>创建根据线程获取id类</li></ol><p>BaseContext.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyblue.reggie.commen;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前的登录用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建线程数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 线程设置id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 线程获取id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在LogincheckFilter的doFilter方法中调用BaseContext来设置当前登录用户的id</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户已登录</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line"><span class="comment">// 获取id</span></span><br><span class="line">    Long empId= (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"><span class="comment">// 设置当前线程中的id</span></span><br><span class="line">    BaseContext.setCurrentId(empId);</span><br><span class="line"><span class="comment">// 放行</span></span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在自动填充类中获取id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Insert...&quot;</span>);</span><br><span class="line">    log.info(metaObject.toString());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">  <span class="comment">// 获取当前用户id</span></span><br><span class="line">    metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h2><h3 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h3><ol><li><p>创建对应文件（Mapper，Service，实体类和CategoryController.class）</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230216200750709.png" alt="image-20230216200750709"></p></li><li><p>在控制层中设计添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    categoryService.save(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="分页展示"><a href="#分页展示" class="headerlink" title="分页展示"></a>分页展示</h3><p>在开发代码之前，需要梳理一下整个程序的执行过程:</p><ol><li><p>页面发送ajax请求，将分页查询参数(page.pageSize)提交到服务端</p></li><li><p>服务端Controller接收页面提交的数据并调用Service查询数据</p></li><li><p>Service调用Mapper操作数据库，查询分页数据</p></li><li><p>Controller将查询到的分页数据响应给页面</p></li><li><p>页面接收到分页数据并通过ElementUI的Table组件展示到页面上</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/2592691-20220512160317974-925436217.png" alt="image"></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 分页构造器</span></span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加排序条件，根据sort进行排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line">    <span class="comment">// 进行分页查询</span></span><br><span class="line">    categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p><strong>删除数据</strong></p><p><strong>需求分析</strong></p><p>在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span>&#123;</span><br><span class="line">    categoryService.remove(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加菜品和套餐的各类文件（Mapper，Service，实体类）</li></ul><p><strong>在CategoryService中添加删除方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void remove(Long id);</span><br></pre></td></tr></table></figure><p><strong>在CategoryServiceImpl中实现删除方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加查询条件，根据分类id进行查询</span></span><br><span class="line">    dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">    <span class="comment">// 查询当前分类是否关联了某个菜品，如果已经关联，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 已经关联菜品，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类项关联菜品，无法删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询当前分类是否关联了某个套餐，如果已经关联，抛出异常</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line">    <span class="type">long</span> <span class="variable">count1</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(count1 &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类项关联套餐，无法删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除分类</span></span><br><span class="line">    <span class="built_in">super</span>.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义异常类CustomException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在全局异常处理器<strong>GlobalExceptionHandler.class</strong>添加</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行异常处理方法</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(<span class="title class_">CustomException</span>.<span class="property">class</span>)</span><br><span class="line"><span class="keyword">public</span> R&lt;<span class="title class_">String</span>&gt; <span class="title function_">exceptionHandler</span>(<span class="params">CustomException ex</span>)&#123;</span><br><span class="line">    log.<span class="title function_">error</span>(ex.<span class="title function_">getMessage</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.<span class="title function_">error</span>(ex.<span class="title function_">getMessage</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类信息成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜品管理"><a href="#菜品管理" class="headerlink" title="菜品管理"></a>菜品管理</h2><h3 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217095038882.png" alt="image-20230217095038882"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217095006797.png" alt="image-20230217095006797"></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ol><li>在前端页面放入文件上传的页面</li></ol><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217111147830-16766035196861.png" alt="image-20230217111147830"></p><ol start="2"><li><p>在过滤器中放行该页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中配置需要转存的图片地址()</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\img\</span></span><br></pre></td></tr></table></figure></li><li><p>创建控制层文件CommonController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义需要转存到的文件路径</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会被删除</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 获取文件名后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">// 使用UUID重新生成文件名，防止文件名重复造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + substring;</span><br><span class="line">        <span class="comment">// 如果文件目录不存在，则创建目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">// 判断目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            <span class="comment">// 创建目录</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将临时文件转存到指定位置（文件路径 + 文件名）</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 向服务端返回文件名</span></span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217095607722.png" alt="image-20230217095607722"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217111744622.png" alt="image-20230217111744622"></p><p>在CommonController.class中设计文件下载方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 输入流，读取文件内容</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出流，通过输出流将文件写回到浏览器</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置文件相应格式</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>( (len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h3><h4 id="初始加载"><a href="#初始加载" class="headerlink" title="初始加载"></a>初始加载</h4><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217145832687.png" alt="image-20230217145832687"></p><blockquote><p>一进入新增菜品页面浏览器会发送一个请求<code>http://localhost:8080/category/list?type=1</code>,是为了从数据库加载菜品分类数据</p></blockquote><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217152324374.png" alt="image-20230217152324374"></p><p>请求是在category路径下，因此需要在菜品分类的类中响应请求</p><p>CategoryController.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123; <span class="comment">// 获取菜品分类集合</span></span><br><span class="line">    <span class="comment">// 条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper  = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加条件</span></span><br><span class="line">    queryWrapper.eq(category.getType() != <span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByAsc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新增菜品-1"><a href="#新增菜品-1" class="headerlink" title="新增菜品"></a>新增菜品</h4><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217150847316.png" alt="image-20230217150847316"></p><blockquote><p>由于Dish实体类中没有falvors属性，无法通过封装一个类来传递参数，因此需要另一个数据传输对象（DTO）来存放新增数据</p></blockquote><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217154822849.png" alt="image-20230217154822849"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217154741273.png" alt="image-20230217154741273"></p><ol><li>创建一个新包dto，导入DishDao</li></ol><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217161039112.png" alt="image-20230217161039112"></p><p>DishDto.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收口味数据</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在DishService中创建同时新增Dish和DIshFlavor两个表中的数据的方法</p><p>DishServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品，同时保存对应的口味数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">// 同时操作两个两个表用事务控制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存菜品的基本数据</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 菜品口味</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        flavors = flavors.stream().map((item) -&gt;&#123;</span><br><span class="line">           item.setDishId(dishId);</span><br><span class="line">           <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 保存菜品口味数据到菜品口味表</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在DishController.java中设计添加菜品的方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dish&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line"></span><br><span class="line">        dishService.saveWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菜品信息分页查询"><a href="#菜品信息分页查询" class="headerlink" title="菜品信息分页查询"></a>菜品信息分页查询</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217164355771.png" alt="image-20230217164355771"></p><p>DishController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品信息分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造分页器对象</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加过滤条件</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Dish::getName,name);</span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line">    <span class="comment">//执行分页查询</span></span><br><span class="line">    dishService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230217193627518.png" alt="image-20230217193627518"></p><h4 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h4><ol><li>在DishService中创建根据id查找对应菜品类的方法，并在Impl中重写</li></ol><p>DishServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 查询菜品基本信息，从dish查询</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">  <span class="comment">// 复制类信息</span></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前菜品的口味信息，从dish_Flavor表查询</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// 查找口味信息与当前菜品id一致的对象</span></span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dish.getId());</span><br><span class="line">  <span class="comment">// 加入集合</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">    dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在DishController中设计回显方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123; <span class="comment">// 根据id获取dish对象</span></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><blockquote><p>思路：Dish（菜品）表信息可以直接修改，DishFlavor（口味）中的信息可以全部删除再重新添加</p></blockquote><ol><li><p>在DishService中创建修改信息的方法updateWithFlavor,用于重写口味数据,并在DishServiceImpl中重写方法</p><p>DishServiceImpl.java</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">// 修改两个表的数据需要用事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">// 更新菜品表</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理当前菜品的口味数据 Dish_Flavor表的delete操作</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line">    dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加当前提交 Dish_Flavor表的插入操作</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">    flavors = flavors.stream().map((item) -&gt;&#123;</span><br><span class="line">        item.setDishId(dishDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在DishController中设计更新数据的方法</p><p>DishController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line"></span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h2><h3 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218090414231.png" alt="image-20230218090414231"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218090755778.png" alt="image-20230218090755778"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218092954784.png" alt="image-20230218092954784"></p><ol><li>将菜品对应信息展示在列表中，服务器请求为（<code>http://localhost:8080/dish/list?categoryId=1397844263642378242</code>）</li></ol><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218093503844.png" alt="image-20230218093503844"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218093559256.png" alt="image-20230218093559256"></p><p>在DIshController中设计展示菜品信息方法</p><p>DishController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造查询条件对象</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">// 查询菜品状态 1 起售 0 停售</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存新增套餐"><a href="#保存新增套餐" class="headerlink" title="保存新增套餐"></a>保存新增套餐</h3><blockquote><p> 提交请求为<code>http://localhost:8080/setmeal</code></p><p>需求：需要同时操作两张表setmeal（套餐表）和setmeal_dish（套餐菜品表）</p></blockquote><ol><li><p>在SetmealService定义一个操作表的方法save并在Impl中重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealMapper, Setmeal&gt; <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDIshService setmealDIshService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐，同时保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">// 操作多个表，事务管理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存套餐基本信息，操作setmeal表，执行insert操作</span></span><br><span class="line">        <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">        setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setSetmealId(setmealDto.getId());</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存套餐和菜品的关联信息，操作setmeal_dish</span></span><br><span class="line">        setmealDIshService.saveBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在SetmealController中设计保存表的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDIshService setmealDIshService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;套餐信息:&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line">        setmealService.saveWithDish(setmealDto);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="套餐信息分页展示"><a href="#套餐信息分页展示" class="headerlink" title="套餐信息分页展示"></a>套餐信息分页展示</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218105034281.png" alt="image-20230218105034281"></p><p>请求方式<code>http://localhost:8080/setmeal/page?page=1&amp;pageSize=10&amp;name=123</code></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218105203388.png" alt="image-20230218105203388"></p><p>在SetmealControllerh中设计页面展示方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    <span class="comment">// 排序条件,根据更新时间降序排列</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        <span class="comment">// 对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(item, setmealDto);</span><br><span class="line">        <span class="comment">// 分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">// 根据分类id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 分类名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(dtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218111034399.png" alt="image-20230218111034399"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218111357075.png" alt="image-20230218111357075"></p><p>​</p><h1 id="用户端开发"><a href="#用户端开发" class="headerlink" title="用户端开发"></a>用户端开发</h1><h2 id="短信验证登录"><a href="#短信验证登录" class="headerlink" title="短信验证登录"></a>短信验证登录</h2><blockquote><p>本案例使用阿里云的短信服务</p></blockquote><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218150747084.png" alt="image-20230218150747084"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218151349931.png" alt="image-20230218151349931"></p><p>导入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218152117571.png" alt="image-20230218152117571"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230218152415258.png" alt="image-20230218152415258"></p><p>在过滤器中设计手机端登录验证，如果用户未登录，则跳转登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.手机端 判断登录状态，如果已经登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户ID为:&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在UserController中设计发送验证码的方法（请求地址：<code>http://localhost:8080/user/sendMsg</code>）</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219100943089.png" alt="image-20230219100943089"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送手机验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotEmpty(phone))&#123;</span><br><span class="line">            <span class="comment">// 生成随机4位验证码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>,code);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用阿里云提供的短信服务API完成短信发送</span></span><br><span class="line">          <span class="comment">//   SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span></span><br><span class="line">          </span><br><span class="line">            <span class="comment">// 将生成的验证码保存到Session</span></span><br><span class="line">            session.setAttribute(phone,code);</span><br><span class="line">            <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码发送成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在UserController中设计登录校验的方法</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219101012295.png" alt="image-20230219101012295"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">// 获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从Session中获取保存的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行验证码的比对（Session和页面的验证码）</span></span><br><span class="line">    <span class="keyword">if</span>(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果能够对比成功，说明登录成功</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断当前手机号是否为新用户，如果是新用户自动完成注册</span></span><br><span class="line">        queryWrapper.eq(User::getPhone,phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果用户不存在，则直接创建新用户，在数据库中添加用户</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            user.setStatus(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户地址簿功能开发"><a href="#用户地址簿功能开发" class="headerlink" title="用户地址簿功能开发"></a>用户地址簿功能开发</h2><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219101801227.png" alt="image-20230219101801227"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219101916569.png" alt="image-20230219101916569"></p><p>设计用户地址簿控制层的方法</p><p>AddressBookController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址簿管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addressBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        addressBookService.save(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        wrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 0 where user_id = ?</span></span><br><span class="line">        addressBookService.update(wrapper);</span><br><span class="line"></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 1 where id = ?</span></span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定用户的全部地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="literal">null</span> != addressBook.getUserId(), AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">        queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? order by update_time desc</span></span><br><span class="line">        <span class="keyword">return</span> R.success(addressBookService.list(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜品展示"><a href="#菜品展示" class="headerlink" title="菜品展示"></a>菜品展示</h2><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219111321856.png" alt="image-20230219111321856"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219112708048.png" alt="image-20230219112708048"></p><blockquote><p>由于展示菜品类型信息和套餐信息所发送的请求不同，因此需要编写两个方法进行展示<br>菜品类型请求：<code>http://localhost:8080/dish/list?categoryId=1397844263642378242&amp;status=1</code></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219151148105.png" alt="image-20230219151148105">套餐类型请求：<code>http://localhost:8080/setmeal/list?categoryId=1413386191767674881&amp;status=1</code><br><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219151215662.png" alt="image-20230219151215662"></p></blockquote><h3 id="菜品类型展示"><a href="#菜品类型展示" class="headerlink" title="菜品类型展示"></a>菜品类型展示</h3><blockquote><p>由于用户端进行菜品展示需要显示菜品的口味信息，但原先的菜品展示并没有加入口味信息，因此需要对原有的展示方法进行修改</p></blockquote><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219151529206.png" alt="image-20230219151529206"></p><p>DishController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造查询条件对象</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">// 查询菜品状态 1 起售 0 停售</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId(); <span class="comment">// 分类id</span></span><br><span class="line">        <span class="comment">// 根据id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前菜品id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">        List&lt;DishFlavor&gt; dishFlavors = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">        dishDto.setFlavors(dishFlavors);</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套餐信息展示"><a href="#套餐信息展示" class="headerlink" title="套餐信息展示"></a>套餐信息展示</h3><blockquote><p>之前并没有进行套餐信息的单独展示，因此需要在SetmealController中设计展示方法</p></blockquote><p>SetmealController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h2><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219154455720.png" alt="image-20230219154455720"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219154913939.png" alt="image-20230219154913939"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219155134537.png" alt="image-20230219155134537"></p><p>ShoppingCartController.java</p><blockquote><p>添加到购物车，减少菜品数量，查看购物车，清空购物车</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shoppingCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;购物车数据:&#123;&#125;&quot;</span>,shoppingCart);</span><br><span class="line">        <span class="comment">// 设置用户id,指定是哪个用户进行购物车操作</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(currentId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询当前菜品是否已经在用户的购物车中</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,currentId);</span><br><span class="line">        <span class="keyword">if</span>(dishId != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 添加到购物车的是菜品</span></span><br><span class="line">            queryWrapper.eq(ShoppingCart::getDishId,dishId);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 添加到购物车的是套餐</span></span><br><span class="line">            queryWrapper.eq(ShoppingCart::getSetmealId,shoppingCart.getSetmealId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(cartServiceOne != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果已经存在，就在原先数量基础上加一(更新操作)</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">            cartServiceOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">            shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果不存在，则添加到购物车中，数量默认是1</span></span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">            shoppingCartService.save(shoppingCart);</span><br><span class="line">            cartServiceOne = shoppingCart;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(cartServiceOne);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减少菜品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">sub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(shoppingCart.getDishId() != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 该菜品为单独菜品</span></span><br><span class="line">            queryWrapper.eq(ShoppingCart::getDishId,shoppingCart.getDishId());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 该菜品为套餐</span></span><br><span class="line">            queryWrapper.eq(shoppingCart.getSetmealId() != <span class="literal">null</span>,ShoppingCart::getSetmealId,shoppingCart.getSetmealId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取菜品或套餐信息</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">            cartServiceOne.setNumber(number - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 如果菜品数量小于等于0则直接删除该菜品信息</span></span><br><span class="line">            <span class="keyword">if</span>(cartServiceOne.getNumber() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                shoppingCartService.removeById(cartServiceOne);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(cartServiceOne);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> R.success(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">        shoppingCartService.remove(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219170910487.png" alt="image-20230219170910487"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219171041983.png" alt="image-20230219171041983"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219171053093.png" alt="image-20230219171053093"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219171222546.png" alt="image-20230219171222546"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219171329651.png" alt="image-20230219171329651"></p><h3 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230219171538682.png" alt="image-20230219171538682"></p><h4 id="创建Controller框架"><a href="#创建Controller框架" class="headerlink" title="创建Controller框架"></a>创建Controller框架</h4><p>OrderController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户下单操作"><a href="#用户下单操作" class="headerlink" title="用户下单操作"></a>用户下单操作</h4><p>OrderController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户下单操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;订单数据：&#123;&#125;&quot;</span>,orders);</span><br><span class="line">    orderService.submit(orders);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户查询订单信息"><a href="#用户查询订单信息" class="headerlink" title="用户查询订单信息"></a>用户查询订单信息</h4><blockquote><p>由于前端并没有完成用户数据的传递，因此获取订单信息不仅需要用户信息，而且需要订单表的信息，所以需要使用dto进行封装操作。</p></blockquote><p>创建OrderDto.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDto</span> <span class="keyword">extends</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderDetail&gt; orderDetails;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询用户订单信息</p><p>OrderController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户订单信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        <span class="comment">//分页构造器对象</span></span><br><span class="line">        Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;OrderDto&gt; pageDto = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        <span class="comment">//构造条件查询对象</span></span><br><span class="line">        LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Orders::getUserId,BaseContext.getCurrentId());</span><br><span class="line">        <span class="comment">//这里是直接把当前用户分页的全部结果查询出来，要添加用户id作为查询条件，否则会出现用户可以查询到其他用户的订单情况</span></span><br><span class="line">        <span class="comment">//添加排序条件，根据更新时间降序排列</span></span><br><span class="line">        queryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line">        orderService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过OrderId查询对应的OrderDetail</span></span><br><span class="line">        LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper2 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对OrderDto进行需要的属性赋值</span></span><br><span class="line">        List&lt;Orders&gt; records = pageInfo.getRecords();</span><br><span class="line">        List&lt;OrderDto&gt; orderDtoList = records.stream().map((item) -&gt;&#123;</span><br><span class="line">            <span class="type">OrderDto</span> <span class="variable">orderDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDto</span>();</span><br><span class="line">            <span class="comment">//此时的orderDto对象里面orderDetails属性还是空 下面准备为它赋值</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> item.getId();<span class="comment">//获取订单id</span></span><br><span class="line">            List&lt;OrderDetail&gt; orderDetailList = <span class="built_in">this</span>.getOrderDetailListByOrderId(orderId);</span><br><span class="line">            BeanUtils.copyProperties(item,orderDto);</span><br><span class="line">            <span class="comment">//对orderDto进行OrderDetails属性的赋值</span></span><br><span class="line">            orderDto.setOrderDetails(orderDetailList);</span><br><span class="line">            <span class="keyword">return</span> orderDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用dto的分页有点难度.....需要重点掌握</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo,pageDto,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">        pageDto.setRecords(orderDtoList);</span><br><span class="line">        <span class="keyword">return</span> R.success(pageDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽离的一个方法，通过订单id查询订单明细，得到一个订单明细的集合</span></span><br><span class="line">    <span class="comment">//这里抽离出来是为了避免在stream中遍历的时候直接使用构造条件来查询导致eq叠加，从而导致后面查询的数据都是null</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;OrderDetail&gt; <span class="title function_">getOrderDetailListByOrderId</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(OrderDetail::getOrderId, orderId);</span><br><span class="line">        List&lt;OrderDetail&gt; orderDetailList = orderDetailService.list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> orderDetailList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后台查询订单信息"><a href="#后台查询订单信息" class="headerlink" title="后台查询订单信息"></a>后台查询订单信息</h4><p>OrderController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台查询订单明细</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beginTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String number,String beginTime,String endTime)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器对象</span></span><br><span class="line">    Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    <span class="comment">//构造条件查询对象</span></span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加查询条件  动态sql  字符串使用StringUtils.isNotEmpty这个方法来判断</span></span><br><span class="line">    <span class="comment">//这里使用了范围查询的动态SQL，这里是重点！！！</span></span><br><span class="line">    queryWrapper.like(number!=<span class="literal">null</span>,Orders::getNumber,number)</span><br><span class="line">            .gt(StringUtils.isNotEmpty(beginTime),Orders::getOrderTime,beginTime)</span><br><span class="line">            .lt(StringUtils.isNotEmpty(endTime),Orders::getOrderTime,endTime);</span><br><span class="line"></span><br><span class="line">    orderService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h1><h2 id="缓存短信验证码"><a href="#缓存短信验证码" class="headerlink" title="缓存短信验证码"></a>缓存短信验证码</h2><ol><li><p>导入redis坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在配置文件中导入redis对应配置<br>application.yml</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># redis相关配置</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">120.25</span><span class="number">.248</span><span class="number">.122</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222091800340.png" alt="image-20230222091800340"></p><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @PostMapping(&quot;/sendMsg&quot;) : 将验证码保存到redis（key，value，time）</span></span><br><span class="line">redisTemplate.opsForValue().set(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @PostMapping(&quot;/login&quot;) : 从Redis获取保存的验证码</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br></pre></td></tr></table></figure><h2 id="缓存菜品数据"><a href="#缓存菜品数据" class="headerlink" title="缓存菜品数据"></a>缓存菜品数据</h2><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222101945718.png" alt="image-20230222101945718"></p><p>DishController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; dishDtoList = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态构造key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_&quot;</span> + dish.getStatus();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先从redis中获取缓存数据</span></span><br><span class="line">        dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(dishDtoList != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果存在，直接返回，无需查询数据库</span></span><br><span class="line">            <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 查询数据库</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造查询条件对象</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">        <span class="comment">// 查询菜品状态 1 起售 0 停售</span></span><br><span class="line">        queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 添加排序条件</span></span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(item,dishDto);</span><br><span class="line"></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId(); <span class="comment">// 分类id</span></span><br><span class="line">            <span class="comment">// 根据id查询分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前菜品id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            lambdaQueryWrapper.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">            List&lt;DishFlavor&gt; dishFlavors = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">            dishDto.setFlavors(dishFlavors);</span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不存在，需要查询数据库，将查询的菜品数据缓存到redis(存活时间为60分钟)</span></span><br><span class="line">        redisTemplate.opsForValue().set(key,dishDtoList,<span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清理缓存数据"><a href="#清理缓存数据" class="headerlink" title="清理缓存数据"></a>清理缓存数据</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222104653430.png" alt="image-20230222104653430"></p><p>DishController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据同理    </span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line"></span><br><span class="line">        dishService.updateWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清理所有菜品的缓存数据</span></span><br><span class="line"><span class="comment">//        Set keys = redisTemplate.keys(&quot;dish_*&quot;);</span></span><br><span class="line"><span class="comment">//        redisTemplate.delete(keys);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清理某个分类的菜品缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">keys</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">        redisTemplate.delete(keys);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="SpringCache"><a href="#SpringCache" class="headerlink" title="SpringCache"></a>SpringCache</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222112940131.png" alt="image-20230222112940131"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222113050331.png" alt="image-20230222113050331"></p><p>保存缓存数据（默认以Map形式保存在内存中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CachePut :将方法返回值放入缓存</span></span><br><span class="line"><span class="comment"> * value:缓存的名称，每个缓存的名称下面可以有多个key</span></span><br><span class="line"><span class="comment"> * key:缓存的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CachePut(value = &quot;userCache&quot;,key = &quot;#user.id&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除缓存数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0&quot;)</span></span><br><span class="line"><span class="comment">// @CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0]&quot;)</span></span><br><span class="line"><span class="comment">// @CacheEvict(value = &quot;userCache&quot;,key = &quot;#id&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    userService.removeById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0.id&quot;)</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userService.updateById(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取缓存数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取单个数据，数据不为空时才缓存  </span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;,condition = &quot;#result != null)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全部数据</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#user.id + &#x27;_&#x27; + #user.name&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(user.getId() != <span class="literal">null</span>,User::getId,user.getId());</span><br><span class="line">        queryWrapper.eq(user.getName() != <span class="literal">null</span>,User::getName,user.getName());</span><br><span class="line">        List&lt;User&gt; list = userService.list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="在项目中引用Spring-Cache"><a href="#在项目中引用Spring-Cache" class="headerlink" title="在项目中引用Spring Cache"></a>在项目中引用Spring Cache</h3><h4 id="缓存套餐数据"><a href="#缓存套餐数据" class="headerlink" title="缓存套餐数据"></a>缓存套餐数据</h4><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222150913266.png" alt="image-20230222150913266"></p><ol><li>在application.yml中设置缓存配置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 设置Redis和缓存配置</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">120.25</span><span class="number">.248</span><span class="number">.122</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Zzp1234-</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">cache:</span></span><br><span class="line">      <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">time_to_live:</span> <span class="number">180000</span> <span class="comment"># 设置缓存过期时间</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure><ol start="2"><li><p>在启动类上加入启用缓存注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 开启SpringCache注解方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieTakeOut01Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieTakeOut01Application.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在套餐控制器中加入缓存注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据条件查询数据</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;,key = &quot;#setmeal.categoryId + &#x27;_&#x27; + #setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>让返回类R序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>在删除和新增功能使用缓存删除缓存数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// allEntries：删除value值为setmealCache的全部缓存数据</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h2><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222154231486.png" alt="image-20230222154231486"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222154452745.png" alt="image-20230222154452745"></p><h3 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222154638138.png" alt="image-20230222154638138"></p><p>准备两台服务器（主库和从库）</p><p>主库配置：</p><ol><li><p>从库的&#x2F;etc&#x2F;my.cof中启用mysql日志和服务器id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">log-bin=mysql-bin # 必选，启用mysql日志</span><br><span class="line">server-id=100 # 必选，设置服务器id</span><br></pre></td></tr></table></figure></li><li><p>重启服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222155910467.png" alt="image-20230222155910467"></p></li></ol><p>从MySQL5.7升级到8.0后首先会发现在创建用户和授权大大不同；</p><ol><li><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> xiaoming IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;1234&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>赋予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;xiaoming&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222161335663.png" alt="image-20230222161335663"></p><p>从库配置：</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222161936186.png" alt="image-20230222161936186"></p><p>重启mysql服务</p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222162009371.png" alt="image-20230222162009371"></p><p>mysql配置文件位置(Ubuntu20.04):</p><blockquote><p>&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</p></blockquote><p>修改<code>远程连接</code>和<code>服务器id</code> ,并重启mysql服务 <code>systemctl restart mysql</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind-address = 0.0.0.0</span><br><span class="line">server-id = 2</span><br></pre></td></tr></table></figure><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222202418644.png" alt="image-20230222202418644"></p><h3 id="读写分离案例"><a href="#读写分离案例" class="headerlink" title="读写分离案例"></a>读写分离案例</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222203014224.png" alt="image-20230222203014224"></p><h4 id="Sharding-JDBC"><a href="#Sharding-JDBC" class="headerlink" title="Sharding-JDBC"></a>Sharding-JDBC</h4><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222203259265.png" alt="image-20230222203259265"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230222204006583.png" alt="image-20230222204006583"></p><h2 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h2><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230223101630235.png" alt="image-20230223101630235"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230223102018264.png" alt="image-20230223102018264"></p><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230223102111710.png" alt="image-20230223102111710"></p><h3 id="YAPI"><a href="#YAPI" class="headerlink" title="YAPI"></a>YAPI</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230223102310822.png" alt="image-20230223102310822"></p><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p><img src="/2023/02/14/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/image-20230223103242547.png" alt="image-20230223103242547"></p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>导入相关配置（WebMvcConfig）</p><p>@EnableSwagger2</p><p>@EnableKnife4j</p></li></ol><h1 id="项目补充"><a href="#项目补充" class="headerlink" title="项目补充"></a>项目补充</h1><p><a href="https://blog.csdn.net/weixin_53142722/article/details/124371940">https://blog.csdn.net/weixin_53142722/article/details/124371940</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus</title>
      <link href="/2023/02/13/MybatisPlus/"/>
      <url>/2023/02/13/MybatisPlus/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>MybatisPlus(简称MP)是基于mybatis框架上开发的增强型工具，旨在简化开发、提高效率</p></blockquote><p><img src="/2023/02/13/MybatisPlus/image-20230214084058281.png" alt="image-20230214084058281"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>创建SpringBoot项目，导入mybatisSql的依赖包</p></li><li><p>导入mp坐标和druid坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建实体类user和dao类UserDao</p><p>UserDao.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Mapper注解，类只需继承BaseMapper即可 </span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>书写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyBatisPlusDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自动注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// mp直接帮我们创建好了各类CRUD方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="标准CRUD操作"><a href="#标准CRUD操作" class="headerlink" title="标准CRUD操作"></a>标准CRUD操作</h2><p><img src="/2023/02/13/MybatisPlus/image-20230214084237369.png" alt="image-20230214084237369"></p><p><img src="/2023/02/13/MybatisPlus/image-20230214091428896.png" alt="image-20230214091428896"></p><p><strong>lombok简化实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Data包含@Setter,@Getter,@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="MP分页功能"><a href="#MP分页功能" class="headerlink" title="MP分页功能"></a>MP分页功能</h4><p><img src="/2023/02/13/MybatisPlus/image-20230214092435748.png" alt="image-20230214092435748"></p><p><img src="/2023/02/13/MybatisPlus/image-20230214092457082.png" alt="image-20230214092457082"></p><p><img src="/2023/02/13/MybatisPlus/image-20230214092515305.png" alt="image-20230214092515305"></p><h4 id="条件查询的三种格式"><a href="#条件查询的三种格式" class="headerlink" title="条件查询的三种格式"></a>条件查询的三种格式</h4><p><img src="/2023/02/13/MybatisPlus/image-20230214092723872.png" alt="image-20230214092723872"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 查询年龄小于18的 </span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 方式一：按条件查询</span></span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">queryWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">        queryWrapper.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        List&lt;User&gt; users = userDao.selectList(queryWrapper);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 方式二：lambda格式按条件查询</span></span><br><span class="line">      QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.lambda().lt(User::getAge,<span class="number">18</span>);</span><br><span class="line">        List&lt;User&gt; users = userDao.selectList(queryWrapper);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 方式三：</span></span><br><span class="line">      LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">      lqw.lt(User::getAge,<span class="number">18</span>);</span><br><span class="line">      List&lt;User&gt; users = userDao.selectList(lqw);</span><br><span class="line">      System.out.println(users);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 多条件</span></span><br><span class="line">      LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">// 10~18 lqw.lt(User::getAge,18).gt(User::getAge,10);</span></span><br><span class="line">      lqw.lt(User::getAge,<span class="number">18</span>);</span><br><span class="line">      qw.gt(User::getAge,<span class="number">10</span>);</span><br><span class="line">      <span class="comment">// 小于10或大于30 </span></span><br><span class="line">      lqw.lt(User::getAge,<span class="number">10</span>).or().gt(User::getAge,<span class="number">18</span>);</span><br><span class="line">      List&lt;User&gt; users = userDao.selectList(lqw);</span><br><span class="line">      System.out.println(users);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="条件查询Null判定"><a href="#条件查询Null判定" class="headerlink" title="条件查询Null判定"></a>条件查询Null判定</h4><blockquote><p>如果数据为null则不执行 </p></blockquote><p><img src="/2023/02/13/MybatisPlus/image-20230214095938873.png" alt="image-20230214095938873"></p><h4 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h4><blockquote><p>只查看某一些字段内容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 只看id和username字段</span></span><br><span class="line">lqw.select(User::getId,User::getUsername);</span><br><span class="line">lqw.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = userDao.selectList(lqw);</span><br><span class="line">System.out.println(users);</span><br></pre></td></tr></table></figure><p>查询数据总数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 查询数据数</span></span><br><span class="line">lqw.select(<span class="string">&quot;count(*) as count&quot;</span>);</span><br><span class="line"><span class="comment">// 分组查询</span></span><br><span class="line">lqw.groupBy(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; users = userDao.selectMaps(lqw);</span><br><span class="line">List&lt;User&gt; users = userDao.selectList(lqw);</span><br><span class="line">System.out.println(users);</span><br></pre></td></tr></table></figure><h4 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h4><blockquote><p>官网条件查询<br><a href="https://mybatis.plus/guide/wrapper.html">https://mybatis.plus/guide/wrapper.html</a></p></blockquote><blockquote><p>eq 相当于 equals,selectOne查询一一条数据</p></blockquote><p><img src="/2023/02/13/MybatisPlus/image-20230214100947918.png" alt="image-20230214100947918"></p><p><img src="/2023/02/13/MybatisPlus/image-20230214101438609.png" alt="image-20230214101438609"></p><h4 id="字段映射"><a href="#字段映射" class="headerlink" title="字段映射"></a>字段映射</h4><blockquote><p>@TableField 映射名称，或表名原表中是否存在该数据</p></blockquote><p><img src="/2023/02/13/MybatisPlus/image-20230214102258863.png" alt="image-20230214102258863"></p><h3 id="ID生成策略"><a href="#ID生成策略" class="headerlink" title="ID生成策略"></a>ID生成策略</h3><p><img src="/2023/02/13/MybatisPlus/image-20230214102545829.png" alt="image-20230214102545829"></p><p><img src="/2023/02/13/MybatisPlus/image-20230214103251680.png" alt="image-20230214103251680"></p><p><strong>雪花算法</strong></p><p><img src="/2023/02/13/MybatisPlus/image-20230214103427697.png" alt="image-20230214103427697"></p><h4 id="全局配置id生成策略"><a href="#全局配置id生成策略" class="headerlink" title="全局配置id生成策略"></a>全局配置id生成策略</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="comment"># 表的映射名称</span></span><br><span class="line">    <span class="attr">table-prefix:</span> <span class="string">tb1_user</span></span><br><span class="line">    <span class="comment"># id生成策略</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span> </span><br></pre></td></tr></table></figure><h3 id="多记录操作"><a href="#多记录操作" class="headerlink" title="多记录操作"></a>多记录操作</h3><p><img src="/2023/02/13/MybatisPlus/image-20230214105238400.png" alt="image-20230214105238400"></p><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p><img src="/2023/02/13/MybatisPlus/image-20230214105448782.png" alt="image-20230214105448782"></p><ol><li>在User实体类使用注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1为逻辑删除</span></span><br><span class="line"><span class="meta">@TableLogic(value = &quot;0&quot; ,delval = &quot;1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><ol start="2"><li>可以在配置中设置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">    <span class="comment"># 逻辑删除标记字段</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="comment">#没有逻辑删除的标识</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment">#已经逻辑删除的标识</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><blockquote><p>防止多数据同时操作同一对象产生异常</p></blockquote><ol><li><p>加入乐观锁的version字段（从0开始）</p></li><li><p>在实体类中加入@version的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></li><li><p>加入拦截器（动态修改Sql语句）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">// 创建拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">      <span class="comment">// 添加乐观锁的拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="去掉banner和输出信息"><a href="#去掉banner和输出信息" class="headerlink" title="去掉banner和输出信息"></a>去掉banner和输出信息</h2><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭spring的banner</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">banner-mode:</span> <span class="string">off</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="comment"># 输出Mp日志信息</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment"># 关闭MP的banner</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在resource下创建logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><blockquote><p> 模板：MyBitsPlus提供<br>数据库相关配置：读取数据库获取信息<br>开发者自定义配置：手工配置</p></blockquote><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码生成器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  velocity模板引擎      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建生成器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        autoGenerator.setDataSource(datasource);</span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2023/02/13/MybatisPlus/image-20230214113826171.png" alt="image-20230214113826171"></p><p><img src="/2023/02/13/MybatisPlus/image-20230214113836486.png" alt="image-20230214113836486"></p><p><img src="/2023/02/13/MybatisPlus/image-20230214113844204.png" alt="image-20230214113844204"></p><p><img src="/2023/02/13/MybatisPlus/image-20230214113851247.png" alt="image-20230214113851247"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/02/13/SpringBoot/"/>
      <url>/2023/02/13/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>SpringBoot是由privotal团队开发的全新框架，其设计目的是用来简化Spring应用的<code>初始搭建</code>以及<code>简化开发过程</code>。</p></blockquote><h3 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h3><blockquote><p>带有starter为起步依赖</p></blockquote><p><img src="/2023/02/13/SpringBoot/image-20230213104354212.png" alt="image-20230213104354212"></p><p><img src="/2023/02/13/SpringBoot/image-20230213104315462.png" alt="image-20230213104315462"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>切换SpringBoot服务器源</p><blockquote><p><strong><a href="https://start.aliyun.com/">https://start.aliyun.com/</a></strong></p></blockquote><ol><li>创建SpringBoot项目</li></ol><p>   <img src="/2023/02/13/SpringBoot/image-20230213102052642.png" alt="image-20230213102052642"></p><p>   勾选SpringWeb，导入web依赖项</p><p>   <img src="/2023/02/13/SpringBoot/image-20230213102307390.png" alt="image-20230213102307390"></p><ol start="2"><li><p>在创建的目录下创建controller控制层，书写简单的控制层代码</p><p><img src="/2023/02/13/SpringBoot/image-20230213102215301.png" alt="image-20230213102215301"></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">springboot_controller</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot程序快速启动"><a href="#SpringBoot程序快速启动" class="headerlink" title="SpringBoot程序快速启动"></a>SpringBoot程序快速启动</h2><ol><li><p>对SpringBoot程序打包</p><p><img src="/2023/02/13/SpringBoot/image-20230213103116774.png" alt="image-20230213103116774"></p></li><li><p>在jar包目录下执行cmd：</p><blockquote><p>java -jar springboot.jar</p></blockquote></li></ol><p><img src="/2023/02/13/SpringBoot/image-20230213103218123.png" alt="image-20230213103218123"></p><h2 id="辅助功能（切换web服务器）"><a href="#辅助功能（切换web服务器）" class="headerlink" title="辅助功能（切换web服务器）"></a>辅助功能（切换web服务器）</h2><p><img src="/2023/02/13/SpringBoot/image-20230213104550262.png" alt="image-20230213104550262"></p><p><img src="/2023/02/13/SpringBoot/image-20230213105458980.png" alt="image-20230213105458980"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置文件的三种书写格式"><a href="#配置文件的三种书写格式" class="headerlink" title="配置文件的三种书写格式"></a>配置文件的三种书写格式</h3><ul><li><p>直接在自带的文件中修改</p><blockquote><p>在resource下的配置文件中直接设置<code>server.port</code>即可直接生效</p></blockquote><p><img src="/2023/02/13/SpringBoot/image-20230213111827304.png" alt="image-20230213111827304"></p></li><li><p>创建配置文件application.yml</p><blockquote><p>在新建的application.yml中设置server中的port属性（注意格式）</p></blockquote><p><img src="/2023/02/13/SpringBoot/image-20230213112100719.png" alt="image-20230213112100719"></p></li><li><p>创建配置文件application.yaml</p><p><img src="/2023/02/13/SpringBoot/image-20230213112521078.png" alt="image-20230213112521078"></p></li></ul><p><img src="/2023/02/13/SpringBoot/image-20230213112738759.png" alt="image-20230213112738759"></p><p><img src="/2023/02/13/SpringBoot/image-20230213112800200.png" alt="image-20230213112800200"></p><p><img src="/2023/02/13/SpringBoot/image-20230213150448409.png" alt="image-20230213150448409"></p><p><img src="/2023/02/13/SpringBoot/image-20230213150528343.png" alt="image-20230213150528343"></p><h3 id="Yaml数据读取"><a href="#Yaml数据读取" class="headerlink" title="Yaml数据读取"></a>Yaml数据读取</h3><ul><li>单独读取</li></ul><p><img src="/2023/02/13/SpringBoot/image-20230213152714201.png" alt="image-20230213152714201"></p><ul><li>多数据读取</li></ul><p><img src="/2023/02/13/SpringBoot/image-20230213152746418.png" alt="image-20230213152746418"></p><p><img src="/2023/02/13/SpringBoot/image-20230213152840780.png" alt="image-20230213152840780"></p><p>自定义封装警告</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><p><img src="/2023/02/13/SpringBoot/image-20230213164453373.png" alt="image-20230213164453373"></p><h2 id="多环境启动"><a href="#多环境启动" class="headerlink" title="多环境启动"></a>多环境启动</h2><p><img src="/2023/02/13/SpringBoot/image-20230213153210305.png" alt="image-20230213153210305"></p><h4 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h4><p>在application.yml中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    </span><br><span class="line"><span class="string">---</span> <span class="comment"># 用来分隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span> </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># 生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><h4 id="properties配置"><a href="#properties配置" class="headerlink" title="properties配置"></a>properties配置</h4><ol><li><p>创建多环境文件</p><p><img src="/2023/02/13/SpringBoot/image-20230213160812443.png" alt="image-20230213160812443"></p></li><li><p>分别配置对应的参数（以application-dev.properties为例）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port=80</span></span><br></pre></td></tr></table></figure></li><li><p>在源配置文件application.properties中设置启用对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.profiles.active=pro</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="多环境启动命令格式"><a href="#多环境启动命令格式" class="headerlink" title="多环境启动命令格式"></a>多环境启动命令格式</h4><h5 id="带参数启动SpringBoot"><a href="#带参数启动SpringBoot" class="headerlink" title="带参数启动SpringBoot"></a>带参数启动SpringBoot</h5><p>在打包的目录下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用参数</span></span><br><span class="line">java -jar SpringBoot_Ly-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar --spring.profiles.active=test</span><br><span class="line"><span class="comment">// 使用临时参数修改</span></span><br><span class="line">  java -jar SpringBoot_Ly-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar --spring.profiles.active=test --server.port=<span class="number">88</span></span><br></pre></td></tr></table></figure><h4 id="在Maven设置多环境"><a href="#在Maven设置多环境" class="headerlink" title="在Maven设置多环境"></a>在Maven设置多环境</h4><p><img src="/2023/02/13/SpringBoot/image-20230213163752907.png" alt="image-20230213163752907"></p><p><img src="/2023/02/13/SpringBoot/image-20230213163951596.png" alt="image-20230213163951596"></p><p><img src="/2023/02/13/SpringBoot/image-20230213164031131.png" alt="image-20230213164031131"></p><p><img src="/2023/02/13/SpringBoot/image-20230213164050777.png" alt="image-20230213164050777"></p><h2 id="SpringBoot整合Junit"><a href="#SpringBoot整合Junit" class="headerlink" title="SpringBoot整合Junit"></a>SpringBoot整合Junit</h2><p>需要测试文件与目标文件在同一级目录下</p><p><img src="/2023/02/13/SpringBoot/image-20230213171748540.png" alt="image-20230213171748540"></p><p><img src="/2023/02/13/SpringBoot/image-20230213171835280.png" alt="image-20230213171835280"></p><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><p><img src="/2023/02/13/SpringBoot/image-20230213172054818.png" alt="image-20230213172054818"></p><ol><li><p>创建新模块，导入mybatis和mysql模块</p><p><img src="/2023/02/13/SpringBoot/image-20230213183833912.png" alt="image-20230213183833912"></p></li><li><p>设置数据源参数（application.yml）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/manager</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Zzp1234-</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/13/SpringBoot/image-20230213183950952.png" alt="image-20230213183950952"></p></li><li><p>定义数据层接口与映射配置（Dao层）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from manager.pw_manager where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootMybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetByID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="SpringBoot相关注解"><a href="#SpringBoot相关注解" class="headerlink" title="SpringBoot相关注解"></a>SpringBoot相关注解</h2><h3 id="全局注解"><a href="#全局注解" class="headerlink" title="全局注解"></a>全局注解</h3><ul><li><p><code>@SpringBootApplication</code>：申明让spring boot自动给程序进行必要的配置，这个配置等同于：</p></li><li><p><code>@Configuration </code>，@EnableAutoConfiguration 和 @ComponentScan 三个配置。</p></li><li><p><code>@ResponseBody</code>：表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。</p><blockquote><p>在使用@RequestMapping后，返回值通常解析为跳转路径，加上@esponsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。</p></blockquote></li><li><p><code>@Controller</code>：用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层），一般这个注解在类中，通常方法需要配合注解@RequestMapping。</p></li><li><p><code>@RestController</code>：用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。</p></li><li><p><code>@RequestMapping</code>：提供路由信息，负责URL到Controller中的具体函数的映射。</p></li><li><p><code>@EnableAutoConfiguration</code>：SpringBoot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。</p><blockquote><p>例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性来禁用它们。</p></blockquote></li><li><p><code>@ComponentScan</code>：表示将该类自动发现扫描组件。个人理解相当于，如果扫描到有@Component、@Controller、@Service等这些注解的类，并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类。</p><blockquote><p>我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。可以自动收集所有的Spring组件，包括@Configuration类。我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。如果没有配置的话，Spring Boot会扫描启动类所在包下以及子包下的使用了@Service,@Repository等注解的类。</p></blockquote></li><li><p><code>@Configuration</code>：相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。</p></li><li><p><code>@Import</code>：用来导入其他配置类。</p></li><li><p><code>@ImportResource</code>：用来加载xml配置文件。</p></li><li><p><code>@Service</code>：一般用于修饰service层的组件</p></li><li><p><code>@Repository</code>：使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</p></li><li><p><code>@Component</code>：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p></li><li><p><code>@Qualifier</code>：当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：</p></li><li><p><code>@Resource(name=”name”,type=”type”)</code>：没有括号内内容的话，默认byName。与@Autowired干类似的事。</p></li><li><p><code>@NoArgsConstructor</code>：生成无参的构造方法。<br><code>@AllArgsConstructor</code>：生成该类下全部属性的构造方法。<br><code>@RequiredArgsConstructor</code>：生成该类下被final修饰或者non-null字段生成一个构造方法。</p></li><li><p><code>@EqualsAndHashCode</code>:创建的对象连其父类中的属性也一同比较</p></li><li><p><code>@Accessors</code>:当属性字段在生成 getter 和 setter 方法时，做一些相关的设置。当它可作用于类上时，修饰类中所有字段，当作用于具体字段时，只对该字段有效。</p></li><li></li></ul><h3 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h3><ul><li><p><code>@ControllerAdvice</code>：包含@Component。可以被扫描到。统一处理异常。</p></li><li><p><code>@ExceptionHandler（Exception.class）</code>：用在方法上面表示遇到这个异常就执行以下方法。</p></li></ul><h3 id="局部注解"><a href="#局部注解" class="headerlink" title="局部注解"></a>局部注解</h3><ul><li><p><code>@Inject</code>：等价于默认的@Autowired，只是没有required属性；</p></li><li><p><code>@AutoWired</code>：自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required&#x3D;false）时，就算找不到bean也不报错。</p></li><li><p><code>@Bean</code>:相当于XML中的Bean,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p></li><li><p><code>@Value</code>：注入Spring boot application.properties配置的属性的值。</p></li><li><p><code>@Resource</code>:java自己内部的注解，与<code>@AutoWired</code>类似</p></li><li><p><code>@TableLogic</code>:表示逻辑删除</p></li></ul><blockquote><p>增加注解后调用BaseMapper的deleteById(id)或者IService的removeById(id)，是逻辑删除。如果没有增加该注解，是真删除。</p><p>@TableLogic(value&#x3D;”原值”,delval&#x3D;”改值”)<br>　value &#x3D; “未删除的值，默认值为0”<br>　delval &#x3D; “删除后的值，默认值为1”</p></blockquote><ul><li><code>@jsonInlcude</code>:一个接口需要过滤掉返回值为null的字段，即值为null的字段不返回，可以在实体类中增加该注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.XXX)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>ALWAYS</td><td>默认值，表示全部序列化</td></tr><tr><td>NON_NULL</td><td>值为null则不序列化，即值为null的字段不返回</td></tr><tr><td>NON_ABSENT</td><td></td></tr><tr><td>NON_EMPTY</td><td>排除字段为空或Optional、AtomicReference引用为空的字段</td></tr><tr><td>NON_DEFAULT</td><td></td></tr><tr><td>CUSTOM</td><td></td></tr><tr><td>USE_DEFAULTS</td><td></td></tr></tbody></table><ul><li><code>@TableId</code>:主键注解，可以驼峰命名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库自增</td></tr><tr><td>NONE</td><td>MP set主键，雪花算法实现</td></tr><tr><td>INPUT</td><td>需要手动赋值</td></tr><tr><td>ASSIGN_ID</td><td>MP分配ID，Long、Integer、String</td></tr><tr><td>ASSIGN_UUID</td><td>分配UUID，String</td></tr></tbody></table><ul><li><code>@JsonProperty</code></li></ul><blockquote><p> @JsonProperty是jackson-databindjar包提供的注解,用于实体类的属性上, 功能是把属性名称转换为另一个名称(即,两个名称都指向同一个变量值)</p><p>关于@JsonProperty注解, 主要是在序列化和反序列化过程中,对实体类属性做的映射,且必须要使用对应jackson包中的工具才可以得到@JsonProperty注解上指定的属性值.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(value = &quot;user_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userId;</span><br></pre></td></tr></table></figure><ol><li>用户实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonProperty(value = &quot;user_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonProperty(value = &quot;user_name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>测试类<ul><li>序列化<br>@JsonProperty注解是jackson提供的,必须要使用对应jar包提供的json转换工具才能得到注解上标识的属性值.</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">    userDTO.setUserId(<span class="string">&quot;0001&quot;</span>);</span><br><span class="line">    userDTO.setUserName(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jackson提供的打印成json字符串</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(userDTO));</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================================&quot;</span>);</span><br><span class="line">    <span class="comment">// fastjson提供的打印成json字符串</span></span><br><span class="line">    System.out.println(JSON.toJSONString(userDTO));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果:</span></span><br><span class="line"><span class="comment">    &#123;&quot;user_id&quot;:&quot;0001&quot;,&quot;user_name&quot;:&quot;李白&quot;&#125;</span></span><br><span class="line"><span class="comment">    ====================================</span></span><br><span class="line"><span class="comment">    &#123;&quot;userId&quot;:&quot;0001&quot;,&quot;userName&quot;:&quot;李白&quot;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>反序列化<br>@Test<br>public void test2() throws IOException {</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// fastjson的反序列化 对于仅仅支持类属性或其驼峰命名属性</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">paramStr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;userId\&quot;:\&quot;0001\&quot;,\&quot;userName\&quot;:\&quot;李白\&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">paramStr2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;user_id\&quot;:\&quot;0001\&quot;,\&quot;user_name\&quot;:\&quot;李白\&quot;&#125;&quot;</span>;</span><br><span class="line">    System.out.println(JSON.parseObject(paramStr, UserDTO.class));</span><br><span class="line">    System.out.println(JSON.parseObject(paramStr2, UserDTO.class));</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jackson 不支持此实体类原有属性的反序列化,因其只通过读取注解上值进行反序列化</span></span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">paramStr3</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;user_id\&quot;:\&quot;0001\&quot;,\&quot;user_name\&quot;:\&quot;李白\&quot;&#125;&quot;</span>;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().readValue(paramStr3.getBytes(),UserDTO.class));</span><br><span class="line">    <span class="comment">// 失败 会报错 com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">paramStr4</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;userId\&quot;:\&quot;0001\&quot;,\&quot;userName\&quot;:\&quot;李白\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@JsonFormat</code></li></ul><blockquote><p>@JsonFormat注解是一个时间格式化注解，用于格式化时间。<br>比如存储在MYSQL中的数据是dateTime类型，将数据获取以后封装到实体类中的时候，就会变成英文的时间格式(Wed Jul 27 02:26:43 CST 2022)，而不是yyyy-MM-dd HH:mm:ss格式的时间(2022-07-27 02:26:43)，@JsonFormat注解就可以解决这个问题。</p></blockquote><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone=&quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br></pre></td></tr></table></figure><h2 id="基于SpringBoot的SSM整合案例"><a href="#基于SpringBoot的SSM整合案例" class="headerlink" title="基于SpringBoot的SSM整合案例"></a>基于SpringBoot的SSM整合案例</h2><p><img src="/2023/02/13/SpringBoot/image-20230213191334381.png" alt="image-20230213191334381"></p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="全局异常管理"><a href="#全局异常管理" class="headerlink" title="全局异常管理"></a>全局异常管理</h4><p>自定义异常类</p><blockquote><p>继承 RuntimeException</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小滴课堂</span></span><br><span class="line"><span class="comment"> * 自定义异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XDException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"><span class="comment">// 异常信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XDException</span><span class="params">(Integer code, String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CustomExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异常处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> JsonData <span class="title function_">handle</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.error(<span class="string">&quot;[ 系统异常 ]&#123;&#125;&quot;</span>,e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( e <span class="keyword">instanceof</span> XDException )&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">XDException</span> <span class="variable">xdException</span> <span class="operator">=</span> (XDException) e;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonData.buildError(xdException.getCode(),xdException.getMsg());</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonData.buildError(<span class="string">&quot;全局异常，未知错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="全局拦截器"><a href="#全局拦截器" class="headerlink" title="全局拦截器"></a>全局拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 不用权限可以访问url    /api/v1/pub/</span></span><br><span class="line"><span class="comment"> * 要登录可以访问url    /api/v1/pri/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    LoginInterceptor <span class="title function_">loginInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截全部</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor()).addPathPatterns(<span class="string">&quot;/api/v1/pri/*/*/**&quot;</span>)</span><br><span class="line">                <span class="comment">//不拦截哪些路径   斜杠一定要加</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/api/v1/pri/user/login&quot;</span>,<span class="string">&quot;/api/v1/pri/user/register&quot;</span>);</span><br><span class="line"></span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h4><blockquote><p>实现HandlerInterceptor方法，重写preHandle、postHandle、afterCompletion方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进入到controller之前的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 获取http头包含的token </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="comment">// 如果http头没取到则从传递的参数中取</span></span><br><span class="line">                token = request.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 如果token不为空，则直接验证token</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JWTUtils.checkJWT(token);</span><br><span class="line">                <span class="keyword">if</span> (claims == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 告诉登录过期，重新登录(将错误json数据传递给前端页面)</span></span><br><span class="line">                    sendJsonMessage(response, JsonData.buildError(<span class="string">&quot;登录失败&quot;</span>));</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="comment">// 获取用户id和姓名</span></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) claims.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) claims.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 将id和姓名保存在request作用域中</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;user_id&quot;</span>, id);</span><br><span class="line">                request.setAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 登录失败</span></span><br><span class="line">            sendJsonMessage(response,JsonData.buildError(<span class="string">&quot;登录过期，重新登录&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应JSON数据给前端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendJsonMessage</span><span class="params">(HttpServletResponse response,Object obj)</span>&#123;</span><br><span class="line">      <span class="comment">// 序列化，将登录失败的信息转换为Json数据传递给前端</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">          <span class="comment">// 设置http响应类型</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">          <span class="comment">// 写入数据</span></span><br><span class="line">            writer.print(objectMapper.writeValueAsString(obj)); </span><br><span class="line">            writer.close();</span><br><span class="line">            response.flushBuffer();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录拦截器的注册和放行路径"><a href="#登录拦截器的注册和放行路径" class="headerlink" title="登录拦截器的注册和放行路径"></a>登录拦截器的注册和放行路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.online_lyclass.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.online_lyclass.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 不用权限可以访问url -- /api/v1/pub</span></span><br><span class="line"><span class="comment"> * 需要登录进行访问url -- /api/v1/pri</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    LoginInterceptor <span class="title function_">loginInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截全部</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor()).addPathPatterns(<span class="string">&quot;/api/v1/pri/*/*/**&quot;</span>);</span><br><span class="line">                <span class="comment">// 排除路径</span></span><br><span class="line">                <span class="comment">//.excludePathPatterns(&quot;/api/v1/pri/user/login&quot;,&quot;/api/v1/pri/user/register&quot;);</span></span><br><span class="line"><span class="comment">// 添加拦截器</span></span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven高级</title>
      <link href="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/"/>
      <url>/2023/02/12/Maven%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="分模块开发意义"><a href="#分模块开发意义" class="headerlink" title="分模块开发意义"></a>分模块开发意义</h2><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212084407978.png" alt="image-20230212084407978"></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>创建Maven模块</p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212091736076.png" alt="image-20230212091736076"></p></li><li><p>书写模块代码</p><blockquote><p>互相引入Maven文件</p></blockquote></li><li><p>通过Maven指令安装模块到本地仓库（install指令）</p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212092230367.png" alt="image-20230212092230367"></p><h3 id="依赖的传递性和冲突性"><a href="#依赖的传递性和冲突性" class="headerlink" title="依赖的传递性和冲突性"></a>依赖的传递性和冲突性</h3></li></ol><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212102218492.png" alt="image-20230212102218492"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212102251067.png" alt="image-20230212102251067"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212103638603.png" alt="image-20230212103638603"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212103712963.png" alt="image-20230212103712963"></p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212105653466.png" alt="image-20230212105653466"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212105721606.png" alt="image-20230212105721606"></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212112109914.png" alt="image-20230212112109914"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212112704015.png" alt="image-20230212112704015"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212112715748.png" alt="image-20230212112715748"><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212112805063.png" alt="image-20230212112805063"><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212112852317.png" alt="image-20230212112852317"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212112914893.png" alt="image-20230212112914893"></p><h3 id="聚合和继承的区别"><a href="#聚合和继承的区别" class="headerlink" title="聚合和继承的区别"></a>聚合和继承的区别</h3><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212113507162.png" alt="image-20230212113507162"></p><h2 id="属性定义和使用"><a href="#属性定义和使用" class="headerlink" title="属性定义和使用"></a>属性定义和使用</h2><blockquote><p>将配置坐标定义为属性，统一修改版本</p></blockquote><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212114342740.png" alt="image-20230212114342740"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212114510247.png" alt="image-20230212114510247"></p><h2 id="资源文件引用属性"><a href="#资源文件引用属性" class="headerlink" title="资源文件引用属性"></a>资源文件引用属性</h2><blockquote><p>以引入jdbc.properties为例</p></blockquote><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212115349279.png" alt="image-20230212115349279"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212115424918.png" alt="image-20230212115424918"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212115436588.png" alt="image-20230212115436588"></p><blockquote><p>可以创建web.xml，无需执行下步</p></blockquote><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212115459519.png" alt="image-20230212115459519"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212115610239.png" alt="image-20230212115610239"></p><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212115904635.png" alt="image-20230212115904635"></p><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230212120106097.png" alt="image-20230212120106097"></p><h2 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h2><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213083231392.png" alt="image-20230213083231392"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213083306602.png" alt="image-20230213083306602"></p><h2 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h2><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213083511178.png" alt="image-20230213083511178"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213084038321.png" alt="image-20230213084038321"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213084452862.png" alt="image-20230213084452862"></p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213084707004.png" alt="image-20230213084707004"></p><h2 id="资源的上传和下载"><a href="#资源的上传和下载" class="headerlink" title="资源的上传和下载"></a>资源的上传和下载</h2><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213085234782.png" alt="image-20230213085234782"></p><ol><li><p>启动nexus</p><blockquote><p>在目录中 nexus.exe &#x2F;run nexus</p></blockquote></li><li><p>进入<code>http://localhost:8081</code>并登录私服</p></li><li><p>在私服中创建两个仓库<code>lyblue-release</code>和<code>lyblue-snapshot</code>(Maven2-hosted)</p></li><li><p>在公共仓库添加成员</p><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213090719412.png" alt="image-20230213090719412"></p></li><li><p>配置访问私服的权限和访问地址</p><blockquote><p>在<code>maven根路径-&gt;conf-&gt;setting.xml</code></p></blockquote><p>在servers中配置私服的访问权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>lyblue-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>lyblue-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在mirror中配置私服的访问路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>发布命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -deploy</span><br></pre></td></tr></table></figure><p><img src="/2023/02/12/Maven%E9%AB%98%E7%BA%A7/image-20230213091720471.png" alt="image-20230213091720471"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2023/02/07/SpringMVC/"/>
      <url>/2023/02/07/SpringMVC/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/02/07/SpringMVC/image-20230207141746622.png" alt="image-20230207141746622"></p><p>Spring版本问题</p><blockquote><p>Spring Framework 5.3.x: JDK 8-17 (expected)<br>Spring Framework 5.2.x: JDK 8-15 (expected)<br>Spring Framework 5.1.x: JDK 8-12<br>Spring Framework 5.0.x: JDK 8-10<br>Spring Framework 4.3.x: JDK 6-8</p></blockquote><p><img src="/2023/02/07/SpringMVC/image-20230208191601276.png" alt="image-20230208191601276"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>项目结构</p><p><img src="/2023/02/07/SpringMVC/image-20230208193418998.png" alt="image-20230208193418998"></p><p><img src="/2023/02/07/SpringMVC/image-20230208194120265.png" alt="image-20230208194120265"></p><ol><li><p>导入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建控制层对象(UserController.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置访问路径为&quot;/user/save&quot;</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前控制器方法请求访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">// 设置当前控制器方法相应内容为当前返回值，无需解析</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springMvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建MVC配置文件(SpringMvcConfig.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.lyblue.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Servlet容器启动配置类，加载Spring环境(ServletContainers.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承AbstractDispatcherServletInitializer，重写方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainers</span>  <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializerAbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载MVC容器配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        context.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置哪些请求归属SpringMVC处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">     <span class="comment">// 所有路径都生效</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载Spring容器配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/07/SpringMVC/image-20230208194428254.png" alt="image-20230208194428254"></p></li></ol><h2 id="Bean的加载配置"><a href="#Bean的加载配置" class="headerlink" title="Bean的加载配置"></a>Bean的加载配置</h2><p><img src="/2023/02/07/SpringMVC/image-20230208200036313.png" alt="image-20230208200036313"></p><p>方式二（排除方式）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.lyblue.controller&quot;,</span></span><br><span class="line"><span class="meta">        excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">          // 以注解方式排除</span></span><br><span class="line"><span class="meta">        type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Controller.class</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/07/SpringMVC/image-20230208200344926.png" alt="image-20230208200344926"></p><p>Cotroller加载层简化开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletInitConfig</span>  <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置Spring配置文件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置SpringMvc配置文件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置Spring处理的访问路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Get请求和Post请求"><a href="#Get请求和Post请求" class="headerlink" title="Get请求和Post请求"></a>Get请求和Post请求</h2><h3 id="Get请求传参"><a href="#Get请求传参" class="headerlink" title="Get请求传参"></a>Get请求传参</h3><p><img src="/2023/02/07/SpringMVC/image-20230208234500380.png" alt="image-20230208234500380"></p><h3 id="Post请求传参"><a href="#Post请求传参" class="headerlink" title="Post请求传参"></a>Post请求传参</h3><p><img src="/2023/02/07/SpringMVC/image-20230208234531712.png" alt="image-20230208234531712"></p><h4 id="Post传入中文乱码问题"><a href="#Post传入中文乱码问题" class="headerlink" title="Post传入中文乱码问题"></a>Post传入中文乱码问题</h4><p>在控制器管理类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletInitConfig</span>  <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"><span class="comment">/* 控制管理器代码</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    protected Class&lt;?&gt;[] getRootConfigClasses() &#123;</span></span><br><span class="line"><span class="comment">        return new Class[]&#123;SpringConfig.class&#125;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    protected Class&lt;?&gt;[] getServletConfigClasses() &#123;</span></span><br><span class="line"><span class="comment">        return new Class[]&#123;SpringMvcConfig.class&#125;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    protected String[] getServletMappings() &#123;</span></span><br><span class="line"><span class="comment">        return new String[]&#123;&quot;/&quot;&#125;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">      <span class="comment">// 创建过滤器</span></span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><blockquote><p>在控制器层设置参数传递的设置</p></blockquote><h3 id="普通参数的传递"><a href="#普通参数的传递" class="headerlink" title="普通参数的传递"></a>普通参数的传递</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/test?name=zhangsan&amp;age=123</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// @RequestParam：为参数绑定请求名称（原名称失效）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String Username, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(Username + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="实体类数据传递"><a href="#实体类数据传递" class="headerlink" title="实体类数据传递"></a>实体类数据传递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/test?username=zhangsan&amp;age=123</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="数组参数传递"><a href="#数组参数传递" class="headerlink" title="数组参数传递"></a>数组参数传递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/test?str=1&amp;str=2</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String[] str)</span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(str));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="集合参数传递"><a href="#集合参数传递" class="headerlink" title="集合参数传递"></a>集合参数传递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/test?str=1&amp;str=2</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; str)</span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="传递JSON数据"><a href="#传递JSON数据" class="headerlink" title="传递JSON数据"></a>传递JSON数据</h3><ol><li><p>导入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在SpringMvc配置文件中导入</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.lyblue.controller&quot;)</span></span><br><span class="line"><span class="comment">// 自动转换JSON数据的支持</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123; &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 装载对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; list)</span>&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/07/SpringMVC/image-20230209120648112.png" alt="image-20230209120648112"></p></li></ol><p><img src="/2023/02/07/SpringMVC/image-20230209120949277.png" alt="image-20230209120949277"></p><h3 id="日期类型参数传递"><a href="#日期类型参数传递" class="headerlink" title="日期类型参数传递"></a>日期类型参数传递</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/test2?date=2020-12-8 20:12:36</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 设置日期传递格式</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam2</span><span class="params">(<span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span> Date date)</span>&#123;</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><blockquote><p>跳转页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>传递JSON数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">commonParam</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">// 将两个user对象添加进集合，返回集合对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setAge(<span class="number">12</span>);</span><br><span class="line">        user1.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(user);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/07/SpringMVC/image-20230209143250448.png" alt="image-20230209143250448"></p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><blockquote><p>表现形式状态转换，访问网络资源的格式</p></blockquote><p><img src="/2023/02/07/SpringMVC/image-20230209143819078.png" alt="image-20230209143819078"></p><p><img src="/2023/02/07/SpringMVC/image-20230209144111329.png" alt="image-20230209144111329"></p><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/users/1</span></span><br><span class="line"><span class="comment">// 绑定id,并限制访问方式为post</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// @PathVariable 该参数从访问路径中取得</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;user save...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="RESTful快速开发"><a href="#RESTful快速开发" class="headerlink" title="RESTful快速开发"></a>RESTful快速开发</h3><p>控制层对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并@Controller和@ResponseBody</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">// 访问主路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">  <span class="comment">// Post方式</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;user save...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><blockquote><p>基于RESTful页面数据交互</p></blockquote><p><img src="/2023/02/07/SpringMVC/image-20230209164144154.png" alt="image-20230209164144154"></p><p><img src="/2023/02/07/SpringMVC/image-20230209164155402.png" alt="image-20230209164155402"></p><p><img src="/2023/02/07/SpringMVC/image-20230209164210085.png" alt="image-20230209164210085"></p><h2 id="SSM整合开发"><a href="#SSM整合开发" class="headerlink" title="SSM整合开发"></a>SSM整合开发</h2><blockquote><p>导入坐标 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/07/SpringMVC/image-20230211092841098.png" alt="image-20230211092841098"></p><h3 id="表现层数据封装"><a href="#表现层数据封装" class="headerlink" title="表现层数据封装"></a>表现层数据封装</h3><blockquote><p>完成操作向前端传递数据，操作码和提示信息</p></blockquote><p><img src="/2023/02/07/SpringMVC/image-20230211092659484.png" alt="image-20230211092659484"></p><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><blockquote><p>运行过程中出翔异常，需要向前端人员提供异常错误信息</p></blockquote><p><img src="/2023/02/07/SpringMVC/image-20230211175805551.png" alt="image-20230211175805551"></p><p><img src="/2023/02/07/SpringMVC/image-20230211180229205.png" alt="image-20230211180229205"></p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>创建异常处理器（可以在业务层创建，并且在SpringMvc配置文件中导入）</p><p><img src="/2023/02/07/SpringMVC/image-20230211211106822.png" alt="image-20230211211106822"></p><h4 id="项目异常分类"><a href="#项目异常分类" class="headerlink" title="项目异常分类"></a>项目异常分类</h4><p><img src="/2023/02/07/SpringMVC/image-20230211213051836.png" alt="image-20230211213051836"></p><h5 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h5><p><img src="/2023/02/07/SpringMVC/image-20230211221000005.png" alt="image-20230211221000005"></p><p><img src="/2023/02/07/SpringMVC/image-20230211221355746.png" alt="image-20230211221355746"><img src="/2023/02/07/SpringMVC/image-20230211221419152.png" alt="image-20230211221419152"></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p><img src="/2023/02/07/SpringMVC/image-20230211230748642.png" alt="image-20230211230748642"></p><p><img src="/2023/02/07/SpringMVC/image-20230211230806872.png" alt="image-20230211230806872"></p><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><p><img src="/2023/02/07/SpringMVC/image-20230211232006874.png" alt="image-20230211232006874"></p><p><img src="/2023/02/07/SpringMVC/image-20230211232117699.png" alt="image-20230211232117699"></p><p><img src="/2023/02/07/SpringMVC/image-20230211232130464.png" alt="image-20230211232130464"></p><p><img src="/2023/02/07/SpringMVC/image-20230211232357573.png" alt="image-20230211232357573"></p><h3 id="拦截器参数"><a href="#拦截器参数" class="headerlink" title="拦截器参数"></a>拦截器参数</h3><p><img src="/2023/02/07/SpringMVC/image-20230211232726746.png" alt="image-20230211232726746"></p><p><img src="/2023/02/07/SpringMVC/image-20230211232815272.png" alt="image-20230211232815272"></p><p><img src="/2023/02/07/SpringMVC/image-20230211232901166.png" alt="image-20230211232901166"></p><h3 id="多拦截器"><a href="#多拦截器" class="headerlink" title="多拦截器"></a>多拦截器</h3><p><img src="/2023/02/07/SpringMVC/image-20230211233142634.png" alt="image-20230211233142634"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2023/02/02/Spring/"/>
      <url>/2023/02/02/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p>官网：<a href="https://spring.io/">https://spring.io/</a><br>Spring提供若干个项目，每个项目用于完成特定的功能</p></blockquote><h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><p>系统架构</p><p><img src="/2023/02/02/Spring/image-20230202100424626.png" alt="image-20230202100424626"></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p><strong>IoC(Inversion of Control)控制反转</strong></p><blockquote><ul><li>使用对象时，由主动new产生对象转换为<code>由外部提供对象</code>，此过程中对象创建控制权由程序内部转移到外部，此思想称为控制反转.</li></ul><p></p></blockquote><blockquote><ul><li>Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的”外部”</li><li>IoC容器负责对象的创建，初始化等一系列的工作，被创建或被管理的对象在IoC容器中统称为<code>Bean</code></li></ul></blockquote><p><strong>DI(Dependency Injection)依赖注入</strong></p><ul><li>在容器中建立Bean与Bean之间依赖关系的整个过程，称之为依赖注入</li></ul><p>目标：充分解耦</p><ul><li>使用IoC容器管理bean(IoC)</li><li>在IoC容器内将有依赖关系的bean进行关系绑定(DI)</li></ul><p>最终效果</p><ul><li>使用对象不仅可以直接从IoC容器中获取，并且获取到的bean已经绑定了所有的依赖关系</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><strong>项目结构</strong></p><p><img src="/2023/02/02/Spring/image-20230203194903360.png" alt="image-20230203194903360"></p><p><img src="/2023/02/02/Spring/image-20230203203329228.png" alt="image-20230203203329228"></p><ol><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置文件（右键-&gt;新建-&gt;xml配置-&gt;Spring配置）</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id调用名称，class为指定类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.service.impl.BookServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>初始化IoC容器：在web中调用bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">app</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="comment">// 获取IoC容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取bean对象</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) context.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DI:配置bean之间的关系</p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- name为配置到的具体的属性，ref为参照的属性（引用）value为传值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bookServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;book save&quot;</span>);</span><br><span class="line">            bookDao.save();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传递具体的bookDao</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230203102114071.png" alt="image-20230203102114071"></p></li></ol><h2 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h2><p><img src="/2023/02/02/Spring/image-20230204152617968.png" alt="image-20230204152617968"></p><h4 id="bean的命名方式"><a href="#bean的命名方式" class="headerlink" title="bean的命名方式"></a>bean的命名方式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean可以有多个名字，web层可以引用id或name（建议id） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;service service2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230203103229792.png" alt="image-20230203103229792"></p><h4 id="bean的作用范围"><a href="#bean的作用范围" class="headerlink" title="bean的作用范围"></a>bean的作用范围</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- scope为prototype时为非单例对象，每次创建出来的对象地址不同，默认为单例对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230203103809708.png" alt="image-20230203103809708"></p><h4 id="bean实例化"><a href="#bean实例化" class="headerlink" title="bean实例化"></a>bean实例化</h4><blockquote><p>Spring 创建对象时创建的是无参构造方法</p></blockquote><p>过往方法是使用factory创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bookDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BookDao <span class="title function_">getBookDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用静态工厂实例化bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 调用工厂的函数来构造类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.factory.bookDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getBookDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">app</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">// 获取IoC容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取bean</span></span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) context.getBean(<span class="string">&quot;BookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用实例工厂实例化Bean</strong></p><p>通过连接工厂和Dao，使web层可以直接使用bookDao创建Dao对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建工厂bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDaoFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.factory.BookDaoFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bean为工厂bean，method为调用方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;bookDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getBookDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过FactoryBean进行实例化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;BookDao&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代替原始实例工厂中创建对象的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BookDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定对象的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> BookDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为单例对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 单例，false为非单例</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接导入FactoryBean对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.factory.BookDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="bean的生命周期控制"><a href="#bean的生命周期控制" class="headerlink" title="bean的生命周期控制"></a>bean的生命周期控制</h4><p><img src="/2023/02/02/Spring/image-20230203151850883.png" alt="image-20230203151850883"></p><p>直接在Impl中写init和destory方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IoC中引入init和destory方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>执行destory需要用到ClassPathXmlApplicationContext类中的close方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 引入局部变量直接使用ClassPathXmlApplicationContext，ApplicationContext没有close方法</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果关闭整个context是先把IoC容器关掉</span></span><br><span class="line">  context.registerShutdownHook();</span><br><span class="line">    <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) context.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">    bookDao.save();</span><br><span class="line">  <span class="comment">// 直接关闭context</span></span><br><span class="line">    context.close();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230203151750828.png" alt="image-20230203151750828"></p><h2 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h2><p><strong>方式选择</strong></p><p><img src="/2023/02/02/Spring/image-20230204102859862.png" alt="image-20230204102859862"></p><h4 id="Set注入"><a href="#Set注入" class="headerlink" title="Set注入"></a>Set注入</h4><blockquote><p>为Impl中的数据传入值</p><p>name为需要注入的简单类型的数据，value为导入的数据</p></blockquote><p><img src="/2023/02/02/Spring/image-20230203204417602.png" alt="image-20230203204417602"></p><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><ol><li>在BookServiceImpl中定义构造方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">private</span> BookUser bookUser;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookDao bookDao, BookUser bookUser)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">        <span class="built_in">this</span>.bookUser = bookUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在配置文件中设置构造器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.Dao.Impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookUser&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.User.Impl.BookUserImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.Service.Impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  name 为构造的形参的名称,需要与构造函数的形参name一致     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookUser&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookUser&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="在传递数据时的写法-不写name，解决形参名称问题"><a href="#在传递数据时的写法-不写name，解决形参名称问题" class="headerlink" title="在传递数据时的写法(不写name，解决形参名称问题)"></a>在传递数据时的写法(不写name，解决形参名称问题)</h5><ol><li>根据类型进行区分</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.Dao.Impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yes&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>根据索引进行区分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.Dao.Impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yes&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="依赖自动装配"><a href="#依赖自动装配" class="headerlink" title="依赖自动装配"></a>依赖自动装配</h4><blockquote><p>概念：IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</p><p>自动装配方式：</p><ul><li>按类型（常用）</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul></blockquote><ol><li><p>按类型装配（构造的类型对象必须唯一）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用set方法进行构造，然后直接在xml中使用autowire --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.Service.Impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按名称装配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean的name必须与Impl中的name相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.Service.Impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>依赖自动装配特征</strong></p><p><img src="/2023/02/02/Spring/image-20230204104448335.png" alt="image-20230204104448335"></p></li></ol><h4 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h4><ol><li><p>定义集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookUserImpl</span> <span class="keyword">implements</span> <span class="title class_">BookUser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 配置set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BookUser...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookUser&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.User.Impl.BookUserImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数组配置（集合list，set都是一样的配置） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">     <span class="comment">&lt;!-- map配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shandong&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;qingdao&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- properties配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span>&gt;</span>china<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span>&gt;</span>shandong<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span>&gt;</span>qingdao<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例：数据源对象管理"><a href="#案例：数据源对象管理" class="headerlink" title="案例：数据源对象管理"></a>案例：数据源对象管理</h2><blockquote><p>第三方资源配置管理</p></blockquote><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>导入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件中创建bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306///manager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>直接在main中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) context.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="加载properties文件"><a href="#加载properties文件" class="headerlink" title="加载properties文件"></a>加载properties文件</h3><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///manager</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><ol><li><p>开辟命名空间context</p><p><img src="/2023/02/02/Spring/image-20230204115435861.png" alt="image-20230204115435861"></p></li><li><p>使用context命名空间加载properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件（可以加载多个，或者全部加载）classpath*:*.properties 加载全部路径中的配置文件（包括jar包中的）</span></span><br><span class="line"><span class="comment">system-properties-mode为是否加载系统属性，防止变量名冲突 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置文件属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建bookDao的bean，将driver数据传入Impl中的name中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lyblue.Dao.Impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在main中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) context.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p><img src="/2023/02/02/Spring/image-20230204152547019.png" alt="image-20230204152547019"></p><p>绝对路径加载Spring配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;绝对路径//ApplicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>不强转获得bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookDao&quot;</span>,BookDao.class);</span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> context.getBean(BookDao.class); <span class="comment">// 只能加载唯一的bean</span></span><br></pre></td></tr></table></figure><p>容器类层次结构图</p><p><img src="/2023/02/02/Spring/image-20230204152308351.png" alt="image-20230204152308351"></p><p>BeanFactory容器创建（已弃用）</p><p><img src="/2023/02/02/Spring/image-20230204152346897.png" alt="image-20230204152346897"></p><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>普通注解为@Component，下面三个注解功能一致，名称是为了区分</p><p><img src="/2023/02/02/Spring/image-20230204154913940.png" alt="image-20230204154913940"></p><ol><li><p>在Spring配置文件中扫描包中的文件(需要加context)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描目录下的所有文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lyblue&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在文件上写入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BookDao...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接在main中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookDao&quot;</span>, BookDao.class);</span><br><span class="line">bookDao.save();</span><br></pre></td></tr></table></figure></li></ol><h3 id="纯注解开发"><a href="#纯注解开发" class="headerlink" title="纯注解开发"></a>纯注解开发</h3><blockquote><p>不需要配置文件，需要一个配置类</p></blockquote><p>SpringConfig.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表明是个配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="comment">// 表明扫描路径，此注解只能添加一次，多个数据请用数组 ，例如 @ComponentScan(&#123;&quot;com.lyblue.service&quot;,&quot;com.lyblue.dao&quot;&#125;) </span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.lyblue&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">// 引入配置类</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookDao&quot;</span>, BookDao.class);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="注解开发bean作用范围和生命周期管理"><a href="#注解开发bean作用范围和生命周期管理" class="headerlink" title="注解开发bean作用范围和生命周期管理"></a>注解开发bean作用范围和生命周期管理</h3><blockquote><p>初始化和销毁需要导入坐标 <code>jakarta.annotation-api</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="comment">// 单例，非单例为prototype</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BookDao...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><p><img src="/2023/02/02/Spring/image-20230204164234249.png" alt="image-20230204164234249"></p><p><img src="/2023/02/02/Spring/image-20230204164254696.png" alt="image-20230204164254696"></p><p><img src="/2023/02/02/Spring/image-20230204164503030.png" alt="image-20230204164503030"></p><h4 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h4><p><img src="/2023/02/02/Spring/image-20230204165304511.png" alt="image-20230204165304511"></p><p>SpringConfig.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.lyblue&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc2.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BookDao.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 导入配置文件中的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三方bean管理-x2F-依赖注入"><a href="#第三方bean管理-x2F-依赖注入" class="headerlink" title="第三方bean管理&#x2F;依赖注入"></a>第三方bean管理&#x2F;依赖注入</h3><p>不建议直接写到SpringConfig中</p><p><img src="/2023/02/02/Spring/image-20230204200651980.png" alt="image-20230204200651980"></p><p>定义一个jdbc类</p><p><img src="/2023/02/02/Spring/image-20230204200721621.png" alt="image-20230204200721621"></p><p>导入式</p><p><img src="/2023/02/02/Spring/image-20230204201011213.png" alt="image-20230204201011213"></p><p>扫描式（不推荐）</p><p><img src="/2023/02/02/Spring/image-20230204201039616.png" alt="image-20230204201039616"></p><h5 id="依赖注入-1"><a href="#依赖注入-1" class="headerlink" title="依赖注入"></a>依赖注入</h5><p><img src="/2023/02/02/Spring/image-20230204201403996.png" alt="image-20230204201403996"></p><p><img src="/2023/02/02/Spring/image-20230204201431191.png" alt="image-20230204201431191"></p><p>XML配置与注解配置比较</p><p><img src="/2023/02/02/Spring/image-20230204203326385.png" alt="image-20230204203326385"></p><h2 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h2><p><img src="/2023/02/02/Spring/image-20230206161643619.png" alt="image-20230206161643619"></p><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 除了mybatis，mysql和druid包外，还有以下的包 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring与mybatis连接的库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring连接jdbc库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring核心文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将mybatis-config.xml换为MybatisConfig.class</p><p><img src="/2023/02/02/Spring/image-20230204211523994.png" alt="image-20230204211523994"></p><p><img src="/2023/02/02/Spring/image-20230204211637639.png" alt="image-20230204211637639"></p><p>Spring 整合 Junit</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230204212055443.png" alt="image-20230204212055443"></p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><img src="/2023/02/02/Spring/image-20230206201202577.png" alt="image-20230206201202577"></p><p><img src="/2023/02/02/Spring/image-20230205122255169.png" alt="image-20230205122255169"></p><p><img src="/2023/02/02/Spring/image-20230205122354449.png" alt="image-20230205122354449"></p><h3 id="AOP快速入门"><a href="#AOP快速入门" class="headerlink" title="AOP快速入门"></a>AOP快速入门</h3><blockquote><p>设定：在接口执行时输出系统时间<br>开发模式：注解 </p></blockquote><p><img src="/2023/02/02/Spring/image-20230206100851287.png" alt="image-20230206100851287"></p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.lyblue&quot;)</span></span><br><span class="line"><span class="comment">// 让Spring知道Aop是用注解配置的</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>制作连接点方法（原始操作，Dao接口与实现类）</p><p>Aop.MyAdvice.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装为bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 作为Aop注解</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切入点表达式</span></span><br><span class="line">    <span class="comment">// 当执行update方法时，该处为切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.lyblue.Dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定切入点函数</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230205135438902.png" alt="image-20230205135438902"></p></li></ol><p><img src="/2023/02/02/Spring/image-20230205135716134.png" alt="image-20230205135716134"></p><h3 id="AOP切入点表达式"><a href="#AOP切入点表达式" class="headerlink" title="AOP切入点表达式"></a>AOP切入点表达式</h3><p><img src="/2023/02/02/Spring/image-20230205191114466.png" alt="image-20230205191114466"></p><p><img src="/2023/02/02/Spring/image-20230205191222517.png" alt="image-20230205191222517"></p><p>可以使用通配符描述切入点，快速描述</p><blockquote><p><code>*</code>:单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意返回类型 任意包下 find开头 必有一个任意参数</span></span><br><span class="line">execution(<span class="keyword">public</span> * com.lyblue.*.UserService.find* (*))</span><br></pre></td></tr></table></figure><blockquote><p><code>..</code>:多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意包下 任意个数的参数</span></span><br><span class="line">execution(<span class="keyword">public</span> User com..UserService.findById (..))</span><br></pre></td></tr></table></figure><blockquote><p><code>+</code>:专用于匹配子类类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意返回值 任意包下的以Service接口的子类型 任意方法</span></span><br><span class="line">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230205195142875.png" alt="image-20230205195142875"></p><h3 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h3><p><img src="/2023/02/02/Spring/image-20230206083758653.png" alt="image-20230206083758653"></p><h4 id="环绕通知-around"><a href="#环绕通知-around" class="headerlink" title="环绕通知(around)"></a>环绕通知(around)</h4><p><img src="/2023/02/02/Spring/image-20230206102615209.png" alt="image-20230206102615209"></p><p><img src="/2023/02/02/Spring/image-20230206102630211.png" alt="image-20230206102630211"></p><h4 id="AfterReturning-了解"><a href="#AfterReturning-了解" class="headerlink" title="@AfterReturning(了解)"></a>@AfterReturning(了解)</h4><p><img src="/2023/02/02/Spring/image-20230206102801035.png" alt="image-20230206102801035"></p><h3 id="Aop传递参数"><a href="#Aop传递参数" class="headerlink" title="Aop传递参数"></a>Aop传递参数</h3><blockquote><p>Aop通知的<code>JoinPoint</code>类型的<code>getArgs()</code>方法可以将Bean方法传递的参数封装为一个Object集合<br><code>ProceedingJoinPoint</code>为父类，也可调用该方法</p></blockquote><p>Aop.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="comment">// JoinPoint可以获取Bean传递的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以修改和传递参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">before</span><span class="params">(ProceedingJoinPoint pj)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = pj.getArgs();</span><br><span class="line">        args[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">        <span class="keyword">return</span> pj.proceed(args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@AfterReturning返回参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果原始方法中有返回值，则将该返回值装到ret中</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object ret)</span>&#123;</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="业务层接口执行效率"><a href="#业务层接口执行效率" class="headerlink" title="业务层接口执行效率"></a>业务层接口执行效率</h3><blockquote><p>要求：输出对应数据访问方法的执行时间（Service方法）</p></blockquote><p>目录结构（实现了访数据库进行数据展示的功能）</p><p><img src="/2023/02/02/Spring/image-20230206162731574.png" alt="image-20230206162731574"></p><p>Aop.MyAdvice.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装为bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// Aop容器标识</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">  <span class="comment">// 切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* *.lyblue.Service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runSpeed</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">      <span class="comment">// 获取签名（当前类和方法的各种信息）</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> point.getSignature();</span><br><span class="line">      <span class="comment">// 获取当前方法的类的属性和路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> String.valueOf(signature.getDeclaringType());</span><br><span class="line">      <span class="comment">// 获取当前执行的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 万次执行效率</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            point.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(className + <span class="string">&quot;.&quot;</span> +  name + <span class="string">&quot;----&gt;&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入Junit测试环境</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 导入Spring配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 自动装载bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 测试方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = bookService.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230206182755495.png" alt="image-20230206182755495"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote><p>提取码有时会带有空格，根据Aop将空格去掉</p></blockquote><p><img src="/2023/02/02/Spring/image-20230206194227120.png" alt="image-20230206194227120"></p><p>前提：service中的方法返回一个String类型的提取码</p><p>Aop</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">trimStr</span><span class="params">(ProceedingJoinPoint pj)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">    Object[] args = pj.getArgs();</span><br><span class="line">  <span class="comment">// 将传入的所有数据去除空格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(args[i].getClass().equals(String.class))&#123;</span><br><span class="line">            args[i] = args[i].toString().trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pj.proceed(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h2><h3 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h3><p><img src="/2023/02/02/Spring/image-20230206201503858.png" alt="image-20230206201503858"></p><p><img src="/2023/02/02/Spring/image-20230206204540761.png" alt="image-20230206204540761"></p><ol><li><p>在Service上开启事务(尽量写在接口上)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开启事务</span></span><br><span class="line">  <span class="comment">//传入出钱账户，入钱账户和转移钱数</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in,Double money)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在SpringConfig中开启注解式事务驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在jdbcConfig中设置<code>事务管理器</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">    transactionManager.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> transactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务角色"><a href="#事务角色" class="headerlink" title="事务角色"></a>事务角色</h3><p><img src="/2023/02/02/Spring/image-20230206212051092.png" alt="image-20230206212051092"></p><p><img src="/2023/02/02/Spring/image-20230206212008840.png" alt="image-20230206212008840"></p><p>事务相关配置</p><p><img src="/2023/02/02/Spring/image-20230206212227390.png" alt="image-20230206212227390"></p><p>RollbackFor 事务回滚异常</p><blockquote><p>如果事务遇到了error异常或运行时异常会回滚事务，除此之外都不回滚事务</p></blockquote><p>在事务开启处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遇到IOException异常时回滚事务</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = &#123;IOException.class&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p><img src="/2023/02/02/Spring/image-20230206213145915.png" alt="image-20230206213145915"></p><p><strong>事务传播行为</strong></p><p>原本事务是共同体，可以将事务分离出来开辟一个新的事务</p><p><img src="/2023/02/02/Spring/image-20230206215047547.png" alt="image-20230206215047547"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开辟新事务</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/02/Spring/image-20230206215442836.png" alt="image-20230206215442836"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/02/01/Vue/"/>
      <url>/2023/02/01/Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><blockquote><p>概念：是一套前端框架，免除原生JavaScript中的DOM操作，简化书写</p><p>基于MVVM(Model-View-ViewModel)思想，实现数据的双向绑定，将编程的关键点放在数据上</p><p>官网:<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p></blockquote><p>MVC设计模式</p><p><img src="/2023/02/01/Vue/image-20230201080859360.png" alt="image-20230201080859360"></p><p>MVVM设计模式</p><blockquote><p>MVC即model，view，control，jQuery就是采用的这种设计模式。MVVM即model，view，viewmodel，是数据驱动模式，即所有的一切通过操作数据来进行而尽量避免操作DOM树。</p><p>不关注DOM结构，考虑数据该如何储存，用户的操作在view通过viewmodel进行数据处理，分情况是否通过ajax与model层进行交互，再返回到view层，在这个过程中view和viewmodel的数据双向绑定使得我们完全的摆脱了对DOM的繁琐操作，而是专心于对用户的操作进行处理，避免MVC中control层过厚的问题。</p></blockquote><p><img src="/2023/02/01/Vue/image-20230201081007819.png" alt="image-20230201081007819"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li><p>安装脚手架</p><blockquote><p>npm install -g @vue&#x2F;cli</p></blockquote><p>查看vue安装目录</p><blockquote><p>where vue</p></blockquote></li><li><p>在想创建vue项目的文件夹下使用cmd输入<code>vue ui</code>,使用图形界面构建项目</p></li><li><p>在网页端创建新项目，选择手动创建项目（不使用模板），勾选需要用到的组件。<img src="/2023/02/01/Vue/image-20230226152638048.png" alt="image-20230226152638048"></p></li><li><p>安装devtools</p><p><img src="/2023/02/01/Vue/image-20230226153410553.png" alt="image-20230226153410553"></p></li><li><p>测试，停止原vue的cmd，使用<code>npm run serve</code>启动前端服务器</p></li><li><p>更改端口号和代理，在项目创建目录下编辑配置文件<code>vue.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="Vue项目结构"><a href="#Vue项目结构" class="headerlink" title="Vue项目结构"></a>Vue项目结构</h3><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul><li>assets - 静态资源</li><li>components - 可重用组件</li><li>router - 路由</li><li>store - 数据共享</li><li>views - 视图组件</li></ul><p>之后还会添加</p><ul><li>api - 跟后台交互，发送fetch、xhr请求，接收响应</li><li>plugins - 插件</li></ul><h3 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h3><p>Vue的组件文件以<code>.vue</code>结尾，每个组件由三部分组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 模板部分，由他生成html代码 --&gt;</span><br><span class="line">&lt;template&gt;&lt;/template&gt; </span><br><span class="line">&lt;!-- 代码部分，控制模板的数据来源和行为 --&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- style样式部分，一般不关心 --&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>入门案例</p><p>在App.vue中编写入门案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const options = &#123;</span><br><span class="line">    data: function()&#123;</span><br><span class="line">      return &#123;msg:&quot;hello&quot;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;!-- 导出数据 --&gt;</span><br><span class="line">  export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><blockquote><p>插值表达式只允许放在第一个根标签元素下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; age &gt; 60 ? &#x27;老年&#x27; : &#x27;青年&#x27; &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        data: function()&#123;</span><br><span class="line">            return &#123;name:&#x27;zhangsan&#x27;,age:18&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="属性绑定-v-bind-value"><a href="#属性绑定-v-bind-value" class="headerlink" title="属性绑定 v-bind:value"></a>属性绑定 v-bind:value</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;date&quot; v-bind:value=&quot;brithday&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;text&quot; :value=&quot;age&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        data: function()&#123;</span><br><span class="line">            return &#123;name:&#x27;王五&#x27;,brithday:&#x27;1995-05-01&#x27;,age:20&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="事件绑定-v-on-click"><a href="#事件绑定-v-on-click" class="headerlink" title="事件绑定 v-on:click"></a>事件绑定 v-on:click</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我&quot; v-on:click=&quot;m1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我&quot; @click=&quot;m2&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        data: function()&#123;</span><br><span class="line">            return &#123; count: 0 &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          // 点击m1按钮，count加一</span><br><span class="line">            m1()&#123;</span><br><span class="line">                this.count ++;</span><br><span class="line">                console.log(&quot;m1&quot;)</span><br><span class="line">            &#125;,</span><br><span class="line">          // 点击m1按钮，count减一</span><br><span class="line">            m2()&#123;</span><br><span class="line">                this.count --;</span><br><span class="line">                console.log(&quot;m2&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="双向绑定-v-model"><a href="#双向绑定-v-model" class="headerlink" title="双向绑定 v-model"></a>双向绑定 v-model</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input v-model=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input v-model=&quot;age&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;!-- 单选 --&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请选择性别</span><br><span class="line">                男:&lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">                女:&lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;!-- 数组 --&gt;</span><br><span class="line">            游泳&lt;input type=&quot;checkbox&quot; value=&quot;游泳&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">            打球&lt;input type=&quot;checkbox&quot; value=&quot;打球&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">            健身&lt;input type=&quot;checkbox&quot; value=&quot;健身&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    const options = &#123;</span><br><span class="line">        data: function()&#123;</span><br><span class="line">            return &#123; name:&#x27;zhangsan&#x27;,age:20,sex:&#x27;男&#x27;,fav:[] &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; fullname &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        data: function()&#123;</span><br><span class="line">            return &#123; firstname:&#x27;三&#x27;,lastname:&#x27;张&#x27; &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">      &lt;!-- 具有缓存功能，如果数据没有发生变化则直接从缓存读取，无需执行方法  --&gt;</span><br><span class="line">        computed: &#123;</span><br><span class="line">            fullname()&#123;</span><br><span class="line">                return this.lastname + this.firstname;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Component组件"><a href="#Component组件" class="headerlink" title="Component组件"></a>Component组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 各组件不会相互影响 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ly_component</span>&gt;</span><span class="tag">&lt;/<span class="name">ly_component</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ly_component</span>&gt;</span><span class="tag">&lt;/<span class="name">ly_component</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ly_component</span>&gt;</span><span class="tag">&lt;/<span class="name">ly_component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;ly_component&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    count : <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt; 点击&#123;&#123; count &#125;&#125; 次 &lt;/button&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ly_component</span> <span class="attr">message</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ly_component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;ly_component&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 原标签数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    count : <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt; &#123;&#123; message &#125;&#125; 点击&#123;&#123; count &#125;&#125; 次 &lt;/button&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>安装</p><p>在vue项目目录下使用<code>npm install axios -S</code>安装axios</p><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const resp = await axios.post(&#x27;请求路径&#x27;,&#123;请求体(默认是JSON格式)&#125;,&#123;请求参数&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="前后端参数传递"><a href="#前后端参数传递" class="headerlink" title="前后端参数传递"></a>前后端参数传递</h3><p>前端代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sends()&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async sends()&#123;</span><br><span class="line">              &lt;!-- 发送请求头为Authorization的数据，使后台可以接受到 --&gt;</span><br><span class="line">                const resp =  await axios.post(&#x27;/api/a3&#x27;,&#123;&#125;,&#123;</span><br><span class="line">                    headers:&#123;</span><br><span class="line">                        Authorization:&#x27;abc&#x27;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                console.log(resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>后端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/api/a3&quot;)</span> <span class="comment">// 接收请求头为authorization的数据</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">a3</span><span class="params">(<span class="meta">@RequestHeader(&quot;Authorization&quot;)</span> String authorization)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;authorization 头 &quot;</span> + authorization);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;post request&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据拼接"><a href="#数据拼接" class="headerlink" title="数据拼接"></a>数据拼接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sends()&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async sends()&#123;</span><br><span class="line">                const name = encodeURIComponent(&#x27;&amp;&amp;&amp;&#x27;);</span><br><span class="line">                const age = 18;</span><br><span class="line">// 将参数直接传递给后端</span><br><span class="line">                const resp =  await axios.post(`/api/a4?name=$&#123;name&#125;&amp;age=$&#123;age&#125;`);</span><br><span class="line">                console.log(resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>后端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/api/a4&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">a4</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot; age:&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;post request&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="使用params传递参数"><a href="#使用params传递参数" class="headerlink" title="使用params传递参数"></a>使用params传递参数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sends()&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async sends()&#123;</span><br><span class="line">                const resp =  await axios.post(&#x27;/api/a4&#x27;,&#123;&#125;,&#123;</span><br><span class="line">                  &lt;!-- 使用params传递参数 --&gt;</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        name:&#x27;&amp;&amp;&amp;&amp;&#x27;,</span><br><span class="line">                        age:20</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                console.log(resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用请求体发送数据"><a href="#使用请求体发送数据" class="headerlink" title="使用请求体发送数据"></a>使用请求体发送数据</h3><ol><li>格式为urlencoded</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sends()&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async sends()&#123;</span><br><span class="line">                const params = new URLSearchParams();</span><br><span class="line">                params.append(&quot;name&quot;,&quot;张三&quot;);</span><br><span class="line">                params.append(&quot;age&quot;,24);</span><br><span class="line"></span><br><span class="line">                const resp =  await axios.post(&#x27;/api/a4&#x27;,params);</span><br><span class="line">                console.log(resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>格式为multipart</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async sends()&#123;</span><br><span class="line">              &lt;!-- 格式为multipart --&gt;</span><br><span class="line">                const params = new FormData();</span><br><span class="line">                params.append(&quot;name&quot;,&quot;张三&quot;);</span><br><span class="line">                params.append(&quot;age&quot;,24);</span><br><span class="line"></span><br><span class="line">                const resp =  await axios.post(&#x27;/api/a4&#x27;,params);</span><br><span class="line">                console.log(resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>格式为JSON</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async sends()&#123;</span><br><span class="line"></span><br><span class="line">                const resp =  await axios.post(&#x27;/api/a4&#x27;,&#123;</span><br><span class="line">                    name:&#x27;张三&#x27;,</span><br><span class="line">                    age:24</span><br><span class="line">                &#125;);</span><br><span class="line">                console.log(resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="axios默认配置"><a href="#axios默认配置" class="headerlink" title="axios默认配置"></a>axios默认配置</h3><table><thead><tr><th align="center">名称</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">baseURL</td><td align="left">将自动加在url前面</td></tr><tr><td align="center">headers</td><td align="left">请求头，类型为简单对象</td></tr><tr><td align="center">params</td><td align="left">跟在URL后的请求参数，类型为简单对象或URLSearchParams</td></tr><tr><td align="center">data</td><td align="left">请求体，类型有简单对象、FormData、URLSerchParams、file等</td></tr><tr><td align="center">withCredentials</td><td align="left">跨域时是否携带Cookie等凭证，默认为false</td></tr><tr><td align="center">responseType</td><td align="left">响应类型,默认为JSON</td></tr></tbody></table><h4 id="跨域携带cookie"><a href="#跨域携带cookie" class="headerlink" title="跨域携带cookie"></a>跨域携带cookie</h4><h5 id="局部设置"><a href="#局部设置" class="headerlink" title="局部设置"></a>局部设置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求域，跨域携带cookie或session</span></span><br><span class="line"><span class="meta">@CrossOrigin(value = &quot;http://localhost:7070&quot;,allowCredentials = &quot;true&quot;)</span></span><br></pre></td></tr></table></figure><h5 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h5><p>在启动类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">      <span class="comment">// 设置所有请求都执行跨域操作</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://localhost:7070&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>); <span class="comment">// 允许cookie跨域</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>data</td><td>响应体数据</td></tr><tr><td>status</td><td>状态码</td></tr><tr><td>headers</td><td>响应头</td></tr></tbody></table><p><img src="/2023/02/01/Vue/image-20230227094210283.png" alt="image-20230227094210283"></p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>请求拦截器 </p><blockquote><p>在请求头中添加数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async sends()&#123;</span><br><span class="line">                const _axios = axios.create(&#123;</span><br><span class="line">                    baseURL:&#x27;http://localhost:8080&#x27;,</span><br><span class="line">                    withCredentials: true</span><br><span class="line">                &#125;);</span><br><span class="line">              // 请求拦截器</span><br><span class="line">                _axios.interceptors.request.use(</span><br><span class="line">                    function(config)&#123;</span><br><span class="line">                        // 添加统一的请求头headers</span><br><span class="line">                        config.headers = &#123;</span><br><span class="line">                            Authorization: &#x27;aaa.bbb.ccc&#x27;</span><br><span class="line">                        &#125;</span><br><span class="line">                        return config;</span><br><span class="line">                    &#125;,</span><br><span class="line">                  // 错误响应</span><br><span class="line">                    function(error)&#123;</span><br><span class="line">                        return Promise.reject(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>响应拦截器</p><blockquote><p>向服务端发送请求，收集错误</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">    const options = &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async sends()&#123;</span><br><span class="line">                const _axios = axios.create(&#123;</span><br><span class="line">                    baseURL:&#x27;http://localhost:8080&#x27;,</span><br><span class="line">                    withCredentials: true</span><br><span class="line">                &#125;);</span><br><span class="line">                _axios.interceptors.response.use(</span><br><span class="line">                    function(response)&#123;</span><br><span class="line">                        return response;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    function(error)&#123;</span><br><span class="line">                       if(error.response.status === 400)&#123;</span><br><span class="line">                        console.log(&#x27;请求参数不正确&#x27;)</span><br><span class="line">                        // 错误已解决</span><br><span class="line">                        return Promise.resolve(400);</span><br><span class="line">                       &#125;else if(error.response.status === 401)&#123;</span><br><span class="line">                        console.log(&#x27;跳转至登录页面&#x27;)</span><br><span class="line">                        // 错误已解决</span><br><span class="line">                        return Promise.resolve(401);</span><br><span class="line">                       &#125;else if(error.response.status === 404)&#123;</span><br><span class="line">                        console.log(&#x27;资源未找到&#x27;)</span><br><span class="line">                        // 错误已解决</span><br><span class="line">                        return Promise.resolve(404);</span><br><span class="line">                       &#125;</span><br><span class="line">                        return Promise.reject(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">                await _axios.post(&#x27;/api/a6set2&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li>新建html页面，引入Vue.js</li><li>在JS代码区域，创建Vue核心对象，进行数据绑定</li><li>编写视图</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span> </span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常用指令-amp-amp-生命周期"><a href="#常用指令-amp-amp-生命周期" class="headerlink" title="常用指令&amp;&amp;生命周期"></a>常用指令&amp;&amp;生命周期</h2><p><img src="/2023/02/01/Vue/image-20230201185238080.png" alt="image-20230201185238080"></p><h3 id="v-bind-和-v-model"><a href="#v-bind-和-v-model" class="headerlink" title="v-bind 和 v-model"></a>v-bind 和 v-model</h3><p>v-bind:为html标签绑定属性值<br>v-model:在表单元素上创建双向数据绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 显示username值 --&gt;</span></span><br><span class="line">    &#123;&#123; username &#125;&#125;</span><br><span class="line">  <span class="comment">&lt;!-- url跳转 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点击一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点击一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!-- 两者作用相同 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 模型，修改该input值则url也一起变动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>:<span class="string">&quot;zhangsan&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>:<span class="string">&quot;https://www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>) <span class="comment">// 绑定数据</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>功能:为HTML标签绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果被点击，则执行show方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span> <span class="comment">&lt;!-- 二者作用相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="title function_">alert</span>(<span class="string">&quot;666&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a>v-if 和 v-show</h3><p>功能：判断功能，渲染方式不同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 判断count的值显示对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;count==3&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- count值为3时显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;count==4&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- count值为4时显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="comment">&lt;!-- 其他情况显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;count&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果count为3时，展示 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;count==3&quot;</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>:<span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>功能：遍历</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 遍历address中的数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(addr,i) in address&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- i为遍历索引 --&gt;</span></span><br><span class="line">        &#123;&#123;i&#125;&#125; -- &#123;&#123; addr &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>:[<span class="string">&quot;beijing&quot;</span>,<span class="string">&quot;shanghai&quot;</span>,<span class="string">&quot;qingdao&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="/2023/02/01/Vue/image-20230202002821478.png" alt="image-20230202002821478"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 挂载完成（网页加载完毕）</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">alert</span>(<span class="string">&quot;666&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;新增&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;userTable&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(brand,i) in brands&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;i + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;brand.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;brand.password&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 存储数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">brands</span>:[]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/selectAllServlet&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 将所有数据赋值给brands</span></span></span><br><span class="line"><span class="language-javascript">                _this.<span class="property">brands</span> = resp.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>) <span class="comment">// 绑定数据</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AJAX,Axios,JSON</title>
      <link href="/2023/01/29/AJAX/"/>
      <url>/2023/01/29/AJAX/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><blockquote><ul><li>与服务器进行数据交换：通过AJAX可以给服务器发送请求，并获取服务器响应的数据</li><li><code>异步交互</code>可以在<code>不重新加载整个页面</code>的情况下，与服务器交换数据并更新部分网页的技术，如：联想搜索、用户名是否可用检验等等</li></ul></blockquote><p><strong>同步和异步</strong></p><p><img src="/2023/01/29/AJAX/image-20230129152047544.png" alt="image-20230129152047544"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>创建核心对象(模板)</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhttp;</span><br><span class="line">    <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">        xhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// code for IE6, IE5</span></span><br><span class="line">        xhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>发送请求</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （&quot;请求方式&quot;，&quot;目标全路径&quot;,&quot;是否为异步（true为异步，默认为true，可不填）&quot;）</span></span><br><span class="line">xhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://localhost:8080/ajaxServlet&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xhttp.send();</span><br></pre></td></tr></table></figure><ol start="3"><li>获取响应</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 弹窗显示</span></span><br><span class="line">xhttp.onreadystatechange = function() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">            alart(<span class="built_in">this</span>.responseText)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/29/AJAX/image-20230129153821012.png" alt="image-20230129153821012"></p><h3 id="案例-—-验证用户名是否存在"><a href="#案例-—-验证用户名是否存在" class="headerlink" title="案例 — 验证用户名是否存在"></a>案例 — 验证用户名是否存在</h3><blockquote><p>需求：用户注册时，当用户名输入框失去焦点时，校验用户名在数据库中是否存在</p></blockquote><p><img src="/2023/01/29/AJAX/image-20230129185826386.png" alt="image-20230129185826386"></p><p>register.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将username封装为var值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> username = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建核心对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xhttp;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            xhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// code for IE6, IE5</span></span></span><br><span class="line"><span class="language-javascript">            xhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发送请求(请求方式，目标全路径，同步或异步（true为异步，默认为true）)</span></span></span><br><span class="line"><span class="language-javascript">        xhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://localhost:8080/ajaxServlet?username=&quot;</span>+username,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        xhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取响应</span></span></span><br><span class="line"><span class="language-javascript">        xhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">responseText</span> == <span class="string">&quot;true&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">// 如果返回值为&quot;true&quot;，则显示错误信息</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username_err&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Axios异步框架"><a href="#Axios异步框架" class="headerlink" title="Axios异步框架"></a>Axios异步框架</h1><blockquote><p>页面进行无刷新的请求数据<br>Axios原生的AJAX进行封装，简化书写</p><p>中文文档：<a href="https://www.axios-http.cn/docs/intro">https://www.axios-http.cn/docs/intro</a></p></blockquote><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>引入axios的js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   // Axios.html</span><br><span class="line"><span class="comment">&lt;!-- 导入js文件 --&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用axios发送请求，并获取响应结果</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/axiosServlet&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// get方式用params，post方式用data</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&quot;zhangsan&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取servlet的内容</span></span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(response.<span class="property">data</span>) </span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/01/29/AJAX/image-20230131155325854.png" alt="image-20230131155325854"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求方式别名示例</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// get</span></span></span><br><span class="line"><span class="language-javascript">    axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/axiosServlet&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// post</span></span></span><br><span class="line"><span class="language-javascript">  axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8080/axiosServlet&quot;</span>,<span class="string">&quot;username=zhangsan&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><blockquote><p>概念：JavaScript Object Notation。JavaScript对象表示法<br>多用于<code>数据载体</code>，在网络中进行数据传输。</p></blockquote><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><img src="/2023/01/29/AJAX/image-20230131160815742.png" alt="image-20230131160815742"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> json = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;age&quot;</span>:<span class="number">33</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;addr&quot;</span>:[<span class="string">&quot;beijing&quot;</span>,<span class="string">&quot;shanghai&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(json.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSON数据和对象转换"><a href="#JSON数据和对象转换" class="headerlink" title="JSON数据和对象转换"></a>JSON数据和对象转换</h2><p><img src="/2023/01/29/AJAX/image-20230131161237447.png" alt="image-20230131161237447"></p><blockquote><p>Fastjson是阿里巴巴提供的一个java语言编写的高性能功能完善的JSON库，是目前java语言中最快的JSON库，可以实现java对象和JSON字符串的相互转换</p></blockquote><p><strong>基本使用</strong></p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>java对象与json字符串互相转换</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjson_demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将user对象转为json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将json字符串转为user对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> JSON.parseObject(s, User.class);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例-Axios-JSON"><a href="#案例-Axios-JSON" class="headerlink" title="案例( Axios + JSON )"></a>案例( Axios + JSON )</h1><blockquote><p>需求：使用Axios + JSON 显示数据,并且可以添加数据</p></blockquote><h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2><p><img src="/2023/01/29/AJAX/image-20230201000559102.png" alt="image-20230201000559102"></p><p>user.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 新增按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;新增&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示数据的表格 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;userTable&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入坐标 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/selectAllServlet&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将所有数据放入data中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> data = resp.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建table中的内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> tableData = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;&lt;th&gt;序号&lt;/th&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;&lt;th&gt;用户名&lt;/th&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;&lt;th&gt;密码&lt;/th&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;&lt;th&gt;操作&lt;/th&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 遍历所有数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 单条数据对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> datum = data[i];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 拼接表格数据</span></span></span><br><span class="line"><span class="language-javascript">            tableData += <span class="string">&quot;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;tr align=\&#x27;center\&#x27;&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + datum.<span class="property">username</span> + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&quot;</span> + datum.<span class="property">password</span> + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;td&gt;&lt;a href=\&quot;#\&quot;&gt;修改&lt;/a&gt;&lt;a href=\&quot;#\&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将数据写入表格</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userTable&quot;</span>).<span class="property">innerHTML</span> = tableData;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>selectAllServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/selectAllServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">selectAllServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取所有对象</span></span><br><span class="line">        List&lt;User&gt; users = service.selectAll();</span><br><span class="line">  <span class="comment">// 将user对象转换为json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(users);</span><br><span class="line">      <span class="comment">// 设置编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/json;charset=UTF-8&quot;</span>);</span><br><span class="line">      <span class="comment">// 将json字符串发送到user.html</span></span><br><span class="line">        response.getWriter().write(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p><img src="/2023/01/29/AJAX/image-20230201000627442.png" alt="image-20230201000627442"></p><p>add.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        用户名:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        密码:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设计存放数据的formData</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> formData = &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">password</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将当前数据存入formData</span></span></span><br><span class="line"><span class="language-javascript">        formData.<span class="property">username</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        formData.<span class="property">password</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/addServlet_axios&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:formData</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 判断数据是否添加成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(resp.<span class="property">data</span> == <span class="string">&quot;successful&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&quot;http://localhost:8080/brand.jsp&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>addServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/addServlet_axios&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">addServlet_axios</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">      <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> request.getReader();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将json字符串转为user对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSON.parseObject(s, User.class);</span><br><span class="line">      <span class="comment">// 添加数据</span></span><br><span class="line">        service.add(user);</span><br><span class="line">      <span class="comment">// 写入数据</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
            <tag> Axios </tag>
            
            <tag> JSON </tag>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter</title>
      <link href="/2023/01/28/Filter/"/>
      <url>/2023/01/28/Filter/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Filter表示过滤器，是javaweb三大组件（Servlet、Filter、Listener）之一</p><blockquote><ul><li>过滤器可以把对资源的请求<strong>拦截</strong>下来，从而实现一些特殊的功能</li><li>过滤器一般完成一些<strong>通用</strong>的操作，比如：权限控制、统一编码处理、敏感字符处理等等</li></ul></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li>定义类，实现Filter接口，并重写所有方法</li><li>配置Filter拦截资源的路径：在类上定义@WebFilter(被拦截的对象)</li><li>放行<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;  </span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;  </span><br><span class="line">    <span class="comment">// 放行</span></span><br><span class="line">  filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="/2023/01/28/Filter/image-20230128195117996.png"></p><h2 id="Filter拦截路径配置"><a href="#Filter拦截路径配置" class="headerlink" title="Filter拦截路径配置"></a>Filter拦截路径配置</h2><p> @WebFilter(“&#x2F;xxx”)</p><ol><li>拦截具体的资源：<code>/index.jsp</code> — 只有访问该页面时才会被拦截</li><li>目录拦截：<code>/user/*</code> — 访问&#x2F;user下的所有资源都会被拦截</li><li>后缀名拦截：<code>*.jsp</code> — 访问名后缀为jsp的资源才会被拦截</li><li>拦截所有：<code>/*</code> — 访问所有资源都会被拦截</li></ol><h2 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h2><blockquote><p>过滤器的顺序根据过滤器类名大小排序（字符依次比较）<br><img src="/2023/01/28/Filter/image-20230128201024717.png"></p></blockquote><h2 id="案例-–-登录验证"><a href="#案例-–-登录验证" class="headerlink" title="案例 – 登录验证"></a>案例 – 登录验证</h2><blockquote><p>需求：访问资源时，需要先进行登录验证，如果没有登录，则自动跳转到登录页面</p></blockquote><ol><li><p>创建目录结构，创建java类实现Filter接口</p><p><img src="/2023/01/28/Filter/image-20230129110715194.png" alt="image-20230129110715194"></p></li><li><p>设置过滤对象为所有页面</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>在doFilter中写实现对应功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 销毁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将 ServletRequset 转为 HttpServletRequset，以便实现各种方法</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">      <span class="comment">// 将与登录注册有关的页面放行</span></span><br><span class="line">        String[] urls = &#123;<span class="string">&quot;/login.jsp&quot;</span>,<span class="string">&quot;/Login/&quot;</span>,<span class="string">&quot;/register.jsp&quot;</span>,<span class="string">&quot;/LoginServlet&quot;</span>,<span class="string">&quot;/RegisterServlet&quot;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURL().toString(); <span class="comment">// 获取当前页面的URL</span></span><br><span class="line">        <span class="keyword">for</span> (String s : urls) &#123;</span><br><span class="line">            <span class="keyword">if</span>(url.contains(s))&#123; <span class="comment">// 如果当前URL包含与登录注册有关的URL则放行</span></span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 判读用户是否登录，获取user对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123; <span class="comment">// 已登录，放行</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 未登录，向登录页面传递未登录的信息并跳转</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;login_msg&quot;</span>,<span class="string">&quot;您尚未登录！&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>session tracking</title>
      <link href="/2023/01/27/session-tracking/"/>
      <url>/2023/01/27/session-tracking/</url>
      
        <content type="html"><![CDATA[<h1 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>向服务器发送cookie(在servlet中使用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建cookie对象</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line"><span class="comment">// 发送cookie.response</span></span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>获取服务器的cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;username&quot;</span>.equals(name))&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie-存活时间"><a href="#Cookie-存活时间" class="headerlink" title="Cookie 存活时间"></a>Cookie 存活时间</h3><blockquote><p>默认情况下，Cookie存储在计算机内存中，当浏览器关闭，内存释放，则cookie被销毁<br>setMaxAge(int second):设置cookie存活时间</p></blockquote><ol><li>正数：将cookie写入浏览器所在电脑的硬盘，持久化存储，到时自动删除。</li><li>负数：默认值，cookie在当前浏览器内存中，当浏览器关闭，则cookie被销毁</li><li>零：删除对应cookie</li></ol><h3 id="设置存活时间"><a href="#设置存活时间" class="headerlink" title="设置存活时间"></a>设置存活时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="type">int</span> time); <span class="comment">// 单位是秒</span></span><br></pre></td></tr></table></figure><h3 id="Cookie存储中文"><a href="#Cookie存储中文" class="headerlink" title="Cookie存储中文"></a>Cookie存储中文</h3><blockquote><p>通过URL编码解码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>；</span><br><span class="line"><span class="comment">// URL编码</span></span><br><span class="line">value = URLEncoder.encode(value,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// URL解码</span></span><br><span class="line">value = URLDecoder.decode(value,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><blockquote><p>服务端会话跟踪技术：将数据保存到服务端<br>javaEE提供HttpSession接口，来实现一次会话的多次请求间数据共享功能</p></blockquote><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ol><li>获取Session对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br></pre></td></tr></table></figure></li><li>Session对象功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name,Object o)</span>; <span class="comment">// 存储数据到session域中</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(Stirng name)</span>;  <span class="comment">// 根据key，获取值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// 根据key，删除键值对</span></span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4></li></ol><p>Session是基于cookie实现的，在一次对话中的Session都是地址相同的</p><blockquote><p>session创建时浏览器会自动将当前session赋予一个id值（JSESSIONID），下次请求相应会通过cookie将session的id值来回传递，使一次会话中的每一个session值相同<br><strong>Session 钝化、活化：</strong></p></blockquote><blockquote><p>钝化：在服务器正常关闭后，tomcat自动将Session的数据写入硬盘的文件中<br>活化：再次启动服务器后，从文件中加载数据到session中<br><strong>Session销毁</strong></p></blockquote><ol><li><p>默认情况下，无操作，30分钟自动销毁</p><blockquote><p>在web.xml中(单位为分钟)，默认为30</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>100<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调用Session对象的 invalidate()方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure></li></ol><h2 id="Cookie-和-Session-对比"><a href="#Cookie-和-Session-对比" class="headerlink" title="Cookie 和 Session 对比"></a>Cookie 和 Session 对比</h2><p>区别：</p><ol><li>存储位置：Cookie是将数据存储在客户端，Session是将数据存储在服务端</li><li>安全性：Cookie是不安全的（有可能被截获），Session安全</li><li>数据大小：Cookie最大3KB，Session无限制</li><li>存储时间：Cookie可以长期存储，Session默认30分钟</li><li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li></ol><h2 id="案例–登录注册"><a href="#案例–登录注册" class="headerlink" title="案例–登录注册"></a>案例–登录注册</h2><blockquote><p>需求：实现登录注册功能，如果登录错误，则显示错误提示信息，如果登录成功并且勾选’记住我’，则保存用户信息，下次登录时自动填写。</p></blockquote><p><img src="/2023/01/27/session-tracking/image-20230129114025555.png" alt="image-20230129114025555"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 获取参数</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remember</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将收集到的参数保存到User对象中</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断用户信息是否正确</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> service.selectUser(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user1 != <span class="literal">null</span>)&#123; <span class="comment">// 如果用户信息正确且勾选“记住我”,则将用户名和密码作为cookie发送到浏览器</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;on&quot;</span>.equals(remember))&#123;</span><br><span class="line">                <span class="type">Cookie</span> <span class="variable">c_username</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">                <span class="type">Cookie</span> <span class="variable">c_password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">                c_username.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>); <span class="comment">// 设置存活时间（一周）</span></span><br><span class="line">                c_password.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">                response.addCookie(c_username);</span><br><span class="line">                response.addCookie(c_password);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 创建session对象，将user信息发送到展示页面</span></span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,user1);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/SelectAllServlet&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">// 用户信息错误，返回错误信息</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;login_msg&quot;</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> session-tracking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS</title>
      <link href="/2023/01/24/JS/"/>
      <url>/2023/01/24/JS/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6基本语法"><a href="#ES6基本语法" class="headerlink" title="ES6基本语法"></a>ES6基本语法</h2><blockquote><p>详细博客:<a href="http://t.csdn.cn/kWM8D">http://t.csdn.cn/kWM8D</a></p></blockquote><blockquote><p>let:变量<br>const:常量</p></blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><blockquote><p>详细博客：<a href="http://t.csdn.cn/ropUm">http://t.csdn.cn/ropUm</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两数相加</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sum</span> = (<span class="params">num1,num2</span>) =&gt; num1 + num2;</span><br></pre></td></tr></table></figure><h3 id="对象词法扩展"><a href="#对象词法扩展" class="headerlink" title="对象词法扩展"></a>对象词法扩展</h3><blockquote><p>在对象字面时使用简写语法，用来初始化属性变量和函数的定义方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getVideo</span>(<span class="params">make,model,value</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 简写变量(自动封装为 key:value 形式)</span></span><br><span class="line">    make,<span class="comment">// 等同于 make: make</span></span><br><span class="line">    model,<span class="comment">// 等同于 model: model</span></span><br><span class="line">    value<span class="comment">// 等同于 value: value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用方法getVideo(&#x27;java&#x27;,&#x27;json&#x27;,&#x27;hello&#x27;)</span></span><br><span class="line"><span class="comment">结果：&#123;</span></span><br><span class="line"><span class="comment">          make:&#x27;java&#x27;,</span></span><br><span class="line"><span class="comment">          model:&#x27;json&#x27;,</span></span><br><span class="line"><span class="comment">          value:&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><blockquote><p>详细博客：<a href="http://t.csdn.cn/2uY7o">http://t.csdn.cn/2uY7o</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别赋值</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2023/01/11/java%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/11/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h3><p><strong>byte</strong>这个单词是Java八种基本数据类型之一<strong>字节</strong>的关键字，在计算机存储中以字节为单位，8位比特(bit)组成一个字节。</p><p>若byte为正数，则其最大值为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0111 1111 //转换为10进制，2^6+2^5+2^4+2^3+2^2+2^1+1=127</span><br></pre></td></tr></table></figure><p>若byte为负数，则其最大值为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1111 1111 //-127</span><br></pre></td></tr></table></figure><p>故byte的取值范围是-127~127。</p><p>但这个结论与我们在各种Java教程中看到的取值范围不吻合，byte的真正取值范围是</p><p>-2^8<del>2^8-1 即是 -128</del>127<br>1<br>这个多出来的-128是怎么用字节表示的呢，用下面代码打印出-128的二进制表示。</p><p>byte b1 &#x3D; -128;<br>System.out.println(Integer.toBinaryString(b1));<br>&#x2F;&#x2F;结果<br>11111111 11111111 11111111 10000000<br>1<br>2<br>3<br>4<br>截取最后8位，所以-128的二进制表示为10000000,从表面上看就是-0。</p><p>实际上我们将二进制1111 1111表示的数字打印出来也不是-127,而是-1，可用下面代码进行验证</p><p> byte b1 &#x3D; (byte) 0B11111111;<br>System.out.println(b1);<br>&#x2F;&#x2F;结果<br>-1<br>1<br>2<br>3<br>4<br>出现这种情形是因为计算机用补码的方式存储数值，关于补码详细介绍可参考这篇文章。</p><p>简而言之就是，正数的补码是自身，而负数的补码则是其绝对值按位取反再加1。</p><p>要注意-128是不能用常规的方式转换成补码的，只是规定了10000000这个值用来表示-128。</p><h3 id="随机函数"><a href="#随机函数" class="headerlink" title="随机函数"></a>随机函数</h3><blockquote><p>Math.random() * X<br>生成 0 ~ X-1 的随机数</p></blockquote><h3 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历 array1 数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k : array1)&#123;</span><br><span class="line">  System.out.print(k + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="System-arraycopy-复制数组函数"><a href="#System-arraycopy-复制数组函数" class="headerlink" title="System.arraycopy 复制数组函数"></a>System.arraycopy 复制数组函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array1,array2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array1：原始数组 array2：目标数组</span></span><br><span class="line">        array1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;;</span><br><span class="line">        array2 = <span class="keyword">new</span> <span class="title class_">int</span>[array1.length];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">src :要复制的数组</span></span><br><span class="line"><span class="comment">srcPos :从原始数组的哪个位置开始复制</span></span><br><span class="line"><span class="comment">dest :目标数组</span></span><br><span class="line"><span class="comment">destPos :从目标数组的哪个位置传递</span></span><br><span class="line"><span class="comment">length :要复制的数组的长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        System.arraycopy(array1, <span class="number">0</span>, array2, <span class="number">0</span>, array2.length);</span><br></pre></td></tr></table></figure><h3 id="逆序数组"><a href="#逆序数组" class="headerlink" title="逆序数组"></a>逆序数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = arr.length - i - <span class="number">1</span>; i &lt; j; i++)&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">  arr[i] = arr[j];</span><br><span class="line">  arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="equals和-x3D-x3D-的区别"><a href="#equals和-x3D-x3D-的区别" class="headerlink" title="equals和&#x3D;&#x3D; 的区别"></a><a href="https://www.cnblogs.com/sunzhongyu008/p/11373479.html">equals和&#x3D;&#x3D; 的区别</a></h3><p>基本数据类型: &#x3D;&#x3D; 比较数值<br>引用数据类型: &#x3D;&#x3D; 比较内存地址<br>对象: &#x3D;&#x3D; 与 equals 没有区别</p><p>equals 方法是 java.lang.Object 类的方法。</p><p>有两种用法说明：</p><p>（1）对于字符串变量来说，使用<code>==</code>和<code>equals()</code>方法比较字符串时，其比较方法不同。</p><blockquote><p><code>==</code> 比较两个变量本身的值，即两个对象在内存中的<strong>首地址</strong>。<br><code>equals()</code> 比较字符串中所包含的<strong>内容</strong>是否相同。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s1,s2;</span><br><span class="line"><span class="comment">// 分配内存并赋值</span></span><br><span class="line">      s1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>); </span><br><span class="line">      s2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s2); <span class="comment">// false 地址不同</span></span><br><span class="line">        System.out.println(s1.equals(s2)); <span class="comment">// true 内容相同</span></span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="二分查找（binary-search）"><a href="#二分查找（binary-search）" class="headerlink" title="二分查找（binary search）"></a>二分查找（binary search）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">89</span>,<span class="number">99</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="number">45</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(head &lt;= end)&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">maddle</span> <span class="operator">=</span> (head + end) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span>(dest == arr[maddle])&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;find it!position is &quot;</span> + maddle);</span><br><span class="line">   flag = <span class="literal">true</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dest &lt; arr[maddle])&#123;</span><br><span class="line">    end = maddle - <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dest &gt; arr[maddle])&#123;</span><br><span class="line">    head = maddle + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;dest is not found!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">      arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">      arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><blockquote><p>每轮选出一个最大值和最后一个元素交换位置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line">  <span class="type">Method</span> <span class="variable">me</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">me</span>();</span><br><span class="line">  </span><br><span class="line">  me.ChooseSort();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> k : arr)&#123;</span><br><span class="line">    System.out.print(k + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Method</span>&#123;</span><br><span class="line">  <span class="comment">// 选择排序（升序）</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ChooseSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[maxIndex])&#123;</span><br><span class="line">          maxIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[maxIndex];</span><br><span class="line">      arr[maxIndex] = arr[arr.length - <span class="number">1</span> - i];</span><br><span class="line">      arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h3><ol><li><p>判断数组是否相等</p><blockquote><p>Arrays.equals(arr1,arr2);</p></blockquote></li><li><p>输出数组内容</p><blockquote><p>Arrays.toString(arr1); </p></blockquote></li><li><p>将数组内容全部替换成某一值</p><blockquote><p>Arrays.fill(arr1,替换元素);</p></blockquote></li><li><p>数组排序（快速排序）</p><blockquote><p>Arrays.sort(arr1);</p></blockquote></li><li><p>查找数组元素位置（二分查找）</p><blockquote><p>Arrays.binarySearch(arr1,目标元素);</p></blockquote></li></ol><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h4><p>属性：整形（byte,short,int,long） : 0<br>            浮点型（float,double）: 0<br>            字符型（char）：0（或’\u0000’）<br>            布尔型（boolean）: false<br>            引用数据类型（boolean）：null</p><p>局部变量：没有默认初始化值（一定要显式赋值）</p><h4 id="在内存中加载的位置"><a href="#在内存中加载的位置" class="headerlink" title="在内存中加载的位置"></a>在内存中加载的位置</h4><p>属性：加载到堆空间中<br>局部变量：加载到栈空间</p><h4 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="comment">// 使用匿名对象</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">phone</span>().showPrice();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPrice</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(price);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  show(<span class="string">&quot;123&quot;</span>,<span class="string">&quot;456&quot;</span>,<span class="string">&quot;789&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ... strings)</span>&#123;</span><br><span class="line"> System.out.println(Arrays.toString(strings));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> a,String ... strings)</span>&#123;</span><br><span class="line">  <span class="comment">// 可变形参必须放在末尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p>private &lt; default(缺省) &lt; protect &lt; public </p><blockquote><p>private :  同类<br>default : 同类，同包（路径）<br>protected : 同类，同包（路径），子类<br>public ：公共的</p></blockquote><p>静态方法不能访问成员属性</p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次都调用同一个对象</span></span><br><span class="line"><span class="keyword">package</span> UserTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 调用的都是同一个对象</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> Test.getTest();</span><br><span class="line">      <span class="type">Test</span> <span class="variable">test2</span> <span class="operator">=</span> Test.getTest();</span><br><span class="line">     <span class="type">Test</span> <span class="variable">test2</span> <span class="operator">=</span> Test.getTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title function_">getTest</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 如果当前对象为空，创建一个新对象，否则返回该对象</span></span><br><span class="line">        <span class="keyword">if</span> (test == <span class="literal">null</span>) &#123;</span><br><span class="line">            test = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><ol><li>final 可以修饰变量和属性，一旦初始化无法修改。</li><li>如果修饰属性，jvm无法自动初始化，需要自己进行初始化</li><li>可以修饰方法和类，该方法无法被子类重写</li><li>不可以修饰构造方法</li><li>可以修饰方法的形参，一旦修饰，参数无法更改</li><li>不能和抽象方法或抽象类一起使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;hangman&quot;</span>);</span><br><span class="line">        System.out.println(user.name); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象-abstarct"><a href="#抽象-abstarct" class="headerlink" title="抽象(abstarct)"></a>抽象(abstarct)</h3><p>抽象类：abstarct class 类名<br>              由于类不完整，所以<strong>无法直接构造对象</strong>，可以通过子类间接构建对象<br>              如果抽象类中含有抽象方法，子类继承抽象类需要重写父类的抽象方法，将方法补充完整</p><p>抽象方法：只有声明，没有实现的方法</p><blockquote><p>tip:如果一个类里有抽象方法，这个类一定是抽象类<br>     如果一个类是抽象类，这个类可以没有抽象方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 抽象类的子类可以间接创建对象</span></span><br><span class="line">        <span class="type">Chinese</span> <span class="variable">chinese</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">        chinese.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类 </span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承抽象类需要重写抽象方法 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Chinese eat noodle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol><li>基本语法：interface 接口名称{ 规则属性 ， 规则的行为 }</li><li>接口其实是抽象的</li><li>规则的属性必须是固定值，而且不能修改</li><li>属性的行为的访问权限必须是公共的</li><li>属性应该是静态的</li><li>行为应该是抽象的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">Light</span> <span class="variable">light1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line">        <span class="type">Light</span> <span class="variable">light2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line">        computer.usb1 = light1;</span><br><span class="line">        computer.usb2 = light2;</span><br><span class="line">        computer.powerSupply();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UsbInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UsbSupply</span> <span class="keyword">extends</span> <span class="title class_">UsbInterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerSupply</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UsbReceive</span> <span class="keyword">extends</span> <span class="title class_">UsbInterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerReceive</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> <span class="keyword">implements</span> <span class="title class_">UsbSupply</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UsbReceive usb1;</span><br><span class="line">    <span class="keyword">public</span> UsbReceive usb2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerSupply</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑提供能源&quot;</span>);</span><br><span class="line">        usb1.powerReceive();</span><br><span class="line">        usb2.powerReceive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Light</span> <span class="keyword">implements</span> <span class="title class_">UsbReceive</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerReceive</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电灯接收能源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(MyCity.BEIJING.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">City</span>&#123;</span><br><span class="line"></span><br><span class="line">    BEIJING(<span class="string">&quot;北京&quot;</span>,<span class="number">1001</span>),SHANGHAI(<span class="string">&quot;上海&quot;</span>,<span class="number">1002</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    City(String name, <span class="type">int</span> code) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种创建方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCity</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MyCity</span><span class="params">(String name, <span class="type">int</span> code)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MyCity</span> <span class="variable">BEIJING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCity</span>(<span class="string">&quot;北京&quot;</span>,<span class="number">1001</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MyCity</span> <span class="variable">SHANGHAI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCity</span>(<span class="string">&quot;上海&quot;</span>,<span class="number">1002</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> UserTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="comment">// 1 抽象</span></span><br><span class="line">        <span class="type">Say</span> <span class="variable">say</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Say</span>();</span><br><span class="line">        say.SayHello(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2 接口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">bird</span>().fly();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Fly</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;飞机飞&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="comment">// 1.抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Say</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SayHello</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="string">&quot;\t&quot;</span> + person.name());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fly</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bird</span> <span class="keyword">implements</span> <span class="title class_">Fly</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;翅膀飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;cde&quot;</span>;</span><br><span class="line"><span class="comment">// 字符串拼接（将str1拼接到str上）</span></span><br><span class="line">str.concat(str1);</span><br><span class="line"><span class="comment">// 截取字符串（一个参数表示从目标位置到最后）</span></span><br><span class="line">str.substring(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 比较字符串(整数为原字符串大，负数为比较的大，0为一样大)</span></span><br><span class="line">str.compareTo(str1);</span><br><span class="line"><span class="comment">// 分解字符串为字符串数组</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">String[] s = s1.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String k : s)&#123;</span><br><span class="line">  System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去掉首位空格</span></span><br><span class="line">s1.trim();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串替换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">s1.replace(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>); <span class="comment">// 将s1当中的world替换为java</span></span><br><span class="line"><span class="comment">// 多条件替换(替换多个字符，使用|分割)</span></span><br><span class="line">s1.replaceAll(<span class="string">&quot;world|hello&quot;</span>,<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="comment">// 大小写替换</span></span><br><span class="line">s1.toLowerCase(); <span class="comment">// 替换为小写</span></span><br><span class="line">s1.toUpperCase(); <span class="comment">// 替换为大写</span></span><br><span class="line"><span class="comment">// 字符串查找</span></span><br><span class="line">s1.charAt(<span class="number">1</span>); <span class="comment">// 查找指定位置元素</span></span><br><span class="line">s1.indexOf(<span class="string">&quot;world&quot;</span>); <span class="comment">// 查找对应字符串位置</span></span><br><span class="line">s1.lastindexOf(<span class="string">&quot;world&quot;</span>); <span class="comment">// 查找最后一次出现的位置</span></span><br><span class="line">s1.contains(<span class="string">&quot;world&quot;</span>); <span class="comment">// 判断是否包含字符串，是则返回true</span></span><br></pre></td></tr></table></figure><h4 id="StringBuilder-对象"><a href="#StringBuilder-对象" class="headerlink" title="StringBuilder 对象"></a>StringBuilder 对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            s.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">s.reverse(); <span class="comment">// 字符串反转</span></span><br><span class="line">s.insert(<span class="number">0</span>,<span class="string">&quot;插入的字符串&quot;</span>); <span class="comment">// 字符串插入</span></span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><h4 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间戳（毫秒）</span></span><br><span class="line">System.out.println(System.currentTimeMillis());</span><br><span class="line"><span class="comment">// 日期类</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(date);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">y(Y) -&gt; 年 -&gt; yyyy</span></span><br><span class="line"><span class="comment">m(M) -&gt; MM :月份 mm:分钟</span></span><br><span class="line"><span class="comment">d(D) -&gt; dd:一月中的日期 DD:一年中的日期</span></span><br><span class="line"><span class="comment">h(H) -&gt; hh:12时进制 HH:24时进制</span></span><br><span class="line"><span class="comment">s(S) -&gt; s:秒 S:毫秒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> simpleDateFormat.format(date);</span><br><span class="line">System.out.println(format);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String 转 dade</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> <span class="string">&quot;2022-06-01&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> simpleDateFormat.parse(dateString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断时间前后</span></span><br><span class="line">date1.before(date);</span><br><span class="line">date1.after(date);</span><br></pre></td></tr></table></figure><h4 id="日历类"><a href="#日历类" class="headerlink" title="日历类"></a>日历类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        System.out.println(instance.get(Calendar.YEAR)); <span class="comment">// 获取年</span></span><br><span class="line">        System.out.println(instance.get(Calendar.MONTH)); <span class="comment">// 获取月份 - 1</span></span><br><span class="line">        System.out.println(instance.get(Calendar.DATE)); <span class="comment">// 获取日</span></span><br><span class="line">instance.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// 将时间传入instance</span></span><br><span class="line">instance.add(Calendar.YEAR,-<span class="number">1</span>);<span class="comment">// 当前年份-1</span></span><br></pre></td></tr></table></figure><h4 id="字符串工具类"><a href="#字符串工具类" class="headerlink" title="字符串工具类"></a>字符串工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringUtil</span>&#123;</span><br><span class="line">  <span class="comment">// 判断字符串是否为空</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(String str)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(str.trim()))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生成随机字符串（生成由form字符串内元素构成的len长度的字符串）</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">makeString</span><span class="params">(String form,<span class="type">int</span> len)</span>&#123;</span><br><span class="line">    <span class="comment">// 长度小于1，返回空字符串</span></span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">char</span>[] chars = form.toCharArray();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> random.nextInt(chars.length);</span><br><span class="line">                str.append(chars[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> str.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 日历类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">formatDate</span><span class="params">(Date date,String format)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象并规定时间格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> simpleDateFormat.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 给定日期转换为日历格式</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">formatDate</span><span class="params">(Date date,String format)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> simpleDateFormat.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li>可以通过代码恢复正常逻辑执行的异常，称之为运行期异常：RuntimeException</li><li>不可以通过代码恢复正常逻辑运行的异常，称之为编译期异常：Exception</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕捉多个异常的时候，需要先捕捉范围小的异常，然后捕捉范围大的异常</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">// 可能会出现异常的代码</span></span><br><span class="line">  <span class="comment">// 如果出现异常，那么JVM会将异常进行封装，形成一个具体的异常类，然后将这个异常抛出</span></span><br><span class="line">  <span class="comment">// 所有的异常对象都可以被抛出</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(抛出的异常对象 对象引用)&#123;</span><br><span class="line">  <span class="comment">// 异常的解决方案</span></span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">// 调用一个为空对象的成员属性或成员方法时（非静态），就会发生异常</span></span><br><span class="line">            System.out.println(user.toString()); <span class="comment">// 对象对空，产生空指针异常</span></span><br><span class="line">          System.out.println(user.name); <span class="comment">// 静态与对象无关，非异常，直接输出</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>  <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常转换"><a href="#异常转换" class="headerlink" title="异常转换"></a>异常转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">  <span class="comment">// 如果方法中可能会出现问题，那么需要提前声明</span></span><br><span class="line"> <span class="comment">// 如果程序中需要手动抛出异常对象，那么需要使用throw关键字，然后new出异常对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> <span class="keyword">throw</span> Exception&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      System.out.println(i / j);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">      <span class="comment">// 手动抛出异常</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Excepiton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> UserTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            login(account,password);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (AccountException accountException)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;账号不正确&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (PasswordException passwordException)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;密码不正确&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (LoginExcepiton loginExcepiton)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;其他信息不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 登录函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String account,String password)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;admin&quot;</span>.equals(account))&#123;</span><br><span class="line">          <span class="comment">// 如果账号不正确，抛出账号不正确异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccountException</span>(<span class="string">&quot;账号不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;admin&quot;</span>.equals(password))&#123;</span><br><span class="line">          <span class="comment">// 如果密码不正确，抛出密码不正确异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordException</span>(<span class="string">&quot;密码不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 账号错误异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountException</span> <span class="keyword">extends</span> <span class="title class_">LoginExcepiton</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 密码登录异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PasswordException</span> <span class="keyword">extends</span> <span class="title class_">LoginExcepiton</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断登录信息是否正确异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginExcepiton</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginExcepiton</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="ArrayList-基本操作"><a href="#ArrayList-基本操作" class="headerlink" title="ArrayList 基本操作"></a>ArrayList 基本操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">new 出来的是空数组</span></span><br><span class="line"><span class="comment">构造参数可以传int或collection集合类型的值，用于决定底层数组的长度或将其他集合的数据放入当前集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 创建集合对象</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">arraylist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">// 添加数据(空数组添加对象时，会划分一个空间为)</span></span><br><span class="line">arraylist.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">arraylist.add(<span class="number">1</span>,<span class="string">&quot;zhaoliu&quot;</span>); <span class="comment">// 将元素插入到第2个位置（此算法需要将后续元素依次后移，性能较差）</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">arraylist2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">arraylist2.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">arraylist2.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">arraylist2.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">arraylist.addAll( arraylist2 ); <span class="comment">// 将arr2的元素全部添加到arr的集合当中</span></span><br><span class="line"><span class="comment">// 查看集合当前长度</span></span><br><span class="line">arraylist.size();</span><br><span class="line"><span class="comment">// 获取指定位置的数据（下标从0开始索引）</span></span><br><span class="line">arraylist.get(<span class="number">2</span>); <span class="comment">// 第三个数据</span></span><br><span class="line"><span class="comment">// 遍历集合中的数据（不关心数据的位置）</span></span><br><span class="line"><span class="keyword">for</span>(Object obj : arraylist)&#123;</span><br><span class="line">  System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改数据（指定位置的值）</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">old</span> <span class="operator">=</span> arraylist.set(<span class="number">1</span>,<span class="string">&quot;zhangsan&quot;</span>); <span class="comment">// 修改位置为2的值，并且返回被修改的值</span></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">remove</span> <span class="operator">=</span> arraylist.remove(<span class="number">2</span>); <span class="comment">// 删除位置为3的值，返回被删除的元素的值</span></span><br><span class="line">arraylist.removeAll(arraylist2); <span class="comment">// 删除arr内包含arr2元素的值</span></span><br><span class="line">arraylist.clear(); <span class="comment">// 清除arr集合中所有的元素</span></span><br><span class="line"><span class="comment">// 判空</span></span><br><span class="line">arraylist.isEmpty();</span><br><span class="line"><span class="comment">// 是否包含某一个值</span></span><br><span class="line">arraylist.contains(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="comment">// 判断数据在集合内的什么位置(不存在则返回-1)</span></span><br><span class="line">arraylist.indexOf(<span class="string">&quot;zhangsan&quot;</span>); <span class="comment">// 获取第一次出现的位置</span></span><br><span class="line">arraylist.lastIndexOf(<span class="string">&quot;zhangsan&quot;</span>); <span class="comment">// 获取最后一次出现的位置</span></span><br><span class="line"><span class="comment">// 将集合转换为数组</span></span><br><span class="line">Object[] obj = arraylist.toArray();</span><br><span class="line"><span class="comment">// 复制新集合</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">clone</span> <span class="operator">=</span> arraylist.clone();</span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> (ArrayList)clone;</span><br></pre></td></tr></table></figure><h5 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arrayList.add(<span class="number">2</span>);</span><br><span class="line">        arrayList.add(<span class="number">1</span>);</span><br><span class="line">        arrayList.add(<span class="number">4</span>);</span><br><span class="line">        arrayList.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        arrayList.sort(<span class="keyword">new</span> <span class="title class_">NumberComparator</span>());</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现比较器接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1 - o2; <span class="comment">// o1 - o2 升序, o2 - o1 为降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedList-基本操作"><a href="#LinkedList-基本操作" class="headerlink" title="LinkedList 基本操作"></a>LinkedList 基本操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">LinkedList</span> <span class="variable">linkedlist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">linkedlist.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">linkedlist.addFirst(<span class="string">&quot;lisi&quot;</span>); <span class="comment">// 在链表头部添加元素</span></span><br><span class="line">linkedlist.add(<span class="number">1</span>,<span class="string">&quot;wangwu&quot;</span>); <span class="comment">// 在第二的元素的位置插入元素</span></span><br><span class="line">System.out.println(linkedlist); <span class="comment">// 打印数据</span></span><br><span class="line"></span><br><span class="line">linkedlist.push(<span class="string">&quot;zhangsan&quot;</span>); <span class="comment">// 从头开始压入</span></span><br><span class="line">linkedlist.pop(); <span class="comment">// 从头弹出元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line">linkedlist.getfirst(); <span class="comment">// 获取第一个元素</span></span><br><span class="line">linkedlist.getlast();<span class="comment">// 获取最后一个元素</span></span><br><span class="line">linkedlist.get(<span class="number">1</span>); <span class="comment">// 获取第二个元素 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(Object obj : linkedList)&#123;</span><br><span class="line">  System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改set</span></span><br><span class="line"><span class="comment">// 删除remove,remove不传参删除的是第一个元素</span></span><br><span class="line">linkedlist.removeFirst();</span><br><span class="line">linkedlist.removeLast();</span><br><span class="line"><span class="comment">// 获取第一个数据</span></span><br><span class="line">linkedlist.element();</span><br></pre></td></tr></table></figure><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>没有索引，是数组与链表的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"><span class="comment">// set.toArray(); 转为数组</span></span><br><span class="line"><span class="comment">// set.addAll(); 将某一集合添加到set当中</span></span><br><span class="line"><span class="comment">// set.contains(); 判断是否包含某元素</span></span><br><span class="line"><span class="comment">// set.clone(); 复制数组</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p>类似于数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象(括号为数组长度)</span></span><br><span class="line">ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;String&gt;(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">queue.offer(<span class="string">&quot;zhangsan&quot;</span>); </span><br><span class="line"><span class="comment">// 出队数据</span></span><br><span class="line">queue.poll();</span><br><span class="line"><span class="comment">// 出队数据，如果已经无元素则阻塞</span></span><br></pre></td></tr></table></figure><h4 id="HashMap-lt-key-value-gt"><a href="#HashMap-lt-key-value-gt" class="headerlink" title="HashMap&lt;key,value&gt;"></a>HashMap&lt;key,value&gt;</h4><blockquote><ol><li>数据 + 链表,无序</li><li>容量为16</li><li>key和value都可以为null</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 压入数据</span></span><br><span class="line">hashMap.put(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">hashMap.putIfAbsent(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1&quot;</span>); <span class="comment">// 如果当前集合没有该key则压入，如果有该key值则忽略</span></span><br><span class="line">System.out.println(hashMap.put(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;4&quot;</span>)); <span class="comment">// 如果key相同，则value值将会被覆盖，返回被覆盖的值</span></span><br><span class="line"><span class="comment">// 获取key的value</span></span><br><span class="line">hashMap.get(<span class="string">&quot;zhangsan&quot;</span>); <span class="comment">// 获取key为zhangsan的value值</span></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">hashMap.remove(<span class="string">&quot;zhangsan&quot;</span>); <span class="comment">// 删除key为zhangsan的元素</span></span><br><span class="line">hashMao.remove(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;1&quot;</span>); <span class="comment">// key和value都相等才删除</span></span><br><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line">hashMap.replace(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;5&quot;</span>); <span class="comment">// 返回被修改的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取hashMap当中所有的key</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> hashMap.KeySet();</span><br><span class="line"><span class="keyword">for</span>(String k : set)&#123;</span><br><span class="line">  System.out.println(hashMap.get(k)); <span class="comment">// 获取key对应的value值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取hashMap当中所有的value</span></span><br><span class="line">Collection&lt;String&gt; values = hashMap.values();</span><br><span class="line"><span class="comment">// 是否包含某value值</span></span><br><span class="line">hashMap.containsValue(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">// 获取键值对</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hashMap.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;=&quot;</span> + entry.getValue()); <span class="comment">// 可以直接输出 entry</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 迭代器（删除当前遍历元素）</span></span><br><span class="line">Set&lt;String&gt; strings = hashMap.keySet();</span><br><span class="line"><span class="comment">// 创建迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = strings.iterator();</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;lisi&quot;</span>.equals(key))&#123;</span><br><span class="line">                iterator.remove(); <span class="comment">// 只能对当前元素删除</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">System.out.println(hashMap);</span><br></pre></td></tr></table></figure><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><blockquote><p>与HashMap实现方法不同，继承父类不一样<br>容量为11<br>key 和 value 不能为null</p><p>相较于 HashMap 来说相对较慢，多数方法使用同步概念，速度慢，防止冲突</p></blockquote><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 指定集合中包含的元素类型</span></span><br><span class="line">        ArrayList&lt;Person&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        arrayList.add(person);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> arrayList.get(<span class="number">0</span>);</span><br><span class="line">        person1.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;文件路径&quot;</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"><span class="comment">// 判断文件类型</span></span><br><span class="line">file.isFile(); <span class="comment">// 判断该文件对象是否为文件</span></span><br><span class="line">file.isDirectory(); <span class="comment">// 判断该文件对象是否为文件夹</span></span><br><span class="line"><span class="comment">// 判断该文件对象是否关联</span></span><br><span class="line">file.exists();</span><br><span class="line"><span class="comment">// 创建新文件夹</span></span><br><span class="line">file.mkdir();</span><br><span class="line"><span class="comment">// 创建新文件</span></span><br><span class="line">file.createNewFile();</span><br><span class="line"><span class="comment">// 文件长度</span></span><br><span class="line">file.length();</span><br><span class="line"><span class="comment">// 获取绝对路径</span></span><br><span class="line">file.getAbsolutePath();</span><br><span class="line"><span class="comment">// 获取文件名</span></span><br><span class="line">file.getName();</span><br><span class="line"><span class="comment">// 遍历文件夹中的文件（将文件名放入字符串数组中）</span></span><br><span class="line">String[] list = file.list();</span><br><span class="line"><span class="keyword">for</span>(String k : list)&#123;</span><br><span class="line">System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历文件夹中的文件对象（路径）</span></span><br><span class="line">File[] files = file.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">System.out.println(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\files\\environment\\Git\\Local_repository\\Java_study\\17test\\test\\123.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">desFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\files\\environment\\Git\\Local_repository\\Java_study\\17test\\test\\123.txt.copy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// TODO 文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(desFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输入流的标识，文件下一个数据存在则返回unicode编码，否则返回-1</span></span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">               <span class="comment">// TODO 打开阀门，流转数据（输出）</span></span><br><span class="line">                out.write(data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\files\\environment\\Git\\Local_repository\\Java_study\\17test\\test\\123.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">desFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\files\\environment\\Git\\Local_repository\\Java_study\\17test\\test\\123.txt.copy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// TODO 文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 管道输入输出流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">inputStream</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">outputStream</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建缓冲区</span></span><br><span class="line">        <span class="type">byte</span>[] cache = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(desFile);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 创建缓冲流对象</span></span><br><span class="line">            inputStream = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(in);</span><br><span class="line">            outputStream = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(out);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO 打开阀门，流转数据（输入）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// TODO 打开阀门，流转数据（输出）</span></span><br><span class="line">            <span class="keyword">while</span> ((data = inputStream.read(cache)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果文件数据已经读取完毕后再去读取，读取的结果就是-1，表示无效（结尾）</span></span><br><span class="line">                outputStream.write(cache,<span class="number">0</span>,data); <span class="comment">// （缓冲区，从x开始读取，数据对象）</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\files\\environment\\Git\\Local_repository\\Java_study\\17test\\test\\123.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">desFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\files\\environment\\Git\\Local_repository\\Java_study\\17test\\test\\123.txt.copy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 字符输出流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFile));</span><br><span class="line">            printWriter = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(desFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO 打开阀门，流转数据（输入）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// TODO 打开阀门，流转数据（输出）</span></span><br><span class="line">          <span class="comment">// 按行输出</span></span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                printWriter.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 将缓冲区的所有输出传入目标文件</span></span><br><span class="line">            printWriter.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (printWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="序列化、反序列化"><a href="#序列化、反序列化" class="headerlink" title="序列化、反序列化"></a>序列化、反序列化</h5><p><img src="/2023/01/11/java%E5%9F%BA%E7%A1%80/image-20230113112821682.png" alt="image-20230113112821682"></p><p><img src="/2023/01/11/java%E5%9F%BA%E7%A1%80/image-20230113112930739.png" alt="image-20230113112930739"></p><p><strong>序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">File</span> <span class="variable">desFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\files\\environment\\Git\\Local_repository\\Java_study\\17test\\test\\obj.dat&quot;</span>);</span><br><span class="line"><span class="comment">// 定义输出流</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 创建输出流对象</span></span><br><span class="line">  out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(desFile);</span><br><span class="line">  objOut = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">  <span class="comment">// 创建对象并写入文件</span></span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  objOut.writeObject(user);</span><br><span class="line">  objOut.flush();</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 关闭输出流</span></span><br><span class="line">            <span class="keyword">if</span> (objOut != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objOut.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>反序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\files\\environment\\Git\\Local_repository\\Java_study\\17test\\test\\obj.dat&quot;</span>);</span><br><span class="line"><span class="comment">// 定义输入流</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objIn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 创建输入流对象</span></span><br><span class="line">  in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">  objIn = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">  <span class="comment">// 读取文件中的对象</span></span><br><span class="line">  <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> objIn.readObject();</span><br><span class="line">  System.out.println(o);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 关闭输出流</span></span><br><span class="line">            <span class="keyword">if</span> (objOut != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objOut.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>一个进程可以包含多个线程<br>java默认有一个主进程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建自定义线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建自定义线程类</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明自定义线程类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 输出自定义线程名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/11/java%E5%9F%BA%E7%A1%80/image-20230113122843246.png" alt="image-20230113122843246"></p><h5 id="串行和并发"><a href="#串行和并发" class="headerlink" title="串行和并发"></a>串行和并发</h5><blockquote><p>串行：多个线程按顺序依次执行<br>并行：多个线程相互独立，谁抢到了cpu的执行权，谁就能执行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 串行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建自定义线程类</span></span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">myThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">myThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">        myThread1.start();</span><br><span class="line">        myThread2.start();</span><br><span class="line"><span class="comment">// 将线程加入到主线程当中依次执行</span></span><br><span class="line">        myThread1.join();</span><br><span class="line">        myThread2.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明自定义线程类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程创建问题"><a href="#线程创建问题" class="headerlink" title="线程创建问题"></a>线程创建问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建线程对象时，可以只把逻辑传给这个对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;线程执行&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以传递Runnable接口的类对象，一般使用匿名类</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;线程1执行&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">thread1.start();</span><br></pre></td></tr></table></figure><h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><p><img src="/2023/01/11/java%E5%9F%BA%E7%A1%80/image-20230113170029180.png" alt="image-20230113170029180"></p><p>所谓的线程池就是线程对象的容器，可以根据需要创建一个或多个线程对象<br>java的四种比较常见的线程池</p><ol><li>创建固定数量的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExecutorService 是线程服务对象</span></span><br><span class="line"><span class="comment">// 创建线程容量为3的线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 提交五次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>根基需要动态创建线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有几个任务创建几个线程</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService1</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure><ol start="3"><li>单一线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService2</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br></pre></td></tr></table></figure><ol start="4"><li>定时调度线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以定义每个线程调度的时间</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService2</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h5><p><img src="/2023/01/11/java%E5%9F%BA%E7%A1%80/image-20230113171447606.png" alt="image-20230113171447606"><img src="/2023/01/11/java%E5%9F%BA%E7%A1%80/image-20230113171537035.png" alt="image-20230113171537035"></p><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><p>多个线程访问同步方法时，只能一个一个访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="type">Num</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Num</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(num);</span><br><span class="line">        user.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Bank</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>(num);</span><br><span class="line">        b.start();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Num</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Num num;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Num num)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> ( num )&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1,wait&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                num.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;2,yes&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bank</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Num num;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">bank</span><span class="params">(Num num)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> ( num )&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h5><blockquote><p>wait 等待（Object成员方法） &amp;&amp; sleep 休眠 （Thread静态方法）</p></blockquote><p>使用方式<br>wait：只能使用在同步代码中<br>sleep：可以在任意地方使用</p><p>阻塞时间<br>wait：超时时间（超过时间会引发异常,需要被唤醒）<br>sleep：休眠时间（不会发生错误）</p><p>同步处理<br>wait：如果执行wait方法，那么其他线程有机会执行当前的同步操作<br>sleep：如果执行sleep方法，其他线程没有机会执行当前的同步操作</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> UserTest;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">User</span>&gt; aClass = user.getClass();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取类名</span></span><br><span class="line">        System.out.println(aClass.getName());   <span class="comment">// 包含包名</span></span><br><span class="line">        System.out.println(aClass.getSimpleName()); <span class="comment">// 只有类名</span></span><br><span class="line">       System.out.println(aClass.getPackageName()); <span class="comment">// 获取包名</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取该类的父类</span></span><br><span class="line">        System.out.println(aClass.getSuperclass()); </span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取类的接口</span></span><br><span class="line">     Class&lt;?&gt;[] interfaces = aClass.getInterfaces();</span><br><span class="line">        System.out.println(interfaces.length);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取类的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getField(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 只能获取 public 权限的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 能获取所有权限的属性</span></span><br><span class="line">      Field[] fields = aClass.getFields(); <span class="comment">// 获取所有属性(public)</span></span><br><span class="line">      <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> aClass.getDeclaredFields(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 获取所有属性(公共)</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取类的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 获取指定名称的方法（public）</span></span><br><span class="line">      <span class="type">Method</span> <span class="variable">declaredMethod</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// 获取指定名称的方法（全部）</span></span><br><span class="line">     Method[] methods = aClass.getMethods();<span class="comment">// 获取全部方法(public)</span></span><br><span class="line">        Method[] declaredMethods = aClass.getDeclaredMethods(); <span class="comment">// 获取全部方法(全部)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取构造方法</span></span><br><span class="line">      Constructor&lt;? <span class="keyword">extends</span> <span class="title class_">User</span>&gt; constructor = aClass.getConstructor();</span><br><span class="line">        Constructor&lt;? <span class="keyword">extends</span> <span class="title class_">User</span>&gt; declaredConstructor = aClass.getDeclaredConstructor();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取权限（修饰符）</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> aClass.getModifiers(); <span class="comment">// 多个修饰符会融合为一个int值（与或运算）</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">aPublic</span> <span class="operator">=</span> Modifier.isPublic(modifiers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><blockquote><p>java中的类主要分为3种：</p><ol><li>Java核心类库的类：String,Object</li><li>JVM软件平台的开发商</li><li>自己写的类</li></ol><p>类加载器也有三种：</p><ol><li>BootClassLoder : 启动类加载器(加载类时，采用操作系统平台语言实现)</li><li>PlatformClassLoder ：平台类加载器</li><li>AppClassLoder：应用类加载器</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类的信息</span></span><br><span class="line">        Class&lt;Student&gt; studentClass = Student.class;</span><br><span class="line">        System.out.println(studentClass);</span><br><span class="line"><span class="comment">// 获取类的加载器对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> studentClass.getClassLoader(); <span class="comment">// 应用类加载器--自己写的类</span></span><br></pre></td></tr></table></figure><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现登录功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的构造方法对象</span></span><br><span class="line">        Class&lt;Emp&gt; empClass = Emp.class;</span><br><span class="line">        Constructor&lt;Emp&gt; declaredConstructor = empClass.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">// 构建对象</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line">        <span class="comment">// 获取对象属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">username</span> <span class="operator">=</span> empClass.getField(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">password</span> <span class="operator">=</span> empClass.getField(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// 给属性赋值</span></span><br><span class="line">        username.set(emp,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        password.set(emp,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">// 登录</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">login</span> <span class="operator">=</span> empClass.getMethod(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> login.invoke(emp);</span><br><span class="line">        System.out.println(invoke);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;admin&quot;</span>.equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器有关</title>
      <link href="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/"/>
      <url>/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h4 id="更新apt包"><a href="#更新apt包" class="headerlink" title="更新apt包"></a>更新apt包</h4><blockquote><p>apt update– 更新索引</p><p>apt upgrade– 更新apt</p></blockquote><p><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230220105459370.png" alt="image-20230220105459370"></p><h3 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h3><p>命令</p><blockquote><p>wget -O install.sh <a href="http://download.bt.cn/install/install-ubuntu.sh">http://download.bt.cn/install/install-ubuntu.sh</a> &amp;&amp; sudo bash install.sh</p></blockquote><h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><h2 id="将云服务器作为图床使用"><a href="#将云服务器作为图床使用" class="headerlink" title="将云服务器作为图床使用"></a>将云服务器作为图床使用</h2><ol><li><p>在宝塔面板安装 <code>tomcat</code></p></li><li><p>在服务器安全组中开放8080端口（tomcat配置在哪个端口开哪个）</p></li><li><p>在配置面板加入以下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docBase:目标目录 </span><br><span class="line"># path:虚拟目录</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/blogImg&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/pic&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20220902205404645.png" alt="image-20220902205404645"></p></li><li><p>设置 <code>PicGo</code> ,下载插件sftp<img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20220902211200357.png" alt="image-20220902211200357"></p></li><li><p>配置<img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20220902211258182.png" alt="image-20220902211258182"></p></li></ol><blockquote><p>网站标识：（随便起）<br>配置文件：创建文件，粘入配置</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Lyblog&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://120.25.248.122&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;:8080/pic/&#123;fullName&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;uploadPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/blogImg/&#123;fullName&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;120.25.248.122&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dirMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0666&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="使用阿里OSS搭建图床"><a href="#使用阿里OSS搭建图床" class="headerlink" title="使用阿里OSS搭建图床"></a>使用阿里OSS搭建图床</h2><ol><li><p>登录阿里云官网（<a href="https://www.aliyun.com/%EF%BC%89%E8%B4%AD%E4%B9%B0OSS%E8%B5%84%E6%BA%90%E5%8C%85">https://www.aliyun.com/）购买OSS资源包</a></p><p><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119100523843.png" alt="image-20230119100523843"></p></li></ol><p><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119100609482.png" alt="image-20230119100609482"></p><ol start="2"><li>购买完成后，进入管理控制台穿件创建Bucket，权限为公共读</li><li>创建RAM子用户的AccessKey进行API的访问<br><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119101205483.png" alt="image-20230119101205483"></li></ol><p><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119101231242.png" alt="image-20230119101231242"><br>填入登录名称和显示名称（自己起)，访问方式勾选API访问即可，<strong>创建好的AccessKey ID 和 AccessKey Secret妥善保存，退出该页面就看不到了</strong></p><p><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119101437711.png" alt="image-20230119101437711"></p><ol start="4"><li>回到用户页，为子用户添加权限<br><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119101836255.png" alt="image-20230119101836255"></li></ol><p>只需添加这一个权限即可</p><p><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119101901087.png" alt="image-20230119101901087"></p><ol start="5"><li><p>返回控制台，在Bucket中为子用户添加读写权限<br><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119102107077.png" alt="image-20230119102107077"></p></li><li><p>配置PicGo</p></li></ol><p><img src="/2022/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%85%B3/image-20230119102159453.png" alt="image-20230119102159453"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/07/17/Mybatis/"/>
      <url>/2022/07/17/Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>持久层框架，用于简化 JDBC 开发 </p><p>持久层：负责将数据保存到数据库的那一层代码</p><p>JavaEE三层架构：表现层，业务层，持久层</p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ol><li><p>创建 maven 项目</p></li><li><p>导入依赖项坐标（mybatis,junit,mysql-connection,logback,junit 等）</p></li><li><p>创建 mybatis 核心配置文件 – 连接信息，解决硬编码问题（在resource中创建 mybatis-config.xml）</p><p>​基本模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载mapper.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.LyBlue.mapper&quot;</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写SQL映射文件 – 统一管理sql语句（在resource中编写 xxxMapper.xml）</p><p>​基本模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 名称空间可以自定义 id自定义 resulttype 为指定查询的pojo类（例如com.Lyblue.pojo.User） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写 pojo 类（在 main&#x2F;java&#x2F;com&#x2F;Lyblue&#x2F;pojo 当中创建）</p><p> 创建数据库使用的基本类型参数，并添加 get 和 set 和 toString 方法</p><p><img src="/2022/07/17/Mybatis/image-20220720122030032.png" alt="image-20220720122030032"></p></li><li><p>编写测试类（在 main&#x2F;java&#x2F;com&#x2F;Lyblue&#x2F; 当中创建）</p><p>基本模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 mybatis 配置文件对象，获取 SqlSessionFactory 对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 SqlSesion 对象，用来执行 sql</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 sql（内容为命名空间 + id 如下图所示）</span></span><br><span class="line">List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><p><img src="/2022/07/17/Mybatis/image-20220720125142914.png" alt="image-20220720125142914"></p><p>基本目录结构：</p></li></ol><p><img src="/2022/07/17/Mybatis/image-20220720125725764.png" alt="image-20220720125725764"></p><h2 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h2><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><blockquote><p>配置数据库连接信息，可以配置多个</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置默认环境，根据id区分  --&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span> </span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Zzp8421-&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Zzp8421-&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><blockquote><p>配置pojo类中文件的别名，不区分大小写</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.Lyblue.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在Mapper.xml当中, resultType 值可以直接写pojo类名称，不区分大小写</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.Lyblue.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from test.manager;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mapeper代理开发"><a href="#mapeper代理开发" class="headerlink" title="mapeper代理开发"></a>mapeper代理开发</h2><ol><li>在 java 目录下和 resources 目录下创建 mapper 包，其中java包中创建一个mapper调用接口，resource包中使用sql语句的mapper.xml，使其在同一个目录结构下，目录结构如下：<br><img src="/2022/07/17/Mybatis/image-20220720141501633.png" alt="image-20220720141501633"></li></ol><p>其中xml当中的命名空间为接口的路径（例如：com.Lyblue.mapper.UserMapper）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 命名空间为mapper接口路径，id为接口方法名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.Lyblue.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.Lyblue.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from test.manager;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中接口中存放调用 mapper 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">      List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在测试类中使用mapper调用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载mybatis配置文件，获取SqlSessionFactory对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 SqlSession 对象，用来执行sql</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取mapper接口的代理对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; users = mapper.selectAll();</span><br><span class="line">System.out.println(users);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure></li></ol><p><strong>若封装类的名称和数据库的名称不一致，可用如下方法</strong></p><ol><li><p>直接在语句中起别名(使别名和封装类名称一致)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, brand_name <span class="keyword">as</span> brandName, <span class="keyword">from</span> manager;</span><br></pre></td></tr></table></figure></li><li><p>在mapper.xml当中设置别名(resultMap)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  id : 唯一标识</span></span><br><span class="line"><span class="comment">  type : 映射的类型，支持别名</span></span><br><span class="line"><span class="comment">  column : 表的列名</span></span><br><span class="line"><span class="comment">  property : 封装类的属性名</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随后将查询语句的 <code>resultType</code> 改为 <code>resultMap</code> ,内容为 resultMap 的 id</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from test.manager;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p> 查询语句遇到特殊字符</p><blockquote><p>使用 CDATA</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from test.manager where id</span><br><span class="line">     &lt;![CDATA[</span><br><span class="line">        &lt;</span><br><span class="line">     ]]&gt;</span><br><span class="line">     #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单案例："><a href="#简单案例：" class="headerlink" title="简单案例："></a>简单案例：</h3><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><p><strong>方法1：散装参数</strong></p><ol><li><p>在 Mapper.xml 当中编写sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from test.manager</span><br><span class="line">            where</span><br><span class="line">                name like #&#123;name&#125;</span><br><span class="line">            and</span><br><span class="line">                gender = #&#123;gender&#125;;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>到对应mapper接口实现方法</p><blockquote><p>@Parma:传递多个参数时，进行参数绑定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;gender&quot;)</span> String gender)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在测试类当中实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;li&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;女&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模糊查询进行处理</span></span><br><span class="line">        name = <span class="string">&quot;%&quot;</span> + name + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载 mybatis 配置文件对象，获取 SqlSessionFactory 对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectByCondition(name, gender);</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：实体类封装参数</strong></p></li><li><p>在 Mapper.xml 当中编写sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from test.manager</span><br><span class="line">            where</span><br><span class="line">                name like #&#123;name&#125;</span><br><span class="line">            and</span><br><span class="line">                gender = #&#123;gender&#125;;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>到对应mapper接口实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在测试类当中实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;li&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;女&quot;</span>;</span><br><span class="line">   </span><br><span class="line">    name = <span class="string">&quot;%&quot;</span> + name + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 封装对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    users.setName(name);</span><br><span class="line">    users.setGender(gender);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 加载 mybatis 配置文件对象，获取 SqlSessionFactory 对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">   </span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">   </span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">   </span><br><span class="line">    List&lt;User&gt; users1 = mapper.selectByCondition(users);</span><br><span class="line">   </span><br><span class="line">    System.out.println(users1);</span><br><span class="line">   </span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>方法3：map集合封装</strong></p><ol><li><p>在 Mapper.xml 当中编写sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from test.manager</span><br><span class="line">            where</span><br><span class="line">                name like #&#123;name&#125;</span><br><span class="line">            and</span><br><span class="line">                gender = #&#123;gender&#125;;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>到对应mapper接口实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectByCondition</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用map集合封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;li&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;女&quot;</span>;</span><br><span class="line">   </span><br><span class="line">    name = <span class="string">&quot;%&quot;</span> + name + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">   </span><br><span class="line">    hashMap.put(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    hashMap.put(<span class="string">&quot;gender&quot;</span>,gender);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 加载 mybatis 配置文件对象，获取 SqlSessionFactory 对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">   </span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">   </span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">   </span><br><span class="line">    List&lt;User&gt; users1 = mapper.selectByCondition(hashMap);</span><br><span class="line">   </span><br><span class="line">    System.out.println(users1);</span><br><span class="line">   </span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>在 Mapper.xml 当中可以设置标签条件查询</p><blockquote><p>   <where> 标签可以自动去掉不需要的 and</where></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from test.manager</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">              and  name like #&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27; &quot;</span> &gt;</span></span><br><span class="line">                and gender = #&#123;gender&#125;;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单条件动态查询</p><blockquote><p>choose 相当于 switch，when 相当于 case，otherwise 相当于 default</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByConditionSingle&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from test.manager</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              name like #&#123;name&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              gender = #&#123;gender&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><ol><li><p>在 Mapper 接口中添加 add 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></li><li><p>alt + insert 在 mapper.xml 当中编辑插入语句(insert 语句快速补全 -&gt; ins )</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot; 设置主键返回，可以在测试类当中调用id的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into test.manager (name, gender, birthday, score, email, tel, status)</span><br><span class="line">        values (#&#123;name&#125;,#&#123;gender&#125;,#&#123;birthday&#125;,#&#123;score&#125;,#&#123;email&#125;,#&#123;tel&#125;,#&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编辑测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 封装方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;ShiLiu&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;女&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;2000-11-23&quot;</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">11.14</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;114514@114.com&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> <span class="string">&quot;114514&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">         user.setName(name);</span><br><span class="line">         user.setGender(gender);</span><br><span class="line">         user.setBirthday(birthday);</span><br><span class="line">         user.setEmail(email);</span><br><span class="line">         user.setStatus(status);</span><br><span class="line">         user.setTel(tel);</span><br><span class="line">         user.setScore(score);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 加载 mybatis 配置文件对象，获取 SqlSessionFactory 对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设为 true 为自动提交事务，false 为手动提交事务</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        mapper.add(user);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 手动提交事务</span></span><br><span class="line">      sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>动态修改字段</p><ol><li><p>定义 update 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></li><li><p>编辑 Mapper.xml (只修改需要修改的数据，数据为空的话则数据不变)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update test.manager</span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        name = #&#123;name&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        gender = #&#123;gender&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null and birthday != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        birthday = #&#123;birthday&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;score != null and score != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        score = #&#123;score&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        email = #&#123;email&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tel != null and tel != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        tel = #&#123;tel&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null and status != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        status = #&#123;status&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p><strong>单独删除</strong></p><ol><li><p>在 Mapper 接口中创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 Mapper.xml 当中编辑删除语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">delete from test.manager where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编辑测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">   </span><br><span class="line">    mapper.deleteById(id);</span><br><span class="line">   </span><br><span class="line">    sqlSession.close();</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>批量删除</strong></p><ol><li><p>在 Mapper 接口中创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="type">int</span>[] ids)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以加注解,可以在 xml 当中的循环中使用 ids 作为数组参数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Parma(&quot;ids&quot;)</span><span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 Mapper.xml 当中编辑删除语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    mybatis 会将数组参数，封装成一个Map集合</span></span><br><span class="line"><span class="comment">        * 默认： array = 数组</span></span><br><span class="line"><span class="comment">        * 使用 @param 注解改变 Map 集合的默认 key 的名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">        delete from test.manager where id</span><br><span class="line">        in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="简单项目"><a href="#简单项目" class="headerlink" title="简单项目"></a>简单项目</h3><ol><li><p>创建maven项目</p></li><li><p>在<code>pom.xml</code>导入依赖坐标( <code>servlet</code>，<code>mybatis</code>,<code>mysql</code>，<code>jsp</code>等)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建三层架构包结构</p><p><img src="/2022/07/17/Mybatis/image-20220903203552231.png" alt="image-20220903203552231"></p></li><li><p>在<code>pojo</code>创建实体类<code>brand.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Lyblue.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">brand</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String book_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBook_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> book_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBook_name</span><span class="params">(String book_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.book_name = book_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;brand&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, book_name=&#x27;&quot;</span> + book_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>resources</code>导入<code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Zzp8421-&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置pojo类中文件的别名，不区分大小写   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.Lyblue.pojo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  扫描 mapper 文件夹中的文件  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.Lyblue.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建mapper</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2022/07/14/Maven/"/>
      <url>/2022/07/14/Maven/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Maven提供了一套标准化的项目结构，所有IDE使用Maven构建的项目结构完全一致，所有IDE创建的Maven项目可以通用</p><p>提供了一套标准化的构建流程（编译，测试，打包，发布…）</p><p>提供了一套依赖管理机制 （管理项目所依赖的第三方资源）</p></blockquote><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="/2022/07/14/Maven/image-20220714165942515.png" alt="image-20220714165942515"></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="系统环境搭建"><a href="#系统环境搭建" class="headerlink" title="系统环境搭建"></a>系统环境搭建</h4><ol><li>配置环境变量 添加系统变量MAVEN_HOME,路径为下载并解压的maven文件夹</li></ol><p><img src="/2022/07/14/Maven/image-20220714182938657.png" alt="image-20220714182938657"></p><p>再在path在中添加 %MAVEN_HOME%\bin</p><p><img src="/2022/07/14/Maven/image-20220714183113253.png" alt="image-20220714183113253"></p><blockquote><p> 验证是否配置成功 mvn -version</p></blockquote><p>更改默认仓库（在maven根目录下的conf&#x2F;setting.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果注释的话默认存放在 C:\Users\用户名\.m2\repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>F:\files\environment\Web\apache-maven-3.8.4\mvn_res<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>更换镜像( 在setting.xml 当中直接粘入)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- maven 下载镜像地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>uk<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>CN<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSChina Central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">name</span>&gt;</span>internal nexus repository</span><br><span class="line">               <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- &lt;url&gt;http://192.168.1.100:8081/nexus/content/groups/public/&lt;/url&gt;--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="IDEA基础设置"><a href="#IDEA基础设置" class="headerlink" title="IDEA基础设置"></a>IDEA基础设置</h4><blockquote><p>设置-&gt;搜索maven 设置主目录,设置文件和本地仓库</p></blockquote><p><img src="/2022/07/14/Maven/image-20220714183516431.png" alt="image-20220714183516431"></p><h4 id="更改Maven镜像源"><a href="#更改Maven镜像源" class="headerlink" title="更改Maven镜像源"></a>更改Maven镜像源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 打开settings.xml(在上述设置的目录中),将下列代码复制进去</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- maven 下载镜像地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>uk<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>CN<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSChina Central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">name</span>&gt;</span>internal nexus repository</span><br><span class="line">               <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- &lt;url&gt;http://192.168.1.100:8081/nexus/content/groups/public/&lt;/url&gt;--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><img src="/2022/07/14/Maven/image-20220714214122792.png" alt="image-20220714214122792"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>scope</strong></p><p><img src="/2022/07/14/Maven/image-20220717212724109.png" alt="image-20220717212724109"></p><blockquote><p>自动导入依赖项:  alt + insert </p></blockquote><p><strong>常用命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile : 编译</span><br><span class="line">clean : 清理</span><br><span class="line">test : 测试</span><br><span class="line">package : 打包</span><br><span class="line">install : 安装</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="/2022/07/14/Maven/image-20220714211325680.png" alt="image-20220714211325680"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><blockquote><p>maven helper</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java环境配置</title>
      <link href="/2022/07/11/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/11/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一-JDK下载"><a href="#一-JDK下载" class="headerlink" title="一. JDK下载"></a>一. JDK下载</h2><ol><li>下载安装包</li></ol><blockquote><p><a href="https://www.oracle.com/java/technologies/downloads">https://www.oracle.com/java/technologies/downloads</a></p></blockquote><ol start="2"><li>直接安装在指定文件夹（好想的）</li></ol><h2 id="二-环境配置"><a href="#二-环境配置" class="headerlink" title="二.环境配置"></a>二.环境配置</h2><ol><li>打开系统变量，在系统变量中新建变量 <code>Java_Home</code>，值为 jdk 根目录<br><img src="/2022/07/11/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220711222020383.png" alt="image-20220711222020383"></li></ol><p><img src="/2022/07/11/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220711222057090.png" alt="image-20220711222057090"></p><ol start="2"><li><p>在path当中编辑，添加两个变量名</p><blockquote><p>%Java_Home%\bin</p><p>%Java_Home%\jre\bin</p></blockquote><p><img src="/2022/07/11/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220711222331615.png" alt="image-20220711222331615"></p></li><li><p>再在系统变量中新建变量<code>CLASSPATH</code>，值为</p><blockquote><p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p></blockquote></li></ol><h2 id="检测是否成功"><a href="#检测是否成功" class="headerlink" title="检测是否成功"></a>检测是否成功</h2><blockquote><p>java -version</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/07/11/JDBC/"/>
      <url>/2022/07/11/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol start="0"><li><p>创建项目，导入jar包</p></li><li><p>注册驱动（mysql 5 之后的驱动包可省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取连接（连接数据库 ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection( url , username , password);</span><br><span class="line"></span><br><span class="line">-- url 语法 : jdbc:mysql://ip地址(域名):端口号/数据库名称?参数键值对1&amp;参数键值对2...</span><br><span class="line">-- 如果连接的是本机的sql服务器，且端口为3306，则可简写为 jdbc:mysql:///数据库名称?参数键值对</span><br><span class="line">-- 配置 useSSL = false 参数，禁用安全连接方式，解决警告问题</span><br></pre></td></tr></table></figure></li><li><p>定义sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;....&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>获取执行sql对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure></li><li><p>执行sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stmt.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int executeUpdate(sql); 操作数据语句，返回影响的行数</span></span><br><span class="line"><span class="comment">// ResultSet executeQuery(sql); 查询语句，返回 ResultSet 结果集对象</span></span><br></pre></td></tr></table></figure></li><li><p>处理返回结果</p></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li></ol><p><strong>事务处理方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 开启事务</span></span><br><span class="line">connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 提交事务</span></span><br><span class="line">  connection.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  connection.rollback();</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="ResultSet-结果集对象"><a href="#ResultSet-结果集对象" class="headerlink" title="ResultSet(结果集对象)"></a>ResultSet(结果集对象)</h3><blockquote><p>执行查询操作（遍历）</p><p>boolean next()<br>1.将光标从当前位置向前移动一行<br>2.判断当前行是否为有效行(true有效，false无效)</p><p>getXXX(参数)：获取XXX类型 数据<br>参数：1.数字 – 指定读取某一列的数据(从1开始)<br>           2.列名称 – 直接将列名称的字符串赋入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 ResultSet 数据集对象</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合(用于存放数据)</span></span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">User</span>()&lt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数据集对象</span></span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>); <span class="comment">// 或者为列名称 &quot;id&quot;</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="number">2</span>); <span class="comment">// 或者为 &quot;name&quot;</span></span><br><span class="line">  </span><br><span class="line">  user.setId(id);</span><br><span class="line">  user.setName(name);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 存入集合</span></span><br><span class="line">  list.add(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><blockquote><p>继承statement，预编译SQL语句并执行，预防SQL注入问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;114514&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from 表名 where username = ? and password = ？&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 PreparedStatement 对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> connection.preparestatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 ？ 的值（从1开始）</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">pstmt.setString(<span class="number">2</span>,password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 判断表中是否有用户信息</span></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">pstmt.close();</span><br><span class="line">connnection.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h1><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230224204307082.png" alt="image-20230224204307082"></p><blockquote></blockquote><h2 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h2><p>DDL：数据定义语言<br>DML：数据操作语言<br>DQL：数据查询语言<br>DCL：数据控制语言，对数据库进行权限控制</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>数值</li><li>日期</li><li>字符串</li></ol><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220706160832982.png" alt="image-20220706160832982"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数值类型</span></span><br><span class="line">字段名称 数据类型(数据总长度,小数后保留位数)</span><br><span class="line"><span class="comment">-- 时间类型</span></span><br><span class="line">字段名称 data,</span><br><span class="line"><span class="comment">-- 字符串类型</span></span><br><span class="line"><span class="type">char</span> 定长字符串 给几个字符空间就存几个 存储性能高 浪费空间</span><br><span class="line"><span class="type">varchar</span> 变长字符串 计算总共几个字符再存储 存储性能低 浪费时间</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单行注释（必须加空格）</span></span><br><span class="line"># 单行注释（mysql特有，无需加空格）</span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br></pre></td></tr></table></figure><h2 id="DDL-–-操作数据库"><a href="#DDL-–-操作数据库" class="headerlink" title="DDL – 操作数据库"></a>DDL – 操作数据库</h2><h3 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h3><ol><li><p>查询数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Show</span> databases;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> databases 数据库名称;</span><br><span class="line"><span class="keyword">Create</span> databases if <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名称; <span class="comment">-- 如果数据库不存在则创建</span></span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Drop</span> databases 数据库名称;</span><br><span class="line"><span class="keyword">Drop</span> databases if <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名称; <span class="comment">-- 如果数据库不存在则创建</span></span><br></pre></td></tr></table></figure></li><li><p>使用数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名称; <span class="comment">-- 切换数据库</span></span><br><span class="line"><span class="keyword">select</span> database();<span class="comment">-- 查看当前使用的数据库</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ol><li><p>查询当前数据库下所有表的名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure></li><li><p>查询表结构</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名称;</span><br></pre></td></tr></table></figure></li><li><p>创建表 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>修改表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新的表名;</span><br><span class="line"><span class="comment">-- 添加一列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型;</span><br><span class="line"><span class="comment">-- 修改数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新数据类型 其他需要修改的参数（例如id自增长 auto_increment）;</span><br><span class="line"><span class="comment">-- 修改列名和数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 列名 新列名 新数据类型;</span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="DML-–-操作数据"><a href="#DML-–-操作数据" class="headerlink" title="DML – 操作数据"></a>DML – 操作数据</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><ol><li><p>给指定列添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>，列名<span class="number">2</span>，...) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure></li><li><p>给全部列添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure></li><li><p>批量添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>，列名<span class="number">2</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，...),(值<span class="number">1</span>，值<span class="number">2</span>，...),(值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ol><li><p>修改表数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>，列名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>，... <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> ...;</span><br></pre></td></tr></table></figure><h2 id="DQL–查询操作"><a href="#DQL–查询操作" class="headerlink" title="DQL–查询操作"></a>DQL–查询操作</h2><h3 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表 <span class="keyword">in</span> (<span class="string">&#x27;内容1&#x27;</span>，<span class="string">&#x27;内容2&#x27;</span>...) <span class="operator">||</span> 条件<span class="number">1</span> <span class="operator">=</span> 内容<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">2</span> <span class="operator">=</span> 内容<span class="number">2</span> </span><br><span class="line"><span class="keyword">between</span> 时间<span class="number">1</span> <span class="keyword">and</span> 时间<span class="number">2</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组后条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">排序字段 (默认为 升序 <span class="keyword">asc</span> 降序 <span class="keyword">desc</span> ) </span><br><span class="line"><span class="comment">-- 如果有多个排序条件，当前面的条件值一样时，才会根据第二条件进行排序</span></span><br><span class="line">limit</span><br><span class="line">分页限定 </span><br></pre></td></tr></table></figure><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220708222802545.png" alt="image-20220708222802545"></p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓马的</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;马%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询第二个字是 &#x27;花&#x27; 的</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_花%&#x27;</span>; </span><br><span class="line"><span class="comment">-- 查询名字中包含 &#x27;德&#x27; 的</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%德%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote><p>概念：将一列数据作为一个整体，进行纵向计算。</p><p>null值不参与聚合函数运算</p></blockquote><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220708223956199.png" alt="image-20220708223956199"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> 表名; <span class="comment">-- count 统计的列名不能为空（主键 或 *） </span></span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询男女的 数学平均分，以及各自的人数，要求分数低于70分不参与分组，分组之后 人数大于2</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">sex <span class="keyword">as</span> 性别, <span class="built_in">avg</span>(math) <span class="keyword">as</span> 平均分, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 人数 </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">表名 </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">math <span class="operator">&gt;</span> <span class="number">70</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">sex </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">2</span>; </span><br></pre></td></tr></table></figure><blockquote><p>where 是分组前进行限定过滤，having 是分组后对结果进行过滤<br>where 不能对聚合函数进行判断，having 可以</p></blockquote><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><blockquote><p>Mysql : limit<br>Oracle : rownumber<br>SQL Server : top  </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从0开始查询，查询3条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 limit <span class="number">0</span> , <span class="number">3</span>; </span><br><span class="line"><span class="comment">-- 每页显示3条数据，查询第一页数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 limit  <span class="number">0</span> , <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 每页显示3条数据，查询第二页数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 limit  <span class="number">3</span> , <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 每页显示3条数据，查询第三页数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 limit  <span class="number">6</span> , <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 起始索引 = （当前页码 - 1） * 每页显示的条数;</span></span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><blockquote><p>起别名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">t1.name,</span><br><span class="line">t1.age,</span><br><span class="line">t2.dep_name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">t1.dep_id <span class="operator">=</span> t2.id</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220709205706268.png" alt="image-20220709205706268"></p><p><strong>显式内连接</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220709205751090.png" alt="image-20220709205751090"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.id;</span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="普通约束"><a href="#普通约束" class="headerlink" title="普通约束"></a>普通约束</h3><blockquote><p>约束是作用于表中列上的规则，用于限制加入表的数据</p></blockquote><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220709113058283.png" alt="image-20220709113058283"></p><blockquote><p>mysql不支持检查约束</p></blockquote><p><strong>示例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  ename <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>, <span class="comment">-- 唯一</span></span><br><span class="line">  joindate <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  salary <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  bonus <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">default</span> <span class="number">0</span> <span class="comment">-- 奖金，默认为0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><blockquote><p>外键用来让两个表的数据之间建立连接，保证数据的一致性和完整性。</p><p>先添加主表的数据后添加从表的数据</p></blockquote><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220709164429580.png" alt="image-20220709164429580"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建数据表时语法如下：</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (从表外键字段) <span class="keyword">REFERENCES</span> 主表 (主键字段)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将创建数据表创号后语法如下：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (从表外键字段) <span class="keyword">REFERENCES</span> 主表 (主键字段);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_emp_dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept <span class="keyword">foreign</span> key(dep_id) <span class="keyword">references</span> dept(id);</span><br></pre></td></tr></table></figure><p>示例：创建一个学生表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student05(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>示例：创建一个班级表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class(</span><br><span class="line">classid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">studentid <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>示例：学生表作为主表，班级表作为副表设置外键， MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">add</span> <span class="keyword">constraint</span> fk_class_studentid <span class="keyword">foreign</span> key(studentid) <span class="keyword">references</span> student05(id);</span><br></pre></td></tr></table></figure><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230224203938899.png" alt="image-20230224203938899"></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>包含一组数据库命令，执行要么同时成功，要么同时失败</p></blockquote><h3 id="事务原则：ACID"><a href="#事务原则：ACID" class="headerlink" title="事务原则：ACID"></a>事务原则：ACID</h3><table><thead><tr><th>名称</th><th align="center">描述</th></tr></thead><tbody><tr><td>原子性（Atomicity）</td><td align="center">原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</td></tr><tr><td>一致性（Consistency）</td><td align="center">事务前后数据的完整性必须保持一致。</td></tr><tr><td>隔离性（Isolation）</td><td align="center">事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</td></tr><tr><td>持久性（Durability）</td><td align="center">事务一旦被提交则不可逆，被持久化到数据库中，接下 来即使数据库发生故障也不应该对其有任何影响</td></tr></tbody></table><h3 id="事务并发导致的问题"><a href="#事务并发导致的问题" class="headerlink" title="事务并发导致的问题"></a>事务并发导致的问题</h3><blockquote><p>隔离所导致的一些问题：</p></blockquote><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><strong>脏读</strong></td><td>指一个事务读取了另外一个事务未提交的数据。</td></tr><tr><td><strong>不可重复读</strong></td><td>在一个事务内读取表中的某一行数据，多次读取结果不同。</td></tr><tr><td><strong>虚读(幻读)</strong></td><td>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</td></tr></tbody></table><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>在数据库操作中，为了有效保证并发读取数据的正确性，提出的事务隔离级别</p><ul><li><p>读未提交：一个事务读取到其他事务未提交的数据；这种隔离级别下，查询不会加锁，一致性最差，会产生脏读、不可重复读、幻读的问题</p></li><li><p>读已提交：一个事务只能读取到其他事务已经提交的数据；该隔离级别避免了脏读问题的产生，但是不可重复读和幻读的问题仍然存在；</p></li></ul><blockquote><p>读提交事务隔离级别是大多数流行数据库的默认事务隔离级别，比如 Oracle，但是不是 MySQL 的默认隔离界别</p></blockquote><ul><li><p>可重复读：事务在执行过程中可以读取到其他事务已提交的新插入的数据，但是不能读取其他事务对数据的修改，也就是说多次读取同一记录的结果相同；该个里级别避免了脏读、不可重复度的问题，但是仍然无法避免幻读的问题</p><blockquote><p>可重复读是MySQL默认的隔离级别</p></blockquote></li><li><p>串行化：事务串行化执行，事务只能一个接着一个地执行,、，并且在执行过程中完全看不到其他事务对数据所做的更新；缺点是并发能力差，最严格的事务隔离，完全符合ACID原则，但是对性能影响比较大</p></li></ul><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交（read-committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 执行语句</span></span><br><span class="line"><span class="keyword">update</span> mo <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">50</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> mo <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">50</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询是否自动提交</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>; <span class="comment">-- 1为自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改为手动提交</span></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="指定存储引擎"><a href="#指定存储引擎" class="headerlink" title="指定存储引擎"></a>指定存储引擎</h4><p>创建表时，可以指定存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 数据类型 [COMMENT字段<span class="number">1</span>注释],</span><br><span class="line">  ...</span><br><span class="line">)engine <span class="operator">=</span> innodb [COMMENT 表注释]</span><br></pre></td></tr></table></figure><h4 id="查看当前数据库支持的存储引擎"><a href="#查看当前数据库支持的存储引擎" class="headerlink" title="查看当前数据库支持的存储引擎"></a>查看当前数据库支持的存储引擎</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230224205719420.png" alt="image-20230224205719420"></p><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230224210954999.png" alt="image-20230224210954999"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230224211259522.png" alt="image-20230224211259522"></p><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230224211327995.png" alt="image-20230224211327995"></p><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230224211422658.png" alt="image-20230224211422658"></p><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230224211619331.png" alt="image-20230224211619331"></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>索引是帮助Mysql高效获取数据的排好序的数据结构</p></blockquote><h3 id="索引的优势和劣势"><a href="#索引的优势和劣势" class="headerlink" title="索引的优势和劣势"></a>索引的优势和劣势</h3><p><strong>优势：</strong></p><ul><li><p>可以提高数据检索的效率，降低数据库的IO成本，类似于书的目录。</p></li><li><p>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</p><ul><li>被索引的列会自动进行排序，包括【单列索引】和【组合索引】，只是组合索引的排序要复杂一些。</li><li>如果按照索引列的顺序进行排序，对应order by语句来说，效率就会提高很多。</li></ul></li></ul><p>劣势：</p><ul><li><p>索引会占据磁盘空间</p></li><li><p>索引虽然会提高查询效率，但是会降低更新表的效率。比如每次对表进行增删改操作，MySQL不仅要保存数据，还有保存或者更新对应的索引文件。</p></li></ul><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>索引列中的值必须是唯一的，不允许有空值。</p><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><p>MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值。</p><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>索引列中的值必须是唯一的，但是允许为空值。</p><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>只能在文本类型CHAR,VARCHAR,TEXT类型字段上创建全文索引。字段长度比较大时，如果创建普通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引。 MyISAM和InnoDB中都可以使用全文索引。</p><h4 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h4><p>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。MySQL在空间索引这方面遵循OpenGIS几何数据模型规则。</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>在文本类型如CHAR,VARCHAR,TEXT类列上创建索引时，可以指定索引列的长度，但是数值类型不能指定。</p><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><ol><li><p>设置mysql配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></li><li><p>默认情况下， bind - address 的值为 127.0.0.1 ，所以只能监听本地连接。我们需要将这个值改为远程连接 ip 可访问，可使用通配符 ip 地址 *， ::， 0.0.0.0 ，当然也可以是单独的固定 ip，这样就仅允许指定 ip 连接，更加安全。</p></li><li><p>重启mysql服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure></li></ol><h2 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 登录状态下</span></span><br><span class="line">mysql<span class="operator">&gt;</span> use mysql;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges;</span><br></pre></td></tr></table></figure><h2 id="Mysql-8-版本忘记密码"><a href="#Mysql-8-版本忘记密码" class="headerlink" title="Mysql 8 版本忘记密码"></a>Mysql 8 版本忘记密码</h2><ol><li><p>停止mysql服务</p><blockquote><p>net stop mysql;</p></blockquote></li><li><p>无密码启动（以安全模式启动跳过验证）</p><blockquote><p>mysqld –console –skip-grant-tables –shared-memory</p></blockquote></li><li><p>在另一个dos窗口中无密码登录</p></li><li><p>清空密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>关闭两个dos，启动mysql服务并无密码登录</p></li><li><p>重置密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> root<span class="variable">@localhost</span> identified <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><blockquote><p>一个容器，负责分配、管理数据库连接</p></blockquote><p><img src="/2022/07/06/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220713092023216.png" alt="image-20220713092023216"></p><blockquote><p>常见数据库连接池</p><ul><li><p>DBCP</p></li><li><p>C3P0</p></li><li><p>Druid </p><p>​<a href="https://repo1.maven.org/maven2/com/alibaba/druid/">https://repo1.maven.org/maven2/com/alibaba/druid/</a></p></li></ul></blockquote><h3 id="Driud-使用步骤"><a href="#Driud-使用步骤" class="headerlink" title="Driud 使用步骤"></a>Driud 使用步骤</h3><ol><li>导入jar包（druid-1.1.12.jar）</li><li>定义配置文件</li><li>加载配置文件</li><li>获取数据库连接池对象</li><li>获取连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc_demo/src/druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(System.getProperty(&quot;user.dir&quot;));</span></span><br></pre></td></tr></table></figure><p>配置文件（druid.properties）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///test?useSSL=false&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">Zzp8421-</span></span><br><span class="line"><span class="comment"># 初始连接数</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><h1 id="基本工具使用"><a href="#基本工具使用" class="headerlink" title="基本工具使用"></a>基本工具使用</h1><h2 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新建查询</span></span><br><span class="line">ctrl <span class="operator">+</span> q</span><br><span class="line"><span class="comment">-- 关闭当前查询窗口</span></span><br><span class="line">ctrl <span class="operator">+</span> w</span><br><span class="line"><span class="comment">-- 打开sql命令行窗口</span></span><br><span class="line">F6</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行查询语句</span></span><br><span class="line">ctrl <span class="operator">+</span> r <span class="comment">-- 全部执行</span></span><br><span class="line">ctrl <span class="operator">+</span> shift <span class="operator">+</span> r  <span class="comment">-- 单句执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复制当前行</span></span><br><span class="line">ctrl <span class="operator">+</span> d</span><br><span class="line"><span class="comment">-- 删除当前行</span></span><br><span class="line">ctrl <span class="operator">+</span> i</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转为大写</span></span><br><span class="line">ctrl <span class="operator">+</span> shift <span class="operator">+</span> U</span><br><span class="line"><span class="comment">-- 转为小写</span></span><br><span class="line">ctrl <span class="operator">+</span> shift <span class="operator">+</span> L</span><br></pre></td></tr></table></figure><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><blockquote><p><a href="http://t.csdn.cn/zq8tK">http://t.csdn.cn/zq8tK</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--图</title>
      <link href="/2022/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/"/>
      <url>/2022/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h3 id="存储及基本操作"><a href="#存储及基本操作" class="headerlink" title="存储及基本操作"></a>存储及基本操作</h3><ol><li><p>邻接矩阵法</p><blockquote><p>时间复杂度为 <code>O(n²)</code> ，n为图的顶点数 |V|</p></blockquote><p><img src="/2022/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/image-20220629225949800.png" alt="image-20220629225949800"></p></li></ol><p>定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100<span class="comment">// 顶点数目的最大值</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType; <span class="comment">// 顶点的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;<span class="comment">// 带权图中边上权值的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  VertexType Vex[MaxSize];  <span class="comment">// 顶点表</span></span><br><span class="line">  EdgeType Edge[MaxSIze][MaxSize];<span class="comment">// 邻接矩阵，边表</span></span><br><span class="line">  <span class="type">int</span> vexnum, arcnum;<span class="comment">// 图的当前顶点数和弧数</span></span><br><span class="line">&#125;MGrapg;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>邻接表法</p><p><img src="/2022/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/image-20220630213850453.png" alt="image-20220630213850453"></p><p><img src="/2022/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/image-20220630213829769.png" alt="image-20220630213829769"></p></li><li><p>十字链表<br><img src="/2022/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/image-20220630213951606.png" alt="image-20220630213951606"></p></li></ol><p>​4.邻接多重表</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux_operation</title>
      <link href="/2022/06/26/linux-operation/"/>
      <url>/2022/06/26/linux-operation/</url>
      
        <content type="html"><![CDATA[<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch xxx</span><br></pre></td></tr></table></figure><h4 id="移动-amp-amp-复制文件"><a href="#移动-amp-amp-复制文件" class="headerlink" title="移动&amp;&amp;复制文件"></a>移动&amp;&amp;复制文件</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**复制**</span></span><br><span class="line"><span class="code">cp 目标文件夹\目标文件（或者为*） 文件夹\xxx</span></span><br><span class="line"><span class="code">**移动** </span></span><br><span class="line"><span class="code">mv 目标文件夹\目标文件（或者为*） 文件夹\xxx</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software activation</title>
      <link href="/2022/06/16/Software-activation/"/>
      <url>/2022/06/16/Software-activation/</url>
      
        <content type="html"><![CDATA[<h3 id="IDEA激活"><a href="#IDEA激活" class="headerlink" title="IDEA激活"></a>IDEA激活</h3><p>教程网址</p><blockquote><p><a href="http://www.itmind.net/11734.html">http://www.itmind.net/11734.html</a></p></blockquote><p>破解补丁：百度网盘</p><blockquote><p>不要升级！不要升级！不要升级！</p></blockquote><h3 id="Typora激活"><a href="#Typora激活" class="headerlink" title="Typora激活"></a>Typora激活</h3><blockquote><p><a href="https://www.exception.site/essay/how-to-free-use-intellij-idea">https://www.exception.site/essay/how-to-free-use-intellij-idea</a></p></blockquote><p>清华大学软件镜像站</p><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_栈</title>
      <link href="/2022/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
      <url>/2022/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h3 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;Stack;</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">initStack</span><span class="params">(Stack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判栈空"><a href="#判栈空" class="headerlink" title="判栈空"></a>判栈空</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackPush</span><span class="params">(Stack &amp;S,<span class="type">char</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == MaxSize - <span class="number">1</span>) <span class="comment">// 如果栈满,退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.data[++S.top] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackPop</span><span class="params">(Stack S,<span class="type">char</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( S.top == <span class="number">-1</span>)   <span class="comment">// 如果栈空,退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = S.data[S.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="括号匹配算法"><a href="#括号匹配算法" class="headerlink" title="括号匹配算法"></a>括号匹配算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 括号匹配算法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  输入一个目标数组 str[] (存储括号信息),lenth为数组长度</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SqStackMatching</span><span class="params">(<span class="type">char</span> str[],<span class="type">int</span> lenth)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组初始化</span></span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">initSqStack</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenth; i++)&#123;</span><br><span class="line">        <span class="comment">// 判断输入的是左括号入栈,</span></span><br><span class="line">        <span class="comment">// 如果是右括号且栈为空退出,非空则与前面括号比较</span></span><br><span class="line">        <span class="keyword">if</span>( str[i] == <span class="string">&#x27;(&#x27;</span> || str[i] == <span class="string">&#x27;[&#x27;</span> || str[i] == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            <span class="built_in">SqStackPush</span>(S, str[i]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">SqStackEmpty</span>(S))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span> topElement;</span><br><span class="line">            <span class="built_in">SqStackPop</span>(S,topElement);</span><br><span class="line">            <span class="keyword">if</span> ( str[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; topElement != <span class="string">&#x27;(&#x27;</span> )</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>( str[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; topElement != <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>( str[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; topElement != <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果全部匹配成功,则栈内元素则全部取出匹配</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">SqStackEmpty</span>(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于vscode配置c++环境</title>
      <link href="/2022/05/11/%E5%85%B3%E4%BA%8Evscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/05/11/%E5%85%B3%E4%BA%8Evscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="安装-C-x2F-C-编译器"><a href="#安装-C-x2F-C-编译器" class="headerlink" title="安装 C&#x2F;C++ 编译器"></a>安装 C&#x2F;C++ 编译器</h3><ol><li><p>下载 Mingw-w64 GCC</p><blockquote><p>在 sourceforge 网站下载  Mingw-w64 GCC (直接搜索)</p><blockquote><p>网址: <a href="https://sourceforge.net/projects/mingw-w64/files/">https://sourceforge.net/projects/mingw-w64/files/</a></p></blockquote></blockquote></li><li><p>解压到指定文件夹 (好想的)</p></li><li><p>添加到环境变量PATH中 </p></li><li><p>测试 <code> gcc -v</code></p></li></ol><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ol><li>C&#x2F;C++ (版本为<code> 1.8.4</code> 新版本不会自动生成配置文件)</li></ol><h3 id="配置-vscode"><a href="#配置-vscode" class="headerlink" title="配置 vscode"></a>配置 vscode</h3><p>1.创建放代码的文件夹,开始写代码</p><blockquote><p>test.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world~&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ctrl + F5 运行,依次选择第一个程序运行</p></blockquote><p>想要在控制台窗口打开,将 <code>launch.json</code> 中的 <code>&quot;externalConsole&quot;:</code> 改为<code>true</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_线性表</title>
      <link href="/2022/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2022/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Linear-LIst-线性表"><a href="#Linear-LIst-线性表" class="headerlink" title="Linear_LIst (线性表)"></a>Linear_LIst (线性表)</h1><p>​</p><h2 id="SqList-–-顺序表"><a href="#SqList-–-顺序表" class="headerlink" title="SqList – 顺序表"></a>SqList – 顺序表</h2><p><strong>随机存取</strong>的存储结构</p><p><img src="/2022/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220626162925688.png" alt="image-20220626162925688"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>静态分配</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10 <span class="comment">// 定义最大长度</span></span></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">int</span> data[MaxSize]; <span class="comment">// 元素</span></span><br><span class="line"><span class="type">int</span> length;  <span class="comment">// 长度 </span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><blockquote><p>动态分配</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  ElemType *data;</span><br><span class="line">  <span class="type">int</span> MaxSize,Length;</span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><blockquote><p>动态分配语句</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = (Elemtype *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType)*InitSize);</span><br></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><blockquote><p>插入操作是将 i+1 及以后的元素依次后移，再将元素插入到i位置。</p><p>平衡时间复杂度为 O(n)</p><p><strong>参数值</strong></p><table><thead><tr><th align="center">变量名</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">SqList &amp;L</td><td align="center">操作的顺序表</td></tr><tr><td align="center">int i</td><td align="center">插入的元素位置</td></tr><tr><td align="center">ElemType e</td><td align="center">需要插入的元素</td></tr></tbody></table><p>return：<br>    bool：返回插入是否成功</p></blockquote><p><img src="/2022/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220626165618297.png" alt="image-20220626165618297"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 判断插入位置是否合法</span></span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length)&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 判断表是否已满</span></span><br><span class="line">  <span class="keyword">if</span>(L.lenth &gt;= MaxSize)&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 依次后移</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j = L.length; j &gt;= i; j--)&#123; </span><br><span class="line">    L.data[i] = L.data[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 插入元素e</span></span><br><span class="line">  L.data[i] = e; </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 长度加一</span></span><br><span class="line">  L.length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><blockquote><p>删除顺序表中第 i 个位置的元素，用引用变量e返回。</p><p>平均时间复杂度为 O(n)</p><table><thead><tr><th align="center">变量名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">SqList &amp;L</td><td align="center">线性表</td></tr><tr><td align="center">int i</td><td align="center">删除位置</td></tr><tr><td align="center">Elemtype &amp;e</td><td align="center">返回被删除的值</td></tr></tbody></table><p>return :<br>    bool：若输入不合法，则返回 false，成功返回 true</p></blockquote><p><img src="/2022/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220626190846481.png" alt="image-20220626190846481"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 判断位序是否合法</span></span><br><span class="line">  <span class="keyword">if</span>( i &lt; <span class="number">1</span> || i &gt; L.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 将第i个元素赋给e</span></span><br><span class="line">  e = L.data[i - <span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 将元素依次前移</span></span><br><span class="line">  <span class="keyword">for</span> ( <span class="type">int</span> j = i; j &lt; L.length; j++)&#123;</span><br><span class="line">    L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 长度-1</span></span><br><span class="line">  L.length--;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按值查找-顺序查找"><a href="#按值查找-顺序查找" class="headerlink" title="按值查找(顺序查找)"></a>按值查找(顺序查找)</h3><blockquote><p>在顺序表L中查找第一个元素值等于e的元素，并返回其位序。</p><p>平均时间复杂度为 O(n)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">locateElem</span><span class="params">(SqList L,Elemtype e)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; L.lenth; i++ )&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.data[i] == e)&#123;</span><br><span class="line">      <span class="keyword">return</span> i + <span class="number">1</span>;   <span class="comment">// 数组下标从0开始，位序从1开始</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="综合应用题"><a href="#综合应用题" class="headerlink" title="综合应用题"></a>综合应用题</h3><h4 id="删除最小值"><a href="#删除最小值" class="headerlink" title="删除最小值"></a>删除最小值</h4><blockquote><p>从顺序表中删除具有最小值的元素（假设唯一）并由函数返回被删除元素的值，空出的位置由最后一个元素填补，若顺序表为空，则显示出错信息并退出运行</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Del_min</span><span class="params">(SqList &amp;L,ElemType &amp;value)</span></span>&#123;</span><br><span class="line"><span class="comment">// 判断合法</span></span><br><span class="line">  <span class="keyword">if</span>(L.length == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 设置最小值和最小值位置的初始值</span></span><br><span class="line">  value = L.data[<span class="number">0</span>]; </span><br><span class="line">  <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 找出最小值</span></span><br><span class="line">  <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">1</span>; i &lt; L.length; i++ )&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.data[i] &lt; value)&#123;</span><br><span class="line">      value = L.data[i];</span><br><span class="line">      pos = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将最后一个元素赋给最小值（覆盖）</span></span><br><span class="line">    L.data[pos] = L.data[L.length - <span class="number">1</span>];</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元素逆置"><a href="#元素逆置" class="headerlink" title="元素逆置"></a>元素逆置</h4><blockquote><p>设计一个高效算法，将顺序表L的所有元素逆置，要求算法的空间复杂度为O(1)</p><p>思路：对折交换</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reverse</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">  ElemType temp;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length / <span class="number">2</span>; i++)&#123;</span><br><span class="line">    temp = L.data[i];</span><br><span class="line">    L.data[i] = L.data[L.length - i - <span class="number">1</span>];</span><br><span class="line">    L.data[L.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除所有值为x的元素"><a href="#删除所有值为x的元素" class="headerlink" title="删除所有值为x的元素"></a>删除所有值为x的元素</h4><blockquote><p>对长度为n的顺序表L，编写一个时间复杂度为O(n)，空间复杂度为O(1)的算法，该算法删除线性表中所有值为x的数据元素。</p></blockquote><p><strong>解法1：</strong></p><blockquote><p>思路：忽略值为x的元素，将其他元素依次排列在数组中</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Del_x</span><span class="params">(SqList &amp;L,ElemType x)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> k = <span class="number">0</span>,i;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.data[i] != x)&#123;</span><br><span class="line">      L.data[k] = L.data[i];</span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  L.length = k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解法2：</strong></p><blockquote><p>思路：k为统计值为x的元素的个数，遇到值为x的元素则 k+1，遇到值非x的元素将其前移到 i - k 的位置上</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Del_x</span><span class="params">(SqList &amp;L,ElemType x)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; L.length)&#123;</span><br><span class="line">    <span class="keyword">if</span>( L.data[i] == x )&#123;</span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      L.data[i - k] = L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  L.length = L.length - k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkList-–-单链表"><a href="#LinkList-–-单链表" class="headerlink" title="LinkList – 单链表"></a>LinkList – 单链表</h2><p><img src="/2022/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220626233032573.png" alt="image-20220626233032573"></p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><blockquote><p>时间复杂度为<code>O(n)</code></p></blockquote><p><img src="/2022/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220626233212984.png" alt="image-20220626233212984"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line"><span class="comment">// s:新节点 x:元素值</span></span><br><span class="line">  LNode *s;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 创建头结点</span></span><br><span class="line">  L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 循环创建新节点</span></span><br><span class="line">  <span class="keyword">while</span>(x != <span class="number">9999</span>)&#123;</span><br><span class="line">    s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s -&gt; data = x;</span><br><span class="line">    s -&gt; next = L -&gt; next;</span><br><span class="line">    L -&gt; next = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h3><blockquote><p>时间复杂度为 <code>O(n)</code></p></blockquote><p><img src="/2022/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220628213118795.png" alt="image-20220628213118795"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_TailInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line"><span class="comment">// 创建头结点</span></span><br><span class="line">  L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="comment">// 创建 s 新节点，r 尾节点</span></span><br><span class="line">  LNode *s, *r = L;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>( x != <span class="number">9999</span> )&#123;</span><br><span class="line">    s = (LNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s -&gt; data = x;</span><br><span class="line">    r -&gt; next = s;</span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h3><blockquote><p>时间复杂度为 <code>O(n)</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LNode *<span class="title function_">LocateElem</span><span class="params">(LinkList L, ElemType e)</span>&#123;</span><br><span class="line">  LNode *p = L -&gt; next;</span><br><span class="line">  <span class="keyword">while</span>( p != <span class="literal">NULL</span> &amp;&amp; p -&gt; data != e)&#123;</span><br><span class="line">    p = p -&gt; next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 线性表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo有关问题</title>
      <link href="/2022/05/04/test/"/>
      <url>/2022/05/04/test/</url>
      
        <content type="html"><![CDATA[<h3 id="有关图片无法加载问题"><a href="#有关图片无法加载问题" class="headerlink" title="有关图片无法加载问题"></a>有关图片无法加载问题</h3><ol><li>安装依赖</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><ol start="2"><li>设置图片文件夹<br>把_config.yml中的post_asset_folder设为true，这个配置的意思是每次new post一个博客，会增加一个和博客同名的文件夹。</li></ol><h3 id="修改文档默认模板"><a href="#修改文档默认模板" class="headerlink" title="修改文档默认模板"></a>修改文档默认模板</h3><blockquote><p>博客位置 &gt; scaffolds &gt; post</p></blockquote><p><img src="/2022/05/04/test/image-20230124100937288.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
